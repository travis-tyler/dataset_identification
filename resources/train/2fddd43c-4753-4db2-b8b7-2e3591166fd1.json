[{"section_title": "Abstract", "text": "During hurricane seasons, emergency managers and other decision makers need accurate and 'on-time' information on potential storm surge impacts. Fully dynamical computer models, such as the ADCIRC tide, storm surge, and wind-wave model take several hours to complete a forecast when configured at high spatial resolution. Additionally, statically meaningful ensembles of high-resolution models (needed for uncertainty estimation) cannot easily be computed in near real-time. This paper discusses an artificial neural network model for storm surge prediction in North Carolina. The network model provides fast, real-time storm surge estimates at coastal locations in North Carolina. The paper studies the performance of the neural network model vs. other models on synthetic and real hurricane data."}, {"section_title": "Introduction", "text": "During hurricane seasons, emergency managers and other decision makers need accurate and 'ontime' information on potential storm surge impacts. Fully dynamical computer models, such as the ADCIRC tide, storm surge, and wind-wave model , when configured at high spatial resolution, typically take several hours to complete a forecast. This complicates computing statically meaningful ensembles of high-resolution models (needed for uncertainty estimation) in near real-time.\nContrary to this, an artificial neural network (ANN) can be an accurate and fast non-parametric model with computational complexity (Skiena, 1998) of only O(N 2 ) for a two layer feedforward neural network with N neurons in the hidden layer. This paper focuses on design, implementation, and testing of an ANN model for storm surge prediction in North Carolina. The inputs to the model are hurricane parameters such as its location, central pressure, and radius to maximum winds. The outputs are the storm surge predictions for specified locations along the coast. We start with a short description of the storm surge simulation process and needed inputs, followed by review of machine learning techniques as applied to storm surge. The network architecture is then described, followed by application to the North Carolina coast. The contributions of this work are as follows:\n\u2022 Fast and accurate model for NC coastal areas -the proposed ANN was tested on historic and simulated hurricane tracks;\n\u2022 Multiple outputs -one ANN serves multiple locations;\n\u2022 Open source implementation -the model is freely available and implemented using TensorFlow library (Abadi et al., 2015) ; Generally, storm surge dynamics is a relatively well-understood area in geosciences (see Flather (2001) for an excellent overview of the physics). Recent research activities, motivated by major hurricane events such as Hurricanes Katrina (2005) and Sandy (2012) , have focused on the ability to model and predict storm surge both for deterministic simulations (Lin et al., 2010; Dietrich et al., 2011; Dresback et al., 2013) and for probabilistic/ensemble-based approaches that allow assessment of uncertainties (Davis et al., 2010; Di Liberto et al., 2011; Bernier and Thompson, 2015) . Dynamic models for storm surge directly solve the shallow water wave equations given specified initial and boundary conditions (Resio and Westerink, 2008) , and include NOAAs SLOSH (Jelesnianski et al., 1992) , FVCOM (Qi et al., 2009) , and the Advanced Three-Dimensional Circulation Model (ADCIRC) (Luettich Jr et al., 1992; Westerink et al., 2008) . For hurricane-driven storm surge simulations, the boundary conditions include specification of the atmospheric surface pressure and surface wind velocity that describe the time-evolution of the hurricane vortex. The source of the winds and pressures themselves can represent an historical event, a synthetic event, or a forecast. Regardless, the data are usually either from dynamic models for the atmosphere (e.g., the National Weather Service's operational forecast models) or parametric descriptions of the vortex in terms of a few parameters. These parameters can be derived from analysis of the observed hurricane history as characterized in datasets such as the International Best Track Archive for Climate Stewardship (IBTrACS, Knapp et al. (2010) ) or actual hurricane forecasts from operational groups such as the National Hurricane Center. The fundamental parameters that describe hurricanes are the pressure deficit between the center of rotation and the far-away ambient conditions, the distance from the center of rotation to the location of maximum wind speeds, and the forward speed of the vortex (Holland, 1980 (Holland, , 2008 Holland et al., 2010) . Good overviews of hurricanes are given in Anthes (1974) and Marks (2003) .\nDynamic models like ADCIRC can be configured at a very high spatial resolution (Figure 1 ), but at a concomitant high cost in terms of computer resources needed to conduct a simulation in near-real-time Fran (1996) and Isabel (2003) are shown with purple lines. (Blanton et al., 2012b) . To overcome this challenge, surrogate models can be developed that leverage precomputed datasets of synthetic hurricane parameters and paths and storm surge responses. Regression models approximate the (unknown) functional relationship between inputs (hurricane parameters) and responses (storm surge), and include response surface methods (Khuri and Mukhopadhyay, 2010) applied to rapid storm surge simulations , as well as kriging (Jia and Taflanidis, 2013) .\nNon-parametric models are largely based on nonlinear regressions, support vector machines (SVM), and ANNs. The support vector method for function regression was introduced in Vapnik et al. (1997) and Smola and Vapnik (1997) . The core of the method is the proposition that a function is approximated by a linear combination of a small number of support vectors. Support vector regression is used for building non-parametric models. (Yu et al., 2006; Zhang et al., 2006; Sreekumar et al., 2015; Wolff et al., 2016; Ma et al., 2003; Khemchandani et al., 2009) . Rajasekaran et al. (2008) applied support vector methodology 3 for storm surge prediction and verified it using observations of water level at the Longdong station at Taiwan.\nANNs belong to a family of non-parametric models and have a wide area of application (Zhang et al., 1998; Govindaraju and Rao, 2013; Aminzadeh et al., 2013) , including storm surge predictions. Bajo and Umgiesser (2010) developed an ANN to reduce the error in storm surge predictions made by a parametric hydrodynamic model for Venice, Italy. Lee (2006 Lee ( , 2008 focused on two layer ANNs with the number of neurons ranging from 3 to 12 for typhoon storm surge. The models were trained using data from three typhoons impacting Taiwan One problem with applying non-parametric models, and ANNs in particular, is insufficient amounts of the data for model fitting. To overcome this, Kim et al. (2015) In this paper, we describe extensions of the above applications. First, we implement a multi-output prediction model, where a single ANN model produces storm surge predictions at multiple (currently ten) locations along the coast. Second, we use a three layer model (two hidden layers) where the first hidden layer pre-processes hurricane data and the second hidden layer calculates individual predictions. The rest of the paper is organized as follows: Section 2 reviews basics of ANNs, discusses dealing with multiple locations and implementation of the model, Section 3 overviews the data used in the study, Sections 4 and 5 discuss the findings and conclusions."}, {"section_title": "Feedforward Artificial Neural Network (FF ANN) for Storm Surge Prediction", "text": ""}, {"section_title": "Model Architecture", "text": "We briefly describe the application of artificial neural networks for storm surge prediction. More general and thorough discussions of the networks and applicable algorithms can be found in Bishop (2006) and De Oliveira et al. (2009) , among many others. Suppose hurricane data is described by a vector x of parameters such as longitude and latitude of its center, its forward or translation speed, radius from the center of rotation to maximum winds, etc. Suppose also that vector y represents storm surge predictions at several locations. Assuming that y does not depend on factors other than x, it can be evaluated as y = f (x), where f (\u00b7) is some modeling function. Depending on the implementation, f (\u00b7) can take various forms and in case of a two layer feed-forward ANN it is:\nwhere h is the output of the hidden layer, and W h , W i , b h , b i are weight matrices and biases for the the hidden and input layers respectively. The weight matrices and biases constitute a set of independent network parameters. \u03c3(\u00b7) is a nonlinear function applied component-wise to the vector, which is essential as it allows the network to devise a presentation of a nonlinear function. \u03c3(\u00b7) is typically a hyperbolic tangent or a sigmoid function: Figure 2 illustrates the architecture of a two-layer ANN. The information in the network travels from left to right (i.e., from the inputs x through a series of operations to the outputs y). The vertices represent input, output, hidden variables, and placeholders for biases, and the edges represent independent parameters (i.e., the weight matrices and the biases themselves).\nSuppose for each x, the observations of 'true' storm surges\u0177 are known. Then, the model can be trained to minimize the error between\u0177 and y by changing its independent parameters. Rumelhart et al.\n(1988) developed a highly efficient iterative back-propagation algorithm which is now commonly used for training. At each step, the algorithm calculates gradients for each model parameter to minimize the error from the outputs back to the inputs. The parameters are changed in accordance to their gradients and the procedure repeats until convergence.\nThe complexity of ANN algorithms is determined by the number of elementary operations, in this case multiplications. The number of multiplications follows from the size of the weight matrices and "}, {"section_title": "Dealing with Multiple Outputs", "text": "In contrast to previous studies, here the output vector y contains 10 components, one for each location along the coast. A straight-forward approach to modeling would be to have 10 separate two-layer networks one per each output and train them individually. This has been thoroughly tested and the literature suggests anywhere between eight and thirty neurons in the hidden layer, depending on the complexity of geography and other factors. However, due to spatial correlation between the outputs, the networks will be somewhat similar and redundant. Besides, intuitively, each hurricane track is a single event that impacts multiple locations and as such the information has to be shared across locations.\nWe have used a single network with multiple outputs to mitigate the impacts of this redundancy. Additionally, to improve information sharing in the network, the second hidden layer was included resulting in a three layer multiple output ANN. It is difficult, if not impossible, to make propositions regarding internals of ANNs, but intuition and empirical evidence suggest that the first hidden layer serves as an 'input preparation' layer, converting x to a better form, whereas the second hidden layer 'localizes' the outputs. Another proposition is to have more neurons in the second hidden layer compared to the first, since the output has more components than the input. are appropriately accurate and simple, which substantiates the propositions above."}, {"section_title": "Implementation", "text": "Model equations for the multiple output three layer network are as follows:\nwhere h 1 and h 2 are the outputs of the first and second hidden layers;\nweight matrices and biases for the first, second and output layers respectively. The model is trained using the back-propagation algorithm to minimize MSE of the training dataset of size N for K = 10 outputs:\nThe neural network was implemented and trained using Tensorflow library (Abadi et al., 2015) . The minimization of MSE was performed with the ADAM stochastic optimization algorithm (Kingma and Ba, 2014) with batch sizes from 19 to 57 tracks. The code can run on systems with multiple GPUs, in which case it calculates update gradients in parallel. Algorithm 1 summarizes the implementation and the complete code is available to download from (Bezuglov, 2016) .\nAlgorithm 1 Training algorithm for a multiple output ANN on parallel GPUs using TensorFlow 1: procedure Train(x,\u0177) x -inputs,\u0177 -observations 2:\nx n = Normalize(x) subtract means and divide by std component-wise\nfor g in GPUs do"}, {"section_title": "4:", "text": "g \u2190 InitializeN etwork() Assign a copy of the network on each GPU "}, {"section_title": "Dataset", "text": "In this work, the ANNs were trained and validated on a dataset of synthetic hurricanes and storm surge responses for coastal North Carolina. The dataset was computed for a recent and detailed coastal flood insurance study for FEMA (Blanton et al., 2012a) . The hurricane tracks in the dataset are shown in Figure 3a , along with representative storm surge responses from ADCIRC ( Figure 3 ). There are a total of 324 storm events. This set of hurricanes represents the statistics of landfalling hurricanes in North Carolina, including the landfall locations. Note that hurricane landfalls have not occurred north of Cape\nHatteras (see 1), although storms making landfall along the southeast-facing shore have transited across the coastal lands to exit back over water along the northern coast. We also do not include astronomical tides in the data set, since the hurricane events would occur at a random phase of the tide.\nThe hurricane parameters were used to train and validate the models. Each track is essentially a table with 193 rows and 16 columns. The first six columns represent x: time to landfall in days, hurricane center coordinates, radius to maximum winds, maximum wind speed, and storm forward/translation speed. The duration of each track is four days, with 3 days prior to landfall and one day post-landfall. The last ten columns are the outputs\u0177, i.e. storm surge in meters above mean sea level at the specified output locations (Figure 3a) .\nWhile discussing the dataset, it is important to touch on the subject of over-fitting, when a model, in attempt to minimize the error on a training dataset, fails to generalize on previously unseen data.\nOver-fitting is typically a result of an overly complex model trained on an insufficiently large dataset. In this work, several methods were applied to mitigate over-fitting. First, a somewhat heuristic observation suggests that the ratio of data samples to free model parameters has to be approximately 4:1 or higher.\nIf the number of free parameters in ANN is roughly the squared number of neurons, the recommended network size should be 125 neurons ( 62532/4) or fewer.\nSecond, the dataset is split into three subsets: training (70%, 228 tracks), validation (15%, 48 tracks), and testing (15%, 48 tracks). The training subset is used to update the network by calculating gradients and adjusting network weights and biases. The validation subset is used to evaluate model performance, adjust hyper-parameters such as its learning rate, and to detect over-fitting. The model performance is evaluated on the testing dataset."}, {"section_title": "Experiments and Discussion", "text": "Two metrics were applied to measure network performance: mean squared error (MSE) and correlation coefficient (R). Suppose that y at location i for sample j, then\nAll tests below were performed on either synthetic testing datasets or historic hurricanes, which were not directly 1 used for model training. Table 2 : Performance on synthetic hurricane tracks. Correlation coefficients R are given for output locations, numbered 1-10 from north to south as shown in Figure 1 . The table suggests a few observations. First, locations 6, 9, and 10 are more challenging for all the networks, whereas locations 3, 4, 5, and 7 appear to be the 'easiest', which is explained by the shape of 1 The historic hurricanes were used to derive parameters and generate synthetic hurricanes the coast. Second, the MSEs of three layer networks are about half that of the two layer networks, which further justifies the propositions given in Section 2.2. Third, R and MSE consistently improve with the growth of network complexity until it reaches (64, 128) . No further improvements are likely because of over-fitting. The (32,64) network demonstrates a good balance between accuracy and complexity and so it was selected for further analysis. Figure 4 demonstrates outputs of the (32,64) network on a few synthetic hurricane tracks. Each sub-figure shows the ten locations arranged vertically, from north (top) to south (bottom). As seen in the figure, tracks 1 and 2 were modeled accurately, whereas in track 3, the observations at locations 6 and 7 were underestimated. An interesting property of the network can be seen at location 5 for tracks 1 and 2. Even though the outputs at other locations were somewhat similar, the shared information from them did not inadvertently cause detrimental effects on the predictions at location 5."}, {"section_title": "Synthetic Hurricanes", "text": "ANN (N 1 , N 2 ) Epochs MSE R 1 R 2 R 3 R 4 R 5 R 6 R 7 R 8 R 9 R 10("}, {"section_title": "Analysis of network errors", "text": "As demonstrated by Table 2 , the mean prediction errors of the networks are low and are on average between 7 and 8 centimeters. Unfortunately, both MSE and R can be substantially influenced by accurate predictions before and after the landfalls and thus neither may represent the acceptable accuracy during times of peak water level. This section considers prediction errors by ANN (32, 64) , which demonstrated the best results previously.\nFirst, the ANN ran on the complete set of synthetic hurricane tracks and the errors were calculated as a difference between network outputs and observations for each data sample at each location. Assuming that at each location, the errors are independent, their probability density function (PDF) was fitted using kernel density estimation (Scott, 2015) . This approach provides an 'optimistic' view on model errors as it still includes error-free regions long before the landfalls.\nIn order to get a realistic estimation of network accuracy, the further analysis only included regions immediately prior and after the landfall that encompass the largest absolute errors. Identically to the previous case, for each location, error PDF was fitted and error probabilities evaluated. Table 3 summarizes the results for the first and the second cases.\nIn the table, the second column gives per location probabilities of the error to be within 10 centimeters for all the data, including pre-landfall regions. The last three columns give intervals and probabilities for the time window surrounding landfall."}, {"section_title": "Observed hurricane performance", "text": "Since the longterm goal is to develop prediction methods that provide usable information for decision makers, we used the ANN (32,64) model to predict the storm surge (without astronomical tides) for two The storm tracks are shown in Figure 1 . The input hurricane parameters for ANN were extracted from the IBTrACS dataset and interpolated to match the time intervals in the training data (30 minutes).\nFor each hurricane, we computed a \"truth\" solution using the ADCIRC model and using the same model configuration as that used to compute the training dataset. The parameters for neither storm are explicitly in the data set; however, they are in the historical data from which the data set parameters were derived.\nHurricane Fran made landfall near Southport, NC, (output location 9 on Figure 1 ) and caused significant flooding and coastal high water that approached 4 m ( 13 ft) in the Wrightsville Beach area (output location 8). Figure 5 shows the ANN response at the 10 output locations, along with the \"truth\"\nresponse. In the figure, the red lines represent ADCIRC and blue lines are the ANN model outputs.\nThe figure also provides root mean squared errors (rms) and mean absolute errors (mae) in meters for each coastal location. by the storms in the data set, there is a significant storm response along the northern NC coast (locations 1-4). This is expected since the size of the storm puts hurricane-force winds onshore and well to the north of landfall. There is very little \"truth\" storm surge response to the left (southwest) of the storm, but the ANN model shows negative water levels at locations 8-10. The figure also demonstrates that ANN generally under-predicts storm surge response in the north, where the ADCIRC storm surge is largest.\nPreviously, the experiments on synthetic storms also showed that locations 8-10 were the most challenging for the ANN with the greatest range of possible values. We interpret this to mean that the ANN training phase attempts to minimize the error by increasing the weight values, which inadvertently causes non-physical (negative) values of the storm surges. Unfortunately, none of the feedforward ANNs that were studied in this research could demonstrate exceptional accuracy at locations 8-10, which implies that the information contained in the input vector (x) may be insufficient. Had the network have some form of memory, it could have derived the missing information and use it, but this is not possible due to the limitations of the feedforward network architecture."}, {"section_title": "Conclusions", "text": "The paper presents a multiple output feedforward ANN for storm surge predictions in North Carolina.\nSeveral architectures and network sizes were compared with a three layer feedforward ANN with 32 and 64 neurons being the optimal in terms of its accuracy vs. complexity. The model and its implementation is freely available and can be applied to other coastal locations, provided that sufficient training data is available.\nThe model accuracy at each output is comparable or slightly better than that reported by other researchers. Even though the average errors were low, the absolute predictions of the FF ANN are subject to occasional under-estimation of peak surges. Based on the number of experiments and tested architectures, we consider that this is an inherent limitation of the memory-less, feedforward ANN approach. As such, further research will target introduction of state variables or memory to the network. "}]