[{"section_title": "Abstract", "text": "The Ares Real-Time Environment for Modeling, Integration, and Simulation (ARTEMIS) has been developed for use by the Ares I launch vehicle System Integration Laboratory at the Marshall Space Flight Center. The primary purpose of the Ares System Integration Laboratory is to test the vehicle avionics hardware and software in a hardwarein-the-loop environment to certify that the integrated system is prepared for flight. ARTEMIS has been designed to be the real-time simulation backbone to stimulate all required Ares components for verification testing. ARTE_VIIS provides high -fidelity dynamics, actuator, and sensor models to simulate an accurate flight trajectory in order to ensure realistic test conditions. ARTEMIS has been designed to take advantage of the advances in underlying computational power now available to support hardware-in-the-loop testing to achieve real-time simulation with unprecedented model fidelity. A modular realtime design relying on a fully distributed computing architecture has been implemented."}, {"section_title": "", "text": "simulation nodes capable of emulating avionics box functionality as well as communicating over the flight 1/0 data busses.\nARTEMIS must be capable of simulating the integrated stack during flight as well as propagating each individual element after separating from the vehicle. In addition, abort sequences can lead to unique configurations of the integrated stack as the timing and sequence of the stage separations are altered-In order to simulate nominal and abort conditions of the vehicle, and provide realistic sensor inputs, ARTEMIS must accurately model the dynamics and subsystems of the Ares I. The dynamics of the Ares I vehicle include significant interactions between vehicle flexible body effects, propellant slosh, and vehicle nozzle inertia effects as well as mass and flexible body properties that vary significantly during fli ght-Vehicle subsystems that cannot be physically tested in the laboratory must also be modeled with high fidelity inside the HWIL simulation-Examples of subsystem models include propellant flow through the fuel lines and engines, actuator nozzle dynamics, and engine combustion.\nThe following sections discuss how ARTEMIS has been designed to satisfy the unique requirements of the Ares I SIL-Section II provides an overview of the Ares integration and test facilities that will use ARTEMIS as the simulation backbone-Section III briefly describes the ARTEMIS software components-Section IV discusses the modeling and simulation components in more detail, while Section V presents information on the distributed realtime architecture. Section VI offers some conclusions and a description of the forward work leading to the first Ares I launch-II. Ares Integration and Test Facilities ARTEMIS has many applications across the verification of the Ares I vehicle-ARTEMIS will be used in the Upper Stage Software Development Facility (SDF), which supports Ares fli ght software design, development, test, integration, and verification of the flight computer and Coinimand and Telemetry Computer (CTC)-The SDF integrates hardware and software for the flight computer and CTC while ARTEMIS models the remainder of the Ares I vehicle to perform all-digital processor-in-the-loop tests of the flight software and vehicle interfaces.\nThree Ares element development and integration labs will then use the software developed in the SDF to perform additional integration and testing with the respective element of the vehicle. The labs, illustrated in Figure 1 , are the Upper Stage System Integration and Test Facility (SITF), the First Stage HWIL lab (HIL), and the J-2X HWIL lab. Each element lab is responsible for verifying the interfaces and functionality between all of its avionics components and hardware with the flight computer and other external connections-The SITF will contain all of the Upper Stage avionics hardware and use ARTEMIS to simulate all remaining Ares I avionics components and the vehicle flight- The HIL will be similar to the SITF in that it will have hardware-in-the-loop for all of the First Stage components with ARTEMIS providing simulated components for all other stages during a test. The J-2X HWIL will use the ARTEMIS simulation for the Ares I vehicle-, in addition, the J-2X engine hardware will interface with ARTEMIS in this lab.\nTesting will then progress to the integrated vehicle level. The Ares I Software Integration Laboratory (SIL) will be used to verify Ares I avionics and system requirements and to validate Ares I system performance through HWIL testing. Figure 2 shows the overall architecture of the SIL. The SIL will contain Flight Equivalent Units for both the Upper Stage and First Stage avionics components as well as the J-2X engine controller. The laboratory will mount avionics systems in flight-like avionics rings and will use flight-representative cables to interconnect the systems. As shown in the green box in the center of Figure 2 , ARTEMIS is the simulation backbone used to stimulate the Ares avionics components and flight software. The Managed Automation Environment for Simulation, Test ; and Realtime Operations (MAESTRO) software will be used by lab operators and testers to connnand the SIL, monitor data in real-time through 2D and ;D displays, and control data recording and archiving of simulation results. "}, {"section_title": "ARTEMIS", "text": ""}, {"section_title": "---------------------------------------", "text": "I:_-:ifi-Ccnfigurationof SIL Models and ni _s H'.'dis dependentupdnspecilictest objenives\nAres SIL architecture diagram ARTEMIS will also be used to drive the Ares Emulators. The Ares Emulators are integrated hardware/software systems that will be delivered to other Constellation test facilities. Examples of these facilities include:\n\u2022 The Orion CEV Avionics Inte gration Laboratory (CAIL) at Johnson Space Center (JSC) in Houston, TX \u2022 The Ground Operations (GroundOps) Test Facilities at Kennedy Space Center (KSC) in Cape Canaveral, FL ARTEMIS will simulate all Ares functions and provide data to the Orion and GroundOps through the flight interfaces as well as simulation-to-simulation interfaces as required. In a similar fashion ; Orion and GroundOps Emulators will also be delivered to the SIL in order to simulate the functionality of those components during integrated Ares avionics testing.\nAdditional applications of ARTEMIS include testing during Upper Stage and J-2X hardware integration at the Michoud Assembly Facility (MAF) and during vehicle stacking on the mobile launcher at KSC. After each Ares mission has been completed, flight test data will then be used to validate all of the Ares development labs previously discussed. "}, {"section_title": "III. ARTEMIS Overview", "text": "The majority of ARTEMIS is written in C and is designed to allow distribution across multiple computing nodes. ARTEMIS can be run in the open source Linux environment for development and non-real-time simulation purposes, it is run under Concurrent's RedHawk Real-Time Operating System when hard real-time performance is required. There are five primary functional software components within ARTEMIS: Models, Simulation Infrastructure, Timing, Data Input/Output (UO), and Data Recording. ARTEMIS also contains interfaces with the MAESTRO lab command and control software as well as bdStudio 2, the 2D and 3D visualization pro gram used to render trajectory results during real-time tests in the SIL. Figure 3 shows a bdStudio screen shot of ARTEMIS output from a test run.\nThe following section discusses each of the major software components and some of the driving requirements and design features that differentiate ARTEMIS from other HWIL simulations developed in the past by NASA."}, {"section_title": "Models", "text": "The Models software component contains all of the code necessary to simulate the Ares vehicle and associated avionics components and subsystems. Due to the number and complexity of vehicle system models, ARTEMIS must take advantage of today's relatively inexpensive multi-processor computin g hardware to run an extremely highfidelity simulation in real-time for avionics testing."}, {"section_title": "V", "text": "The Models are divided into three major categories: (1) Core Simulation models, (2) Subsystem Models, and (3) Component Models. The core simulation models consist of rigid body and flexible body dynamics equations of motion as well as the environment models, such as atmosphere, aerodynamics, and gravity, necessary to simulate the external forces, moments, and trajectory of the vehicle. A subsystem model is a digital physics-based model representing the vehicle's physical subsystems that are not typically tested in the laboratory. Examples of subsystem models include the thrust produced by the firing of a reaction control system (RCS) jet, the accelerations, and angular rates sensed by the accelerometers and gyroscopes of the Inertial Navigation System (INS), and the flow of fluids through the Main Propulsion System (MPS) and the engines. A component model is a di gital model that represents the functionality of an actual Ares avionics box. The component models will be used during laboratory build-up prior to development hardware being available, as well as for simulating select faults that cannot be easily exercised in a real avionics box. This must also be capable of commanding ARTEMIS to start at select pre-defined simulation checkpoints, includin g pre-tanking, post-tanking, and inunediately before launch."}, {"section_title": "Simulation Infrastructure", "text": "This software component encompasses the overall simulation infrastructure necessary to run a hard real-time physics-based simulation. It is responsible for commanding the simulation phase (initialization, run, and shutdown) as well as other functions such as input data processing error handling, fault insertion, Monte Carlo dispersion control, and interfacing with the MAESTRO test configuration and control software. This also contains the libraries of code necessary for numerical integration and other mathematical operations needed in a physics-based simulation.\nOne of the key drivers is a requirement to have a single tree of source code that could be used to run in all required ARTEMIS modes of operation. including:\n\u2022 Non-real-time: All digital (desktop environment for developers)\n\u2022 Real-time. multi-processor: All digital (no hardware boxes in the loop)\n\u2022 Real-time, multi-processor: Partial HWIL, partial digital (mix of hardware boxes and component models)\n\u2022 Real-time, multi-processor: Full HNA71L (all avionics components are in the loop)"}, {"section_title": "Timing", "text": "The Timing software component is responsible for maintaining real-time operation and synchronization for the simulation. The Timing component must be capable of calling all ARTEMIS models at the required frequency and maintaining overall control of the simulation loop. It must be capable of running in a real-time mode or a non-realtime mode as specified by the ARTEMIS user. The Timing module is responsible for triggering fault insertions during simulation runs, either through overwriting data input/output variables or throu gh triggering einbedded flags in the models."}, {"section_title": "Data Input/Output (I/0)", "text": "The Data I/O software component must be capable of simulating all data being transferred as part of the Ares I flight architecture. The Ares I will use a wide variety of both digital and analog transmission methods across various components and subsystems. The number of different transmission protocols being used, as well as the density of data being used, makes the I/O requirements for ARTEMIS one of the key design drivers. Examples of digital busses used on the vehicle include MIL-STD-155313, GbE, and various serial interfaces (e.g. EIA./TIA-422-B). In addition, the Data I/O Component is responsible for the transfer of model-to-model simulation data: through shared memory (single box configuration) or reflective memory (distributed configuration)."}, {"section_title": "Data Recording", "text": "The Data Recording software component must be capable of recording all flight avionics bus traffic as well as all simulation model-to-model communications. The Data Recorder must also be capable of providing local data recording to capture internal model variables as needed for initial simulation integration and debugging."}, {"section_title": "IV. Models and Simulation", "text": ""}, {"section_title": "A. Core Simulation Models", "text": "The Core Simulation models include vehicle and fuel slosh dynamics, mass property calculations, atmosphere and winds, vehicle aerodynamics, gravity, and the trajectory."}, {"section_title": "Vehicle Dynamics and Mass Properties", "text": "The mass properties model calculates composite vehicle Mass properties at each integration step of the simulation. The model includes the contribution of the structural mass of each stage as well as time-varying components based on propellant levels and mass in each tank. The mass properties model uses NASA Stress Analysis (NASTRAN) structural output files directly as the input files for the simulation. These files include structural properties for each component of Ares as well as flexible body properties for the integrated stack vehicle.\nThe flexible body dynamics uses the assumed modes method to calculate the bendin g effects of the vehicle3. A 500+ degree of freedom (DOF) model was created for ARTEMIS by reducing a 500,000 DOF model of the integrated stack. Modal frequencies and mode shapes were compared between the two models to ensure the reduction captured the necessary fidelity for simulation purposes.\nThe vehicle flexible body characteristics are calculated using vehicle mode shapes for the integrated stack. The time-varying nature of the mass matrix (and hence the modal mass matrix) of the system allows the modal frequencies to change during the simulation run to match the natural frequencies of the vehicle with a particular level of propellant loading. Figure 4 shows a screen shot from bdStudio of the vehicle flexure-, this display is available for real-time rendering while the simulation is being nun. The propellant slosh model is part of the integrated flexible dynanucs model. The mass, stiffness, and damping elements that represent the major propellant tanks in the vehicle flexible body properties are calculated using a special NASTRAN plug-in (HYDRO) that is designed to model hydrodynamic flow."}, {"section_title": "Atmosphere & Winds", "text": "Two atmosphere models are implemented in ARTEMIS. The first model is the 1976 U.S. Standard Atmosphere model (US76), which uses a table lookup to provide the temperature and pressure, and then calculates the density, speed of sound, and dynamic viscosity. The second atmosphere model is the 2007 version of the Global Reference Atmospheric Model (GRAM2007), which was developed at the Marshall Space Flight Center (MSFC). This model is written in FORTRAN 77 and utilizes a C wrapper to interface with the simulation.\nA separate winds model was added for the reference winds at the Kennedy Space Center to be used in conjunction with the US76 model. GRAM2007 also contains a winds model that provides wind velocity, direction angle, and magnitude in addition to the parameters of the GRAM2007 atmosphere model. A ground winds model has also been implemented for a more accurate representation of the wind environment while the vehicle is sitting on the launch pad."}, {"section_title": "Aerodvnamics", "text": "Three aerodynamics models are currently implemented in the ARTEMIS simulation. The first model, the lumped aerodynamics model, utilizes tables of aerodynamics coefficients indexed by various variables, such as Mach number, altitude, angle of attack, and sideslip. The second aerodynamics model, the distributed aerodynamics model, calculates the aerodynamic forces and moments at each specified node on the vehicle. The distributed aerodynamics model is only used for the stack during the first stage of flight, and all other vehicles use either the lumped aerodynamics model or no aerodynamics model at all. The third aerodynamics model calculates the aerodynamic forces on the vehicle while it is sitting on the launch pad in a similar fashion to the distributed aerodynamics model."}, {"section_title": "Gravity", "text": "The gravity model provides the gravity force and gravity-gradient torque using the vehicle's inertial position and mass properties. The available models are a simple, Keplerian gravity model, a fourth-order gravity model, and the Gravity Recovery and Climate Experiment (GRACE) model s , which is valid up to degree and order 200."}, {"section_title": "Trajectory Calculation Utility", "text": "This code uses the vehicle state vector and the initial launch parameters to calculate various trajectory parameters such as altitude, relative velocity, dynanuc pressure, and angle of attack. These intermediate calculations are used as index variables for look-up tables for properties (such as aerodynamics) as well as being useful for realtime analysis of simulation results."}, {"section_title": "B. Subsystem Models", "text": "The subsystem models represent physical subsystems such as thrusters, engines, actuators, and sensors that will not be physically present in the SIL; these will always be simulated by ARTEMIS using physics-based models. The following sections provide some details on the critical subsystem models that are required for closed-loop flight control for the vehicle."}, {"section_title": "Redundant Inertial Navigation Unit (RINU) and Rate Gyro Assembly (RGA)", "text": "The RINU and RGA models are responsible for simulating the output of Ares I inertial flight sensors. The RINU model is responsible for calculating the full six-degree of freedom translation and attitude solution of the Ares vehicle for use by the Guidance, Navigation, and Control (GN&C) software algorithms. The RIND model includes realistic error models to simulate the imperfect sensing of rotation and acceleration by the RINU's gyroscopes and accelerometers. The RGAs are located at various points on the vehicle and are used only to measure angular rotation. The outputs of these gyroscopes are blended together to help compensate for the effects of vehicle flexure to provide a composite angular rate signal for use by the vehicle control system."}, {"section_title": "Main Propulsion System (MPS)", "text": "The MPS "}, {"section_title": "Thrust Vector Control (TVC)", "text": "The TVC subsystem model is responsible for simulating the actuators and hydraulic control system used to steer the engine nozzle of the vehicle in order to direct the rocket thrust along the desired vector. The TVC model supports four levels of fidelity: an ideal model, a second-order model, a high-fidelity simplex model, and a tallwags-dog model. In the ideal model, the nozzle angular positions are set equal to the commanded angles. In the second-order model, a discrete filter mathematically introduces dynamics into the nozzle's response to the commands while limitin g rates and positions. The high-fidelity simplex model calculates an applied actuator load force using the electrical current commands from the Booster Control and Power Distribution Unit (BCPDU). This load is then output to a nozzle dynamics function, which uses a separate integration job to calculate the nozzle angular rates and position. Additionally, several outputs from the nozzle dynamics model feed back into the TVC model. The tail-wags-dog model fully couples the dynamic motion of the nozzle and the vehicle through constraint and TVC actuator forces. Future work for the TVC model consists of implementing the model provided by the vendor responsible for the TVC system."}, {"section_title": "Engines & Booster Separation Motors (BSMs)", "text": "The engine and BSM models simulate the thrust and mass flow rate for the FS RSRMV and US J-2X engines as well as the three types of BSMs: FS Booster Deceleration Motors (BDMs), FS forward frustum Booster Tumble Motors (BTMs), and US Ullage Separation Motors (USMs). The engine models support both solid and liquid (mono or bi-propellant) configurations. Each engine and BSM model takes in fire conunands, in the case of liquid engines, cut-off commands are also received. The engine models also take in nozzle gimbal angles. These models output a force vector at the engine or BSM node location. For certain configurations, a torque vector and propellant flow rates are provided. Vacuum thrust is determined by a table lookup based on burn time or throttle setting: this value is adjusted to account for atmospheric back pressure. Startup and shutdown tables can be used as well, and a maximum of two tanks can be specified for each engine. For the RSRMV, the roll torque due to propellant swirl is calculated using a separate lookup table. The BSM models calculate thrust in a similar fashion to the engine models. Multiple BSM models use the same lookup table and fire conunand, and one tank may be specified per BSM. The engine and BSM models will be replaced by high-fidelity models provided by the manufacturers."}, {"section_title": "Reaction Control System (RCS)", "text": "The RCS models simulate the thrust and mass flow rate for the First Stage Roll Control System (RoCS) and the Upper Stage Reaction Control System (ReCS) to control the attitude of the vehicle. The RCS models take in the individual thruster valve connnands and return a force vector at the various RCS node locations. The valve dynamics are modeled to use the incoming valve command along with pre-defined timing parameters to throttle the thruster. The timing parameters vary depending on if the thruster bed is cold, around the first 100 ms of operation, or hot. This model also provides propellant flow rates, and the thrusters can be configured to share propellant tanks or have individual tanks. These models will be replaced by higher fidelity subsystem models provided by the selected RCS vendors."}, {"section_title": "C. Component Models", "text": "The component models represent the avionics boxes. These models are designed to be a digital model of flight hardware and are interchangeable with the flight hardware for testing. There are numerous avionics components due to the complexity of the vehicle and the manned flight redundancy requirements. The followin g sections provide details on some of the critical avionics components that are required for closed-loop flight control of the vehicle."}, {"section_title": "L Flight Computer", "text": "The flight computer is responsible for issuing all commands to vehicle subsystems through the components beginning with pre-launch operations. In order to simulate a sample mission, a basic model of the flight computer is needed to allow for a controlled ascent. The ARTEMIS flight computer contains a development version of Ares flight software algorithms that is segmented into the appropriate functional partitions. The partitions include functions such as the mission manager, GN&C, and bus communications. The flight computer bus communications partition contains prototype interfaces for MIL-STD-15.5 3B connnunication to the BCPDU and GUE communication to the Orion emulator."}, {"section_title": "Command and Telemetry Computer (CTC)", "text": "The CTC model provides the interface between the fli ght computers and the ground; camera controllers, and data recording systems. ARTEMIS will transform the data into the appropriate message format before passing it to the rest of the avionics system."}, {"section_title": "RINUElectronics", "text": "The RINU electronics component model simulates the RINU firmware and software that is responsible for calculating vehicle position and attitude from the gyroscope and accelerometer measurements. While the RINU subsystem model is responsible for adding realistic errors to account for sensor imperfections, the RINU electronics component model simulates all functions provided by the RINU hardware, software, and firmware including communications on the fli ght avionics busses."}, {"section_title": "Combined Control System Electronics (CCSE)", "text": "The CCSE model is responsible for commanding the Upper Stage MPS and ReCS subsystems. The CCSE receives commands from the flight computer and sets voltages in an output structure, simulating the output lines of the flight GCSE. These voltages and commands drive the solenoids and pumps of the MPS. The GCSE model also contains the functions that provide the interface between the flight computer and the US ReCS by sending commands to the thruster valves. The CCSE model is also responsible for relayin g sensor data from the MPS and ReCS to the flight computer. "}, {"section_title": "Upper Stage Engine Control Unit (USECU)", "text": "The USECU is used to control the J-2X engine to produce the desired vehicle thrust based on the commands from the flight computer."}, {"section_title": "TVC Electronics (TVCE)", "text": "The TVCE component model represents the electronics used to connnand the TVC actuators. The TVCE model reflects both hardware and software used to produce the actual TVC actuator commands based on what is commanded by the flight computer."}, {"section_title": "Booster Control and Power Distribution Unit (BCPDU)", "text": "The BCPDU model perfornis both remote terminal and bus controller functions. The model receives data from the fli ght computers and relays it to the appropriate avionics components on the First Stage. The BCPDU model contains the prototype MIL-STD-1553B interface to the flight computer, which sends the data message containing conunanded current for the TVC command. The message is then decoded into engineerin g units in the BCPDU for use by the simulated TVC system. The BCPDU is also responsible for distributing the correct amount of power to the First Stage avionics boxes.\nIn addition to the flight control critical models discussed above, the vehicle also contains a wide variety of other component models located on "}, {"section_title": "D. Emulator Models", "text": "ARTEMIS contains low-fidelity emulators of both the Launch Control Center (LCC) GroundOps and Orion CEV systems that will both be replaced by emulators from KSC and JSC, respectively. The GroundOps emulator contains an initial tankin g model for the LH, and O, tanks. It also has built-in checkpoint start capability that allows the user to start the simulation from four different starting times: Tanks Empty, Tanks Full, Terminal Count, and Launch. An initial model of all of the umbilical interfaces has also been created and tested.\nThe current Orion emulator contains a model of the Orion flight software, which allows the Ares simulation to respond to abort connnands and nominal flight staging events. A prototype GbE interface has been developed in the Orion emulator to coimnunicate with the Ares flight computer over a flight-like bus."}, {"section_title": "V. Distributed Real-Time Simulation", "text": ""}, {"section_title": "A. Timing", "text": "The core element for the timing of ARTEMIS is the synchronization (Sync) functionality. The Sync program synchronizes the execution of the simulation executables based on the user input frame time to an external clock source --such as Inter Range Instrumentation Group designation B' (IRIG-B) or Concurrent's Real-Time Clock & Interrupt Module (RCIM). It also coordinates the data transfer to and from the shared memory region (or reflective memory when run as a distributed system) to ensure data coherency and interfaces with the MAESTRO software during a SIL test to pass connnands from the test engineer to ARTEMIS. In addition, Sync is responsible for inserting faults by writing over data in the shared/reflective memory region when prompted by either a user command or a pre-defined condition. Lastly, Sync sets all of the real-time parameters including locking memory, real-time priority, and running specific processes on different processors and different computers.\nFault insertion is triggered by a user or pre-defined condition and carried out by Sync in one of two ways. The first way is to write over a specific variable in the shared/reflective memory region, which limits the variables that can be faulted. A wider range of faults can be injected using the second method, which requires additional functionality so that a flag specifies a fault or set of faults embedded in the model.\nAll of the simulation data that is needed for simulation-to-simulation corninunication is transferred through shared or reflective memory. Reflective memory is used in a distributed simulation: however, development tests can run on a single machine using local shared memory. At the beginning of each software frame. the Sync process copies in all of the data from the shared/reflective memory region to each executable's local memory. Once all processes have completed the computational cycle, Sync allows each process to copy output data back to a specific region of shared or reflective memory that is reserved specifically for that model. The simulation data needed to communicate between the various emulators in the SIL will also use reflective memory to transfer data that is not on one of the flight busses.\nTo achieve real-time performance, the ARTEMIS executables must be distributed across many processors within multiple computers (Simnodes), which allows for higher-fidelity, computationally intensive models to be used. The models communicate via hardware and software interfaces as described above. This allows each model to have a separate executable, which is valuable for HWIL scenarios. Each model starts independently; however, ARTEMIS utilizes a multi-phased initialization because some models depend on information from others. After each phase of the initialization, all of the interface data is copied to shared memory.\nIn addition to moving executables from one node to another, a single executable may be threaded across multiple processors on a single Sinmode to reduce the impact of computationally robust models. For a robust model, threading one executable may be better than separating the computation into multiple executables. Threading allows all independent sections of a model to be completed in parallel using data from a single frame, while splitting the model into multiple executables would create frame lags. Additionally ; more data would likely need to be passed through the shared ,reflective memory region in the multiple executable cases because threads share local memory. Currently, the flexible body dynamics model is the most computationally intensive model and requires the highest level of threading. Real-time performance cannot be achieved without threading the individual jobs of the flexible body calculations. Although the threaded jobs must be independent from one another, it is very important to understand the dependencies on the previous and following jobs. Understanding these dependencies is the key to correctly threading jobs in a model.\nThe grouping of executables on the Simnodes allows the Simnodes to be included or excluded for various HWIL test configurations. The model executables are physically distributed in close proximity to the flight hardware units in the SIL so that a model may be substituted for the avionics hardware during any test. For example, Sinmode 1 could contain the simulated flight software, but when actual flight computers are being tested, Simnode 1 would not be used in the test to simulate flight software. In addition ; ARTEMIS contains a data recording executable that is required to record all avionics bus traffic, simulation-to-simulation data, and local model data. Local model data recording can also be turned off during a run if necessary.\nThe test confi guration, provided by the MAESTRO user ; dictates the Simnodes that are used and the hardware or software being tested. Currently ; five Simnodes are necessary to achieve real-time performance. One Sin-mode is designated as the master node and the other four are the slave nodes. The relationship between the nodes is shown in Fi gure 6. The current hardware architecture for ARTEMIS includes 64-bit multi-core computing nodes, with the number of cores ranging from 8-16 depending on the required functionality of the box. As discussed previously, the real-time configuration uses Concurrent's RedHawk operating system on all computing nodes. [SimThread] Figure 6 . Multiple node distributed configuration B. Data Recording Since ARTEMIS will be used for hardware-in-the-loop testing, it must support all of the Ares hardware interfaces for communications (MIL-STD-1553B, GbE, and EIA/TIA-422-B), power, analogs, and discretes, as well as simulation data interfaces between ARTEMIS and the emulators from other NASA centers. ARTEMIS must also simulate any of the hardware interfaces when digital models are used in place of fli ght hardware for a test."}, {"section_title": "Master", "text": "The majority of the interfaces that are needed in ARTEMIS are for Ares I communications. A custom piece of software has been developed in conjunction with ARTEMIS to handle all of the I/O for these interfaces. This software, the I/O Layer, provides a common set of functions to call from within a component or subsystem model that will initialize the communication device, read or write data in the appropriate format, and close the device. Based on an XML input file, the VO Layer configures each device and the node where it is installed. The I/O Layer input file also contains a field that tells the simulation if it is running with a simulated device (e.g. no flight-like hardware for that particular interface) so the I/O Layer will then write the data to either shared or reflective memory depending on the test config^uation. ARTEMIS is not currently set up to handle the power, analog, or discrete interfaces, but those will become a major focus in the future as each interface is further defined."}, {"section_title": "C. Data I/O", "text": "As previously discussed, the data recorder must be capable of capturing all fli ght avionics I,/O communications as well as simulation model-to-model data transfer. The data recorder must also be capable of capturing local model internal variables. Since complete tests of the Ares avionics system can run from pre-tanking through post Orion separation, the simulation must be capable of capturing hi gh-rate data for over 80 hours of testing. A variety of potential hardware options (including solid state drives) are being evaluated than can hold the required amounts of data and transfer it in real-time to support these long duration tests.\nVI. Conclusion ARTEMIS has been developed to support Ares I HWIL test requirements and has been designed to be as modular as possible to support all required test configurations including the SIL, SITE SDF, and Ares Emulators. ARTEMIS takes advantage of modern computing power to provide an extremely realistic dynamics and subsystem simulation capability that is a significant improvement in fidelity compared to previous launch vehicle test facilities. ARTEMIS also provides hard real-time determinism and supports the high-density 1/0 operations required to support Ares I avionics test.\nARTEMIS will be used in the coming years to integrate and test the Ares avionics systems. High-fidelity component models will be provided by the avionics box vendors and will be integrated into ARTEMIS over the next 6 months. Engineering Development Units for the avionics hardware will arrive in 2010 and will be integrated into the laboratories to provide initial test and check-out capabilities. As part of the overall SIL certification effort prior to the commencement of formal testing, ARTEMIS must undergo a significant verification and validation effort. ARTEMIS subsystem and component models will be compared against test results from the actual systems as well as the subject matter expert's critical math model representations for those systems. The flight dynamics and environment models will be compared against independent dynamics simulations used on other parts of the Ares project. The integrated simulation will be validated throu gh comparisons against fli ght test data for unmanned flight tests. Until flight test data is available, ARTEMIS will compare results against other integrated simulations used on the Ares program as well as test data from other major ground-based test activities such as the Inte grated System Test Assembly ground testing and Ares Ground Vibration Testing. ARTEMIS has been designed to be modular and easily upgraded as the computational power of simulation nodes continues to increase. ARTEMIS can be easily adapted to simulate other launch vehicles and extended to support future missions such as Ares V integration and test to support lunar mission development."}]