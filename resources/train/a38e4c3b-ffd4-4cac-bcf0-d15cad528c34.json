[{"section_title": "Abstract", "text": "We show that finding a graph realization with the minimum Randi\u0107 index for a given degree sequence is solvable in polynomial time by formulating the problem as a minimum weight perfect b-matching problem. However, the realization found via this reduction is not guaranteed to be connected. Approximating the minimum weight b-matching problem subject to a connectivity constraint is shown to be NP-Hard. For instances in which the optimal solution to the minimum Randi\u0107 index problem is not connected, we describe a heuristic to connect the graph using pairwise edge exchanges that preserves the degree sequence. In our computational experiments, the heuristic performs well and the Randi\u0107 index of the realization after our heuristic is within 3% of the unconstrained optimal value on average. Although we focus on minimizing the Randi\u0107 index, our results extend to maximizing the Randi\u0107 index as well. Applications of the Randi\u0107 index to synchronization of neuronal networks controlling respiration in mammals and to normalizing cortical thickness networks in diagnosing individuals with dementia are provided."}, {"section_title": "Notation and Definitions", "text": "We assume the reader to have a knowledge of graph theory (see, e.g., [31] ). We let R and Z denote the set of real numbers and integers, respectively. We consider an undirected graph, G = (N, E), which consists of nodes, N , and edges, E. We assume that our graph is simple, i.e., there are no self-loops and no multiedges. The degree of a node is defined as di(G) := |{j : (i, j) \u2208 E}|. We denote the node-node adjacency matrix by A(G). The degree sequence is the list of the degrees of all the nodes in a graph, which we represent as d(G) = (d1(G), d2(G), ..., dn(G)). A sequence of non-negative integers is considered graphic if it is the degree sequence of a graph. Degree sequences can correspond to more than one adjacency matrix or graph. We call these graphs different realizations of the degree sequence. When the particular graph is clear from context, we omit G in the previous definitions.\nLet nodes u, v \u2208 N . We say that u and v are connected if there exists a path from u to v. A graph is connected if for all u \u2208 N there exists a path to every other node. Definition 1.1. The Randi\u0107 index of a graph G = (N, E) is defined as\nwhere \u03b1 \u2208 R \u2212 {0}.\nWe consider the case when \u03b1 = 1 which has received considerable attention in a variety of contexts [11, 21, 2] . For convenience, we define R(G) = R1(G). A natural optimization problem is:\nMinimum Randi\u0107 Index Problem. Given a graphic degree sequence what is a graph realization with the minimum Randi\u0107 index with \u03b1 = 1?\nWe define the connected minimum Randi\u0107 index problem as the minimum Randi\u0107 index problem with the additional constraint of minimizing over all connected realizations. Definition 1.2. For a graph G = (N, E) and a positive integer vector b = (b1, \u00b7 \u00b7 \u00b7 , bn) \u2208 Z n , a perfect b-matching is a subset of edges M \u2286 E such that for node vi \u2208 N , the degree of vi in the graph (N, M ) is bi."}, {"section_title": "An associated optimization problem is:", "text": "Minimum Weight Perfect b-Matching Problem. Given a positive integer vector b, a graph G = (N, E) and a set of edge weights w : E \u2192 R, find a perfect b-matching with minimum weight.\nIn section 3, we will see that the minimum Randi\u0107 index problem is equivalent to the minimum weight perfect b-matching problem on a complete graph G with an appropriate choice of weights. We will also show that, using an arbitrary graph G, by constraining the minimum weight perfect b-matching problem to connected perfect b-matchings, the problem becomes NP-Hard."}, {"section_title": "Network Measures of Assortativity", "text": "The Randi\u0107 index of a graph was originally defined in chemistry. In 1975, the chemist Milan Randi\u0107 [24] proposed the index R\u03b1(N ) for the cases \u03b1 = \u22121 and \u03b1 = \u22121/2 under the name branching index. He explained the utility of R in measuring the extent of branching of the carbon-atom skeleton of saturated hydrocarbons. His approach \"reveals some inherent relationships between [structures] which can be traced to connectivity\" [24] . It is sometimes referred to as the connectivity index by scholars in chemistry [13] . Bollob\u00e1s and Erd\u00f6s [4] generalized this index by allowing \u03b1 to take on any non-zero real number. A survey of results for the Randi\u0107 index can be found in [22] .\nThe Randi\u0107 index with \u03b1 = 1 is important enough to have been \"discovered\" several times in the literature. For example, the second Zagreb index, defined by Gutman [11] and also used in chemistry, is actually R(G). In 2005, Li et al. [21] investigated what they called the s-metric of a graph which, seemingly unknown to them, is actually R(G). They used R(G) to differentiate between graph realizations of a given degree sequence following a power law distribution [21] in the design of internet router networks. For a fixed degree distribution they plotted R(G) versus throughput for hundreds of graph realizations. They noted that R(G) measures the \"hub-like core\" of a graph and is maximized when high-degree nodes are connected to other high degree nodes (assortative). Conversely, the minimum values of R(G) were predominantly associated with networks that maximized throughput and were dissassortative. In 2008, Beichl and Cloteaux investigated how well random networks generated with a chosen R(G) can model the structure of real networks such as the Internet. The graphs produced by optimizing R(G) resulted in better models than the ones that used simple uniform sampling [2] ."}, {"section_title": "Random Graph Classes", "text": "Our computational experiments require random graphs. We make use of three types of graphs: Erd\u0151s-R\u00e9nyi, geometric and scale-free. The structure of these graphs depends on the parameters chosen.\nErd\u0151s-R\u00e9nyi Graphs. A number of nodes n and a probability of connection p are chosen. A uniform random number on the interval [0, 1] is generated for each possible edge. If the number generated for an edge is less than p then the edge is added.\nGeometric Graphs. A number of nodes n and a radius r is chosen. Each node vi is placed uniformly at random in the unit square, giving coordinates (xi, yi). We connect nodes vi and vj if (xi\u2212xj) 2 +(yi\u2212yj) 2 \u2264 r 2 [29] .\nScale-Free Graphs. A preferential attachment algorithm is used to create graphs whose degree sequences follow a power-law distribution. Following the convention in the literature we will refer to these graphs as \"scale-free\". A number of nodes n is chosen. New nodes are added and connected to existing nodes, based on a probability proportional to the current degree of the nodes, until you reach n nodes, making it more likely that a new node will be connected to a higher degree node [29] . The algorithm allows a minimum node degree to be specified."}, {"section_title": "Formulation and Complexity", "text": "In this section, we formulate the minimum Randi\u0107 index problem as a minimum weight perfect b-matching problem, which is solvable in polynomial time [27] . Note that this problem does not enforce connectivity. We then show that approximating the minimum Randi\u0107 index problem with connectivity is NP-Hard."}, {"section_title": "The b-Matching Problem", "text": "Consider a graph G = (N, E), a positive integer vector b = (b1, \u00b7 \u00b7 \u00b7 , bn) \u2208 Z n and M \u2286 E, a perfect b-matching. For a given b-matching, M , the graph induced by M is (N, M ). We denote the set of perfect b-matchings of a graph G by P b (G). For edge weights w : E \u2192 R, the minimum weight perfect b-matching problem is finding the perfect b-matching with minimum weight, i.e., to calculate\nFor example, let G be the undirected, weighted graph below 1 and let b = (2, 1, 1, 2) for nodes v1, v2, v3 and v4 respectively. We select bi edges that will connect to the ith node and that will produce the minimum weight. Therefore, the matching induces the graph G below. Note that for this example the solution G is the only perfect b-matching for G. Let an instance of the minimum Randi\u0107 index problem be given with a positive integer vector b \u2208 Z n and graph G = (N, E). Then the graphs induced by the matchings are feasible subgraph realizations for the minimum Randi\u0107 index problem. Also, the edge sets of the feasible subgraph realizations of the minimum Randi\u0107 index problem are perfect b-matchings. Thus, the set of feasible b-matchings on G is identical to the set of feasible subgraph realizations on G to the minimum Randi\u0107 index problem on G. Thus, to formulate an instance of minimum Randi\u0107 index problem as a minimum weight perfect b-matching problem, set\nTherefore, we can create an instance of a minimum weight perfect b-matching to solve the minimum Randi\u0107 index problem. Since the b-matching problem can be solved in polynomial time, finding the minimum Randi\u0107 index of a graph can also be done in polynomial time. Note that this method does not enforce connectivity. We show that even approximating the connected minimum Randi\u0107 index problem is NP-Hard. We first define approximation algorithms (see [30] for further details about approximation algorithms). Let S \u2282 R n and f : S \u2192 R be a given feasibility set and objective function, respectively. Define an \u03b1-approximation algorithm for the minimization problem v * = minx\u2208S f (x) as a polynomial time algorithm that finds a solution y \u2208 S with f (y) \u2264 \u03b1v * . We say that we can approximate a minimization problem if there exists an \u03b1 such that an \u03b1-approximation algorithm exists. Note that \u03b1 \u2265 1 is implicit with \u03b1 = 1 only if an exact algorithm exists. Theorem 2.1. Approximating the minimum Randi\u0107 index subject to a connectivity constraint is NPHard.\nProof. Recall that a Hamiltonian cycle on G is a tour (set of adjacent edges or, equivalently, nodes in G) that visits each node exactly once, except for the start node which is equal to the last node on the tour. We claim the existance of a Hamiltonian cycle on a given graph is equivalent to the feasibility of the minimum Randi\u0107 index with connectivity on a related instance. Recall that an instance of Hamiltonian cycle consists of a graph, so let such an instance be given with G = (N, E). Now define the vector b \u2208 R |N | by setting bi = 2 for i \u2208 {1, . . . , |N |} and consider the resulting connected minimum Randi\u0107 index instance using the graph G and vector b.\nWe first show that if the minimum Randi\u0107 index instance (G, b) is feasible, then there is a Hamiltonian cycle on G. Suppose there is a feasible solution H = (N, F ), which means F \u2286 E, each node u \u2208 N has degree 2, and H is connected. As each node has even degree and H is connected, there is an Eulerian cycle, T , on H. We claim that T is a Hamiltonian cycle on G, which means each node is visited exactly once by T except the start node which is visited exactly twice. Choose u \u2208 N and note that two edges are adjacent to u. Then, because T traverses every arc, the node u is visited. Denote the start node of T by s \u2208 N and consider traversing T beginning at s. If the traversal visits a node u \u2208 N \\ {s} more then once then an edge was traversed into u, a second distinct edge was traversed out of u, and a third distinct edge was traversed into u, a contradiction as there are exactly two distinct edges adjacent to u in H. The same argument applies if s is visited more then once before the traversal is complete. So each node is visited exactly once by T except the start node, which is returned to when the traversal is complete, i.e., T is a Hamiltonian cycle. Thus, if the instance (G, b) is feasible, then G possess a Hamiltonian cycle.\nWe now show that if there is a Hamiltonian cycle on G, then the minimum Randi\u0107 index problem on (G, b) is feasible. Consider a Hamiltonian cycle, C on G and the subgraph induced by C. Such a subgraph is connected as each node is visited. Also, each node has degree 2 as each node u \u2208 N has one arc used to enter u and exactly one distinct arc u to exit. Thus, if G possess a Hamiltonian cycle, then (G, b) must be feasible to the given connected minimum Randi\u0107 index instance. Now suppose there were an \u03b1-approximation algorithm to the connected minimum Randi\u0107 index problem for some \u03b1 \u2265 Because the proof showed that finding a feasible solution to the minimum Randi\u0107 index index is NP-Hard, we immediately can state the following corollary. "}, {"section_title": "Example Transformation", "text": "Given the degree sequence d = (3, 2, 2, 2, 2, 1), what is a graph realization with the minimum Randi\u0107 index? We let nodes v1, v2, v3, v4, v5, v6 \u2208 N with b = (3, 2, 2, 2, 2, 1). Now we can form the complete graph G, with weights corresponding to bi \u00b7 bj for every node vi, vj \u2208 N . G is a solution for the minimum weight perfect b-matching. The sum of the weights is the minimum Randi\u0107 index and the unweighted adjacency matrix is the corresponding graph realization. Note that there are other solutions to the matching that will produce the minimum Randi\u0107 index and a different realization. That is, the solution is not unique."}, {"section_title": "Algorithms", "text": "Our primary goal is to devise an algorithm to solve the minimum Randi\u0107 index problem. An algorithm that is useful when creating graphs with a specified degree sequence is the Havel-Hakimi algorithm. The Havel-Hakimi algorithm can be used to check if a degree sequence is graphic and to find a realization of that sequence."}, {"section_title": "Havel-Hakimi Algorithm", "text": "The Havel-Hakimi algorithm is useful when we have a non-negative integer sequence and we want to know if it is graphic, and if so, what is a realization of the sequence. Its algorithm is given below:\nHavel-Hakimi [14, 12] Inputs: d, a non-negative integer sequence\nOutputs: A, adjacency matrix of a graph realization of d (if graphic)\nInitialize a |d| \u00d7 |d| adjacency matrix A so that Aij = Aji = 0. while d is not the 0 sequence do Pick a random index i of d. Subtract 1 from the di nodes with largest degrees (not including di) and set di to 0. For the di nodes of largest degrees in the previous step (call them vj), set"}, {"section_title": "Two-Switches and the Metagraph", "text": "One way to generate a collection of realizations for a degree sequence is to move from one realization to another by doing a two-switch, with an example as follows: When doing a two-switch, we examine two edges, (a, b), (c, d) \u2208 E. If (a, d) / \u2208 E and (b, c) / \u2208 E then we can remove edges (a, b) and (c, d) and create edges (a, d) and (b, c). This is not a unique move, since we could also use (a, c) and (b, d) if (a, c) / \u2208 E and (b, d) / \u2208 E. Two-switching is an easy way to obtain a different graph with the same degree sequence after a graph is created using the Havel-Hakimi algorithm. The two-switch pseudocode is given below:"}, {"section_title": "Two-Switch", "text": "Inputs: G, a graph with degree sequence d.\nOutputs: G , a new graph with degree sequence d.\nWe can construct a metagraph of a degree sequence, where the metagraph is an undirected graph with each node representing a graph realization of a degree sequence and each edge representing a two-switch.\nThe following theorem shows that the metagraph is always a connected graph. "}, {"section_title": "Heuristic for Disconnected Realizations", "text": "Since finding a connected graph realization with minimum Randi\u0107 index is NP-Hard, we present a heuristic using two-switches to connect disconnected realizations. The heuristic sequentially performs a two-switch between pairs of connected components until all the components are connected:\nTwo-switch Heuristic Inputs: G, a disconnected graph with degree sequence d Outputs: G , a connected graph with degree sequence d\nwhile the number of connected components in G is \u2265 2 do a two switch with two components to connect them using two randomly chosen edges from each component return G Note that the method to connect the disconnected realizations may not produce graphs with the best structure since there is only 1 edge connecting one component to another. Also note that we do not need to check whether the randomly chosen edges are adjacent or not since they are in separate connected components."}, {"section_title": "Solving the Minimum Randi\u0107 index Problem", "text": "In this section, we focus on the case where the input graph G is the complete graph. To solve the minimum Randi\u0107 index problem we used code that solves a minimum weight perfect b-matching problem. The code used is for generalized matching problems and was written by Vlad Schogolev, Bert Huang, and Stuart Andrews. Their code uses the GOBLIN graph library (http://goblin2.sourceforge.net/). Huang's paper on loopy belief propagation for bipartite maximum weight b-matching uses this code [18] . The code solves a maximum weight perfect b-matching problem given the weight matrix, b vector and the exact solution algorithm choice. After transforming our minimum Randi\u0107 index problem instance into a minimum weight perfect b-matching instance, the b vector will correspond to the degree constraints and the weight matrix to the possible degree products (see Section 2.2). However, since the code solves the maximum matching we transform our problem so that solving for the maximum yields the solution for the minimum.\nGiven a weight matrix H we transform these weights into a matrix H2 such that the maximum matching using H2 will yield the same solution as the minimum matching using H. To do this we take a matrix M with 1s in all positions except for the diagonal which has 0s. We then multiply every entry by one more than the maximum entry of H. H is then subtracted from M yielding H2. The following pseudocode implements this algorithm and will solve the minimum Randi\u0107 index problem for a given degree sequence: This algorithm returns the minimum Randi\u0107 index of a graph and a realization. We know that the bmatching code runs in polynomial time ( [27] ). It is easy to see that the transformation steps are done in polynomial time as well. We used three types of randomly generated graphs to test the algorithm performance: Erd\u0151s-R\u00e9nyi, geometric and scale-free. We limited our computational experiments to degree sequences for which connected realizations were known to exist. The Randi\u0107 index before and after the optimization was recorded. After the optimization we check if the graph realization with the minimum Randi\u0107 index is connected. We generated graphs with 25, 50 and 100 nodes. In addition, 100 of each graph type and size were generated. Tables 1, 2 and 3 present results from the runs. Note that the number of graphs connected after the run plus the number of graphs disconnected plus the number of graphs with no connected realizations is 100 for each graph type.\nThe MATLAB functions used to generate the geometric and scale-free graphs are from CONTEST: A Controllable Test Matrix Toolbox for MATLAB [29] . In addition, the necessary and sufficient conditions for a non-negative integer sequence Table 3 : 100 node graphs {ai} to be realizable as the degrees of the nodes of a connected graph are that ai = 0 for all i and the sum of the integers ai is even and not less than 2(n \u2212 1). This condition was used to discard graphs with a degree sequence that had no connected realizations [5] .\nIn general from our runs, the realization of the minimum Randi\u0107 index was connected. There are minimum Randi\u0107 index graph realizations that are disconnected and we do not know if there are other realizations with this Randi\u0107 index that are connected since the b-matching solver only produces one solution. But there were often a large proportion of graphs that had no connected realization at all. This largely depends on parameters chosen for the randomly generated graphs. If the random graph produced has most nodes with large degrees then it is unlikely that any graph realization would be disconnected. We were interested in generating graphs that have both connected and disconnected realizations and investigating whether the realization generated with the minimum Randi\u0107 index was connected or not.\nThe following parameters were chosen after extensive experimentation so that the number of instances with no connected realizations was small. For the Erd\u0151s-R\u00e9nyi graphs we used an average degree per node of 4.25. The corresponding p values used were calculated using p ="}, {"section_title": "n", "text": "where n is the number of nodes in the graph. Thus p = .17 for n = 25, p = .085 for n = 50, and p = .043 for n = 100. For the geometric graphs we used an average degree per node of 6. The radii were calculated using r = 6 \u03c0n . Our corresponding radii were r = .276 for n = 25, r = .195 for n = 50, and r = .138 for n = 100. We used scale-free graphs with a minimum node degree of 2.\nThe left box plots for each of 25, 50 and 100 node graphs in Figures 1, 2 and 3 show the percent difference between the graph's original Randi\u0107 index and the minimum Randi\u0107 index. The percent difference is calculated from original\u2212minimum minimum \u00d7 100. The right box plots for each of 25, 50 and 100 node graphs in Figures 1, 2, and 3 show the percent difference between the minimum Randi\u0107 index and the Randi\u0107 index after the heuristic algorithm in Section 3.3 was applied. This percent difference is calculated with af ter heuristic\u2212minimum minimum \u00d7100. The number of graphs that used the heuristic depended on the number of optimal graph realizations that were disconnected. Note that this is a different number for each graph type and size. See Tables 1, 2 "}, {"section_title": "Applications", "text": "We will now show results for two applications where the effects of network connectivity measures have shown or are hypothesized to play an important role: neuronal synchronization and dementia."}, {"section_title": "Neuronal synchronization", "text": "The first example is exploring the effect of assortativity on the synchronous firing of neurons in the preB\u00f6tzinger complex. This collection of neurons is responsible for the control of respiration in mammals [6] . As neuronal networks are inherently directed, we must first define a directed Randi\u0107 index [33] and extend the b-matching algorithm to the directed case. The extension is similar to [23] in which the maximum matching problem is extended to directed graphs for a network controllability problem."}, {"section_title": "Extension to directed networks", "text": "Consider the directed graph G = (N, E) with vertex set N = {v1, . . . , vn} and edge (or arc) set E = {(vi, vj) | vi \u2192 vj}. The degree sequence for G is a non-negative integer-pair sequence\n. . , n}, where we denote the out-degree and in-degree sequences by d + and d \u2212 , respectively. There are four different Randi\u0107 index-type measures [33] given by\nwhere p, q \u2208 {\u2212, +}. This can be seen as a natural extension of R(G) to the directed case. In this context, we will now define an extension of perfect b-matching as follows. \nof edges M \u2286 E such that for node vi \u2208 N , the out and in-degree of vi in the subgraph (N, M ) is b\nIn an analogous way as the undirected case, we can define a minimum weight perfect b-matching problem as follows.\nMinimum Weight Perfect b-Matching Problem. Given a positive integer-pair sequence b, a directed graph G = (N, E) and a set of edge weights w : E \u2192 R, find a perfect b-matching with minimum weight.\nIn order to use the existing algorithm for undirected graphs, we consider the equivalent bipartite form of G given by G * = (N * , E * ), where . Thus, to find a minimum weight perfect b-matching for a directed graph G, we do the following (see Figure 5 ):\n\u2022 Let B be the complete bipartite graph Kn,n minus the edges {(v\n\u2022 For p, q \u2208 {+, \u2212}, let edge weights wij = d "}, {"section_title": "Neuronal networks", "text": "Using NeuronetExperimenter [15] , we simulated 150 rhythmogenic neurons in the preB\u00f6tzinger complex using the Rubin-Hayes neuron model [25] (http://senselab.med.yale.edu/modeldb/ShowModel.asp? model=125649).\nIt is unknown what degree distribution and network connectivity arise in neuronal networks. However, it seems reasonable to expect that neurons closer to each other are more likely to be connected. Hence, we have chosen to model these networks with 3D geometric (directed) graphs. Raster plots of simulation results for two 3D geometric networks are displayed in in (3). These results display an overall tendency for the realization with minimum and maximum Randi\u0107 index, regardless of type, to lead to a faster and slower breathing rhythm, respectively. This is not always the case, however, as can be seen with R + \u2212 in Figure 7 . There is also a tendency for more and less synchronous firing from realizations with respective minimum and maximum Randi\u0107 index. These results warrant a more thorough quantitative analysis, which is beyond the scope of this work. "}, {"section_title": "Normalizing the Randi\u0107 index index in cortical thickness networks", "text": "Recently, researchers have begun using graph measures of connectivity to investigate the difference between structural magnetic resonance images taken from healthy individuals and individuals diagnosed with dementia (for example, [1, 32, 17, 16] ). Networks in these studies are formed by calculating correlations between the cortical thicknesses of different brain regions, a technique based on the correlation between cortical thicknesss loss and dementia [8, 10] . This method of network creation has been speculated to provide more insight on the functional relationships between brain regions [9] . Details of how the networks are formed can be found in [16, 28] and we present one such method below. After networks for each subject population (e.g., normal, subjects with dementia) are formed, network measures (e.g., Randi\u0107 index) are calculated and evaluated for significance.\nA particular challenge to using comparisons between the network measures is complicated by the varying number of edges in each of the networks. In particular, some kind of normalization is required for some of the measures used. In order to normalize, we propose the following scheme: Figure 7 : Setup same as in Figure 6 for a different 3D geometric network. We use data from the Alzheimer's Disease Neuroimaging Initiative (ADNI) and further analyzed by FreeSurfer, a technique developed by Fischl and Dale [7] to measure cortical thicknesses. When applied to the ADNI data, Fischl and Dale discretized the cortical layer into 68 different regions. Soldan, et al. [28] used the following steps to generate networks:\n1. Subset the population into categories based on whether they were diagnosed as normal (NORMAL), diagnosed with mild cognitive impairment for three or more years without disease progression (MCI), diagnosed with mild cognitive impairment and then progressed to Alzheimer's Disease within three years (MCIAD), or diagnosed with Alzheimer's Disease. Table 4 : Original, maximum, and normalized Randi\u0107 index. CT and absolute correlation weighting used with Pierson's correlations.\n(b) Use the absolute value of the correlation coefficients as the edge weight.\n(c) Use the product of the normalized cortical thicknesses (i.e., the cortical thicknesses divided by the maximimum) between the two regions connected by the significant edge. (d) Use both 5b and 5c.\nGiven the four diagnostic categories, the two possibilities in step 3, and the four possibilities in step 5, there are a total of 8 different networks. After calculating the associated degree distributions, we calculated the maximium Randi\u0107 index. As an example, we display the results for one network in Table  4 . The results for all eight networks can be seen in Appendix A By normalizing the Randi\u0107 index, comparisons between the groups can more accurately determine whether the assortativity was due to the actual network topology versus other features, such as the total number of edges. Currently, studies instead arbitrarily delete edges in networks, which effectively ignore different brain regions in order to compare non-normalized graph measures [32, 17, 16] . Normalizing by dividing out by the optimized metric allows for comparisons without ignoring network features. To actually use the optimization in such a statistical study, we note that significance testing (e.g., permutation testing to determine whether the comparisons are valid) would be required."}, {"section_title": "Conclusions and Future Work", "text": "We have shown that the minimum Randi\u0107 index problem can be solved in polynomial time. With use of available b-matching code we have developed an algorithm that produces a graph realization with the minimum Randi\u0107 index for a given degree sequence. Not all optimal solutions are connected. A twoswitch heuristic was developed to connect disconnected optimal solutions. Although the graph structure of these new connected graphs is fragile, the Randi\u0107 index changed relatively little.\nFrom our experiments, when generating Erd\u0151s-R\u00e9nyi, geometric and scale-free graphs, the realization with the minimum Randi\u0107 index is generally connected. Undoubtably, this result is influenced by the parameters chosen for the randomly generated graphs, but many graphs that will have a disconnected minimum Randi\u0107 index realization have no connected realizations at all.\nThere are a number of future topics to explore. We want to develop a better way to connect graphs using the two-switch heuristic so that the structure of the graph is less fragile. Further experiments with the parameters of randomly generated graphs are needed to understand the conditions under which the number of graphs that are disconnected or have no connected realizations changes. We also are interested in determining the complexity of the connected Randi\u0107 index problem when the input graph is not the complete graph. "}, {"section_title": "Group", "text": ""}]