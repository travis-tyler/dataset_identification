[{"section_title": "Abstract", "text": "Early identification of individuals at risk of developing Alzheimer's disease (AD) dementia is important for developing disease-modifying therapies. In this study, given multimodal AD markers and clinical diagnosis of an individual from one or more timepoints, we seek to predict the clinical diagnosis, cognition and ventricular volume of the individual for every month (indefinitely) into the future. We proposed a recurrent neural network (RNN) model and applied it to data from The Alzheimer's Disease Prediction Of Longitudinal Evolution (TADPOLE) challenge, comprising longitudinal data of 1677 participants (Marinescu et al. 2018) from the Alzheimer's Disease Neuroimaging Initiative (ADNI). We compared the performance of the RNN model and three baseline algorithms up to 6 years into the future.\nMost previous work on predicting AD progression ignore the issue of missing data, which is a prevalent issue in longitudinal data. Here, we explored three different strategies to handle missing data. Two of the strategies treated the missing data as a \"preprocessing\" issue, by imputing the missing data using the previous timepoint (\"forward filling\") or linear interpolation (\"linear filling). The third strategy utilized the RNN model itself to fill in the missing data both during training and testing (\"model filling\"). Our analyses suggest that the RNN with \"model filling\" was better than baseline algorithms, including support vector machine/regression and linear state space (LSS) models. However, there was no statistical difference between the RNN and LSS for predicting cognition and ventricular volume.\nImportantly, although the training procedure utilized longitudinal data, we found that the trained RNN model exhibited similar performance, when using only 1 input timepoint or 4 input timepoints, suggesting that our approach might work well with just cross-sectional data.\nAn earlier version of our approach was ranked 5th (out of 53 entries) in the TADPOLE challenge in 2019. The current approach is ranked 2nd out of 56 entries as of August 12th, 2019."}, {"section_title": "Introduction", "text": "Alzheimer's disease (AD) dementia is a devastating neurodegenerative disease with a long prodromal phase and no available cure. It is widely believed that an effective treatment strategy should target individuals at risk for AD early in the disease process (Scheltens et al., 2016) . Consequently, there is significant interest in predicting the longitudinal disease progression of individuals. A major difficulty is that although AD commonly presents as an amnestic syndrome, there is significant heterogeneity across individuals (Murray et al., 2011; Noh et al., 2014; Zhang et al., 2016; Risacher et al., 2017; Young et al., 2018; Sun et al., 2019) . Since AD dementia is marked by beta-amyloid-and tau-mediated injuries, followed by brain atrophy and cognitive decline (Jack et al., , 2013 , a multimodal approach might be more effective than a single modality approach to disentangle this heterogeneity and predict longitudinal disease progression .\nIn this study, we proposed a machine learning algorithm to predict multimodal AD markers (e.g., ventricular volume, cognitive scores, etc) and clinical diagnosis of individual participants for every month up to six years into the future. Most previous work has focused on a \"static\" variant of the problem, where the goal is to predict a single timepoint (Duchesne et al., 2009; Stonnington et al., 2010; Zhang and Shen, 2012; Moradi et al., 2015; Albert et al., 2018; Ding et al., 2018) or a set of pre-specified timepoints in the future (regularized regression; (Wang et al., 2012; Johnson et al., 2012; McArdle et al., 2016; Wang et al., 2016) ). By contrast, our goal is the longitudinal prediction of clinical diagnosis and multimodal AD markers at a potentially unlimited number of timepoints into the future 1 , as defined by The Alzheimer's Disease Prediction Of Longitudinal Evolution (TADPOLE) challenge , which arguably a more relevant and complete goal for tasks, such as prognosis and cohort selection.\nOne popular approach to this longitudinal prediction problem is mixed-effect regression modeling, where longitudinal trajectories of AD biomarkers are parameterized by linear or sigmoidal curves (Vemuri et al., 2009; Ito et al., 2010; Sabuncu et al., 2014; Samtani et al., 2012; Zhu and Sabuncu, 2018) . However, such a modeling approach requires knowing the shapes of the biomarker trajectories a priori. Furthermore, even though the biomarker trajectories might be linear or sigmoidal when averaged across participants (Caroli and Frisoni, 2010; Jack et al., 2010; Sabuncu et al., 2011) , individual subjects might deviate significantly from the assumed parametric forms.\nConsequently, it might be advantageous to not assume that the biomarker trajectories follow a specific functional form. For example, Xie and colleagues proposed an incremental regression modeling approach to predict the next timepoint based on a fixed number of input time points (Xie et al., 2016) . The prediction can then be used as input to predict the next timepoint and so on indefinitely. However, the training procedure requires participants to have two timepoints, thus \"wasting\" data from participants with less or more than two timepoints. Therefore, state-based models that do not constrain the shapes of the biomarker trajectories or assume a fixed number of timepoints might be more suitable for this longitudinal prediction problem (e.g., discrete state hidden Markov models; Sukkar et al. 2012 ). Here, we considered recurrent neural networks (RNNs), which allow an individual's latent state to be represented by a vector of numbers, thus providing a richer encoding of an individual's \"disease state\" beyond a single integer (as in the case of discrete state hidden Markov models). In the context of medical applications, RNNs have been used to model electronic health records (Lipton et al., 2016a; Choi et al., 2016; Esteban et al., 2016; Pham et al., 2017; Rajkomar et al., 2018; Suo et al., 2018) and AD disease progression (Nguyen et al., 2018; Ghazi et al., 2019) .\nMost previous work on predicting AD progression ignore the issue of missing data (Stonnington et al., 2010; Sukkar et al., 2012; Lei et al., 2017; Liu et al., 2019) . However, missing data is prevalent in real-world applications and arises due to study design, delay in data collection, subject attrition or mistakes in data collection. Missing data poses a major difficulty for modeling longitudinal data since most statistical models assume featurecomplete data (Garc\u00eda-Laencina et al., 2010) . Many studies sidestep this issue by removing subjects or timepoints with missing data, thus potentially losing a large quantity of data.\nThere are two main approaches for handling missing data (Schafer and Graham 2002) . First, the \"preprocessing\" approach handles the missing data issue in a separate preprocessing step, by imputing the missing data (e.g., using the missing variable's mean or more sophisticated machine learning strategies; Azur et al., 2011; Rehfeld et al., 2011; Stekhoven and B\u00fchlmann, 2011; White et al., 2011; Zhou et al., 2013) , and then using the imputed data for subsequent modeling. Second, the \"integrative\" approach is to integrate the missing data issue directly into the models or training strategies, e.g., marginalizing the missing data in Bayesian approaches (Marquand et al., 2014; Wang et al., 2014; Aksman et al., 2019) .\nIn this work, we proposed to adapt the minimalRNN model (Chen, 2017) to predict AD progression. The minimalRNN has fewer parameters than other RNN models, such as the long short-term memory (LSTM) model, so it might be less prone to overfitting. Although RNNs are usually trained using feature-complete data, we explored two \"preprocessing\" and one \"integrative\" approaches to deal with missing data. We used data from the TADPOLE competition, comprising longitudinal data from 1677 participants ). An earlier version of this work was published at the International Workshop on Pattern Recognition in Neuroimaging and utilized the more complex LSTM model (Nguyen et al., 2018) . Here, we extended our previous work by using a simpler RNN model, expanding our comparisons with baseline approaches and exploring how the number of input timepoints affect prediction performance. We also compared the original LSTM and current minimalRNN models using the live leaderboard on TADPOLE. We randomly divided the data into training, validation and test sets. The ratio of subjects in the training, validation and test sets was 18:1:1. The training set was used to train the model. The validation set was used to select the hyperparameters. The test set was used to evaluate the models' performance. For subjects in the validation and test sets, the first half of the timepoints of each subject were used to predict the second half of the timepoints of the same subject. All variables (except diagnostic category, which was categorical rather than continuous) were z-normalized. The z-normalization was performed on the training set. The mean and standard deviation from the training set was then utilized to z-normalize the validation and test sets. The random split of the data into training, validation and test sets was repeated 20 times to ensure stability of results Li et al., 2019; Varoquaux, 2018) . Care was taken so that the test sets were non-overlapping so that the test sets across the 20 data splits covered the entire dataset. (Table 1) . The input to each RNN cell comprised the diagnosis and continuous variables (Eq. 1). Note that was represented using one-hot encoding. The hidden state was a combination of the previous hidden state \u2212 and the transformed input (Eq. 4). The forget gate weighed the contributions of the previous hidden state \u2212 and current transformed input toward the current hidden state (Eq. 3). The model predicted the next month diagnosis \u0302+ and continuous variables \u0302+ using the hidden state (Eqs. 5 and 6). \u2299 and denote elementwise product and the sigmoid function respectively."}, {"section_title": "Proposed model", "text": "We adapted the minimalRNN (Chen, 2017) for predicting disease progression. The model architecture and update equations are shown in Figure 1 . Let denote all variables observed at time , comprising the diagnosis and remaining continuous variables (Eq. 1 in Figure 2B ). Here, diagnosis was represented using one-hot encoding. In other words, diagnosis was represented as a vector of length three. More specifically, if the first entry was one, then the participant was a normal control. If the second entry was one, then the participant was mild cognitively impaired. If the third entry was one, then the participant had AD dementia. For now, we assume that all variables were observed at all timepoints; the missing data issue will be addressed in Sections 2.4.\nAt each timepoint, the transformed input (Eq. 2 in Figure 2 ) and the previous hidden state \u2212 were used to update the hidden state (Eqs. 3 and 4 in Figure 2B ). The hidden state can be interpreted as integrating all information about the subject up until that timepoint. The hidden state was then used to predict the observations at the next timepoint + (Eqs. 5 and 6 in Figure 1B ). In the ADNI database, data were collected at a minimum interval of 6 months.\nHowever, in practice, data might be collected at an unscheduled time (e.g., month 8 instead of month 6). Consequently, the duration between timepoints and + 1 in the RNN was set to be 1 month."}, {"section_title": "Training with no missing data", "text": "Figure 3. The minimalRNN was trained to predict the next observation given the current observation (e.g., predicting \u0302 given ). The errors between the actual observations (e.g., ) and predictions (e.g., \u0302) were used to update the model parameters. The hidden state encoded information about the subject up until time .\nThe RNN training is illustrated in Figure 2 . The RNN was trained to predict the next observation ( ) given the previous observations ( , , \u2026 , \u2212 ). The errors between the predicted outputs (e.g. \u0302) and the ground truth outputs (e.g. ) were used to update the model parameters. The error (or loss ) was defined as follows:\nThe value of was set to be . During training, gradients of loss with respect to the model parameters were back-propagated to update the RNN parameters. The RNN was trained using Adam (Kingma and Ba, 2015) . The HORD algorithm (Regis and Shoemaker 2013; Eriksson, Bindel, and Shoemaker 2015; Ilievski et al. 2017 ) was utilized to find the best hyperparameters by maximizing model performance on the validation set. We note that this optimization was performed independently for each training/validation/test split of the dataset. The hyperparameter search space is shown in Table 2 .\nHyper-parameter Range Input dropout rate 0.0 -0.5 Recurrent dropout rate 0.0 -0.5 L2 weight regularization 10 \u22127 -10 \u22125 Learning rate 10 \u22125 -10 \u22122 Number of hidden layers 1 -3 Size of hidden state 128 -512 Table 2 . Hyperparameter search space of the MinimalRNN estimated from the validation sets using HORD. Predicting future timepoints (\u0302, \u0302, \u0302, etc) given three initial timepoints ( , , and ) . Prediction started at month 4. Since there were no observed data at timepoints 4 and 5, the predictions (\u0302 and \u0302) were used as inputs (at timepoints 5 and 6 respectively) to predict further into the future."}, {"section_title": "Prediction with no missing data", "text": ""}, {"section_title": "Missing data", "text": "As seen in Table 1 , there were a lot of missing data in ADNI. This was exacerbated by the fact that data were collected at a minimum interval of 6 months, while the sampling period in the RNN was set to be one month (to handle off-schedule data collection). During training, the loss function was evaluated only at timepoints with available observations.\nSimilarly, when evaluating model performance (Section 2.6), only available observations were utilized.\nThe missing data also posed a problem for the RNN update equations ( Figure 1B) , which assumed all variables were observed. Here, we explored two \"preprocessing\" strategies (Sections 2.4.1 & 2.4.2) and one \"integrative\" strategy (Section 2.4.3) to handle the missing values. As explained in the introduction, \"preprocessing\" strategies impute the missing data in a separate preprocessing. The imputed data is then used for subsequent modeling. On the other hand, \"integrative\" strategies incorporate the missing data issue directly into the model or training strategies."}, {"section_title": "Forward filling", "text": "Forward filling involved imputing the data using the last timepoint with available data (Che et al., 2018; Lipton et al., 2016b) . Figure 5A illustrates an example of how forwardfilling in time was used to fill in missing input data. In this example, there were two input variables A and B. The values of feature A at time t = 2, 3 and 4 were filled using the last observed value of feature A (at time t = 1). Similarly, the values at t = 7, 8 of feature A were filled using value at t = 6 when it was last observed. If data was missing at the first timepoint, the mean value across all timepoints of all training subjects was used for the imputation."}, {"section_title": "Linear filling", "text": "The previous strategy utilized information from previous timepoints for imputation.\nOne could imagine that it might be helpful to use previous and future timepoints for imputation. The linear filling strategy performed linear interpolation between the previous timepoint and the next time point with available data (Junninen et al., 2004) . Figure 5B shows an example of linear interpolation. Values of feature A at time t = 2, 3, 4, 6 were filled in using linear interpolation. However, linear-filling did not work for months 8, 9 and 10 because there was no future observed data for linear interpolation, so forward-filling was utilized for those timepoints. Like forward filling, if data was missing at the first timepoint, the mean value across all timepoints of all training subjects was used for the imputation. Notice that linear-filling did not work for months 8, 9 and 10 because there was no future observed data for linear interpolation, so forward filling was utilized for those timepoints. (C) Model-filling imputed missing values using model predictions."}, {"section_title": "Model filling", "text": "We also considered a novel model filling strategy of filling in missing data. As seen in Section 2.3.2 ( Figure 5 ), the prediction of the RNN could be used as inputs for the next timepoint. The same approach can be used for filling in missing data. Figure 5B shows an example of how the RNN was used to fill in missing data. At time t = 2 to 6, the values of feature A were filled in using predictions from the RNN. The RNN could also be used to extrapolate features that \"terminate early\" (e.g., time t = 8 and 9).\nA theoretical benefit of modeling filling was that the full sets of features were utilized for the imputation. For example, both features A and B at time t = 1 were used by the RNN to predict both input features at time t = 2 ( Figure 5B ). This was in contrast to forward or linear filling, which would utilize only feature A (or B) to impute feature A (or B).\nLike forward filling, if data was missing at the first timepoint, the mean value across all timepoints of all training subjects was used for the imputation."}, {"section_title": "Baselines", "text": "We considered three baselines: constant prediction, support vector machine/regression (SVM/SVR), and linear state-space (LSS) model."}, {"section_title": "Constant prediction", "text": "The constant prediction algorithm simply predicted all future values to be the same as the last observed values. The algorithm did not need any training. While this might seem like an overly simplistic algorithm, we will see that the constant prediction algorithm is quite competitive for near term prediction."}, {"section_title": "SVM/SVR", "text": "As explained in the introduction, most previous studies have focused on a \"static\" variant of the problem, where the goal is to predict a single timepoint or a set of pre-specified timepoints in the future. Here, we will consider such a baseline by using SVM to predict clinical diagnosis (which was categorical) and SVR to predict ADAS-Cog13 and ventricular volume (which were continuous). The models were implemented using scikit-learn (Pedregosa et al., 2011) .\nOverall, we considered four SVM/SVR baselines corresponding to using 1 to 4 input timepoints (spaced 6 months apart) to predict the future. The 6-month interval was chosen because the ADNI data was collected roughly every 6 months. As can be seen in Section 3.1, the best results were obtained with 2 or 3 input timepoints, so we did not explore more than 4 input timepoints.\nFor each SVM/SVR baseline, we trained separate SVM/SVR to predict 6, 12, 18, \u2026, 60 months into the future. 60 months were the maximum because of insufficient data to train SVM/SVR to predict further into the future ( Figure 1B) . Therefore, in total, for each of the four SVM/SVR baselines (using 1, 2, 3 or 4 input timepoints), we trained 10 separate SVM to predict clinical diagnosis, 10 SVR to predict ADAS-Cog13 and 10 SVR to predict ventricular volume.\nThe linear filling strategy ( Figure 5B ) was used to handle missing data. Because prediction performance was evaluated at every month in the future, prediction at intermediate months (e.g., months 1 to 5, 7 to 11, etc) were linearly interpolated. Prediction from month 61 onwards utilized forward filling based on the prediction at month 60.\nWe used the same 20 training/validation/test data splits as the RNN. For each data split, the SVM/SVR was trained on the training set and the hyperparameters were selected using the validation set using HORD. The models were then evaluated in the test set."}, {"section_title": "SVM", "text": "SVR Kernel Linear or RBF Epsilon NA 10 \u22123 -10 \u22120 Penalty 10 \u22123 -10 3 Gamma 10 \u22123 -10 3 Table 3 . Hyperparameter search space of the SVM/SVR estimated from the validation sets using HORD.\nOne tricky issue arose when a test subject had insufficient input timepoints for a particular SVM/SVR baseline. For example, the 4-timepoint SVM/SVR baseline required 4 input timepoints in order to predict future timepoints. In this scenario, if a test subject only had 2 input timepoints, then the 2-timepoint SVM/SVR was utilized for this subject even though we were considering the 4-timepoint SVM/SVR baseline. We utilized this strategy (instead of discarding the test subject) in order to ensure the test sets were exactly the same across all algorithms."}, {"section_title": "Linear state space (LSS) model", "text": "We considered a linear state space (LSS) baseline by linearizing the minimalRNN model ( Figure 6 ). Other than the update equations ( Figure 6 ), all other aspects of training and prediction were kept the same. For example, the LSS models utilized the same data imputation strategies (Section 2.4) and were trained with the same cost function using Adam.\nWe used the same 20 training/validation/test data splits as the RNN. HORD was used to find the best hyperparameters by maximizing the performance in the validation sets. The search ranges of the hyperparameters were the same as before ( Table 2 )."}, {"section_title": "Figure 6. (A)", "text": "Linear state space (LSS) model. Observe the gray cell is much simpler than the minimalRNN (B) LSS update equations. and denote categorical (i.e., diagnosis) and continuous variables respectively (Table 1) . The input to each LSS cell comprised the diagnosis and continuous variables (Eq. 10). Like before, was represented using onehot encoding. The hidden state was a combination of the previous hidden state \u2212 and the input (Eq. 11). The model predicted the next month diagnosis \u0302+ and continuous variables \u0302+ using the hidden state (Eqs. 12 and 13)."}, {"section_title": "Performance evaluation", "text": "Following the TADPOLE competition, diagnosis classification accuracy was evaluated using the multiclass area under the operating curve (mAUC; Hand and Till, 2001) and balanced class accuracy (BCA) metrics. For both mAUC and BCA metrics, higher values indicate better performance. ADAS-Cog13 and ventricles prediction accuracy was evaluated using mean absolute error (MAE). Lower MAE indicates better performance. The final performance for each model was computed by averaging the results across the 20 test sets.\nThe resampled t-test (Bouckaert and Frank, 2004 ) was used to evaluate differences in performance between models."}, {"section_title": "Impact of the number of input timepoints on prediction accuracy", "text": "For the RNNs to be useful in the clinical settings, they should ideally be able to perform well with as little input timepoints as possible. Therefore, we applied the best model (Section 2.6) to the test subjects using 1, 2, 3 or 4 input timepoints (Figure 9 ). Test subjects with less than 4 input timepoints were discarded, so that the same test subjects were evaluated across the four conditions (i.e., 1, 2, 3 or 4 input timepoints). However, this meant that the results from this analysis were not comparable to the previous sections (since the test subjects were not exactly the same). "}, {"section_title": "TADPOLE live leaderboard", "text": "The TADPOLE challenge involves the prediction of ADAS-Cog13, ventricular volume and clinical diagnosis of 219 ADNI participants for every month up to five years into the future. We note that these 219 participants were a subset of the 1677 subjects used in this study. However, the future timepoints used to evaluate performance on the live leaderboard (https://tadpole.grand-challenge.org/D4_Leaderboard/) were not part of the data utilized in this study. Here, we utilized the entire dataset (1677 participants) to tune a set of hyperparameters (using HORD) that maximized performance either (1) one year into the future or (2) all years into the future. We then submitted the predictions of the 219 participants to the TADPOLE leaderboard.\nThe original LSTM model (Nguyen et al., 2018) was ranked 5th (out of 53 entries) in the TADPOLE grand challenge in July 2019 (entry \"CBIL\" in https://tadpole.grandchallenge.org/Results/). Our current minimalRNN models were ranked 2nd and 3rd (out of 56 entries) in the leaderboard as of Aug 12th, 2019 (entries (\"CBIL-MinMFa\" and \"CBIL-MinMF1\"; https://tadpole.grand-challenge.org/D4_Leaderboard/). Interestingly, the model obtained from hyperparameters tuned to predict all years into the future (\"CBIL-MinMFa\") performed better than the model obtained from hyperparameters tuned to predict one year into the future (\"CBIL-MinMF1\"), even though the leaderboard currently utilized about one year of future data for prediction.\n."}, {"section_title": "Data and code availability", "text": "The code used in this paper can be found at https://github.com/ThomasYeoLab/CBIG/tree/master/stable_projects/predict_phenotypes/Ng uyen2020_RNNAD. This study utilized data from the publicly available ADNI database (http://adni.loni.usc.edu/data-samples/access-data/). The particular set of participants and features we used is available at the TADPOLE website (https://tadpole.grand-challenge.org/). Figure 8 illustrates the test performance of minimalRNN and three baselines (SVM/SVR, constant prediction and LSS). For clarity, we only showed RNN with mixed filling (RNN-MF), LSS with mixed filling (LSS-MF) and SVM/SVR using one input timepoint because they yielded the best results within their model classes. Table 4 shows the test performance of all models (RNN, SVM/SVR, constant prediction and LSS) across all three missing data strategies."}, {"section_title": "Results", "text": ""}, {"section_title": "Overall performance", "text": "We performed statistical tests comparing the three RNN variants (RNN-FF, RNN-LF and RNN-MF) with all other baseline approaches (LSS, constant prediction, SVM/SVR).\nMultiple comparisons were corrected with a false discovery rate (FDR) of q < 0.05. In the case of clinical diagnosis prediction, RNN-MF performed the best and was statistically better than all baseline approaches (LSS, constant prediction, SVM/SVR). In the case of ADAS-Cog13 and ventricular volume, RNN-MF also performed the best and was statistically better than all baseline approaches, except LSS with model filling (LSS-MF; p = 0.59). 0.864 \u00b1 0.024 (p = 0.001) 4.95 \u00b1 0.57 (p = 0.003) 0.00216 \u00b1 0.00031 (p = 5.6\u00d710 -7 ) LSS-LF 0.908 \u00b1 0.032 (p = 0.005) 0.857 \u00b1 0.037 (p = 0.042)\n6.36 \u00b1 0.82 (p = 3.2\u00d710 -7 )\n0.00175 \u00b1 0.00023 (p = 0.061) LSS-MF 0.926 \u00b1 0.025 (p = 0.004) 0.861 \u00b1 0.029 (p = 0.001)\n4.38 \u00b1 0.49 (p = 0.590) 0.00177 \u00b1 0.00028 (p = 0.044) Constant 0.867 \u00b1 0.022 (p = 3.2\u00d710 -9 ) 0.861 \u00b1 0.023 (p = 2.0\u00d710 -4 )\n5.07 \u00b1 0.61 (p = 3.3\u00d710 -4 ) 0.00266 \u00b1 0.00027 (p = 5.9\u00d710 -12 ) SVM/SVR (= 1tp) 0.929 \u00b1 0.013 (p = 0.011) 0.841 \u00b1 0.023 (p = 2.5\u00d710 -7 )\n5.14 \u00b1 0.62 (p = 1.8\u00d710 -4 ) 0.00199 \u00b1 0.00031 (p = 7.3\u00d710 -5 ) SVM/SVR (\u2264 2tp) 0.926 \u00b1 0.013 (p = 0.002) 0.836 \u00b1 0.026 (p = 2.8\u00d710 -6 )\n5.23 \u00b1 0.63 (p = 1.1\u00d710 -4 ) 0.00230 \u00b1 0.00037 (p = 2.7\u00d710 -7 ) SVM/SVR (\u2264 3tp) 0.923 \u00b1 0.013 (p = 0.001) 0.830 \u00b1 0.025 (p = 2.6\u00d710 -7 )\n5.53 \u00b1 0.55 (p = 4.5\u00d710 -7 )\n0.00261 \u00b1 0.00037 (p = 5.9\u00d710 -7 ) SVM/SVR (\u2264 4tp) 0.919 \u00b1 0.012 (p = 2.2\u00d710 -5 ) 0.832 \u00b1 0.019 (p = 4.1\u00d710 -7 )\n5.68 \u00b1 0.58 (p = 9.4\u00d710 -7 )\n0.00269 \u00b1 0.00035 (p = 1.2\u00d710 -9 ) Table 4 . Prediction performance averaged across 20 test sets. For clinical diagnosis, higher mAUC and BCA values indicate better performance. For ADAS-Cog13 and Ventricles, lower MAE indicates better performance. FF indicates forward filling. LF indicates linear filling. MF indicates model filling. SVM/SVR (= 1tp) utilized one input timepoint. SVM/SVR (\u2264 2tp) utilized at most 2 input timepoints (see Section 2.5.2 for details) and so on. The best result for each performance metric was bolded. RNN-MF was numerically the best across all metrics. Gray font indicates that the performance was not statistically better than the best performance (in bold) after correcting for multiple comparisons using a false discovery rate (FDR) of q < 0.05.\nFor both RNN and LSS, mixed filling performed better than forward filling and linear filling, especially when predicting ADAS-Cog13 and ventricular volume (Table 4) .\nInterestingly, more input timepoints do not necessarily lead to better prediction in the case of SVM/SVR. In fact, the SVM/SVR model using one timepoint was numerically better than SVM/SVR models using more timepoints, although the differences were small. Figure S2 for all models."}, {"section_title": "RNNs using one and four input timepoints in test subjects achieve comparable performance", "text": "Given that the MinimalRNN with model filling (RNN-MF) performed the best (Table   4) , we further explored how well the trained RNN-MF model would perform on test subjects with different number of input timepoints. Figure 12 shows the performance of RNN-MF averaged across 20 test sets using different number of input timepoints. The exact numerical values are reported in Table 5 .\nRNNs using 2 to 4 input timepoints achieved similar performance across all metrics. RNN using 1 input timepoint had numerically worse results, especially for ventricular volume.\nHowever, there was no statistical difference between using 1 input timepoint and 4 input timepoints even in the case of ventricular volume (p = 0.20)."}, {"section_title": "Figure 10.", "text": "Test performance of RNN model with model filling strategy (RNN-MF) using different numbers of input timepoints (after training with all timepoints). Results were averaged across 20 test sets. Even though the RNN model using 1 input timepoint yielded numerically worse results, the differences were not significant (see Table 5 ). mAUC (more=better) BCA (more=better)"}, {"section_title": "ADAS-Cog13 (less=better)", "text": "Ventricles (less=better)s 4 timepoints 0.911 \u00b1 0.076 0.844 \u00b1 0.053 5.28 \u00b1 1.41 0.00240 \u00b1 0.00040 3 timepoints 0.909 \u00b1 0.076 (p = 0.68) 0.844 \u00b1 0.052 (p = 0.88) 5.28 \u00b1 1.38 (p = 0.99) 0.00232 \u00b1 0.00038 (p = 0.22) 2 timepoints 0.908 \u00b1 0.080 (p = 0.57) 0.844 \u00b1 0.053 (p = 0.84) 5.24 \u00b1 1.35 (p = 0.89) 0.00260 \u00b1 0.00067 (p = 0.50) 1 timepoint 0.897 \u00b1 0.091 (p = 0.27) 0.833 \u00b1 0.048 (p = 0.18) 5.48 \u00b1 1.37 (p = 0.53) 0.00309 \u00b1 0.00098 (p = 0.20) Table 5 . Test performance of RNN model with model filling strategy (RNN-MF) using different numbers of input timepoints (after training with all timepoints). Results were averaged across 20 test sets. Statistical tests were performed to test for differences between using 4 timepoints versus less timepoints. The gray font indicates that there was no statistical difference that survived FDR of q < 0.05."}, {"section_title": "Discussion", "text": "In this work, we adapted a minimalRNN model for predicting longitudinal progression in AD dementia. Our approach compared favorably with baseline algorithms, such as SVM/SVR and LSS models. However, we note that there was no statistical difference between the minimalRNN and LSS for predicting ADAS-Cog13 and ventricular volume even though other studies suggested benefits of modeling non-linear interactions between features (Popescu et al., 2019) .\nAs can be seen when setting up the SVM/SVR baseline models (Section 2.5.2), there are a lot of edge cases to consider in order to adapt a \"static\" prediction algorithm (e.g., SVM/SVR) to the more \"dynamic\" longitudinal prediction problem we considered here. For example, data is inevitably wasted because static approaches generally assume that participants have the same number of input timepoints. Therefore, for the SVM/SVR models using 4 input timepoints, we ended up with only 1454 participants out of the original 1677 participants. This might explain why the SVM/SVR model using 1 input timepoint compared favorably with the SVM/SVR model using 4 input timepoints (Table 4 ). Furthermore, we had to build multiple separate SVM/SVR models to predict at a fixed number of future timepoints, and performed interpolation at intermediate timepoints. By contrast, state-based models (e.g., minimalRNN or LSS) are more elegant in the sense that they handled participants with different number of timepoints and can in principle predict unlimited number of timepoints into the future.\nEven though the ADNI dataset comprised participants with multiple timepoints, for the algorithm to be clinically useful, it has to be successful at dealing with missing data and participants with only one input timepoint. We found that the \"integrative\" approach of using the model to fill in the missing data (i.e., model filling) compared favorably with \"preprocessing\" approaches, such as forward filling or linear filling. However, it is possible that more sophisticated \"preprocessing\" approaches, such as matrix factorization (Mazumder et al., 2010; Nie et al., 2017; Thung et al., 2016) or wavelet interpolation (Mondal and Percival, 2010) , might yield better results. We note that our model filling approach can also be considered as a form of matrix completion since the RNN (or LSS) was trained to minimize the predictive loss, which is equivalent to maximizing the likelihood of the training data. However, matrix completion usually assumes that the training data can be represented as a matrix that can be factorized into low-ranked or other specially-structured matrices. On the other hand, our method assumes temporal dependencies between rows in the data matrix (where each row is a timepoint).\nOur best model (minimalRNN with model filling) had similar performance when using only 1 input timepoint instead of 4 input timepoints, suggesting that our approach might work well with just cross-sectional data (after training using longitudinal data).\nHowever, we might have simply lacked the statistical power to distinguish among the different conditions because of the smaller number of subjects in this experiment (see Section 2.7). Overall, there was no noticeable difference among using 2, 3 or 4 input timepoints, while the performance using 1 input timepoint appeared worse, but the difference was not statistically significant ( Figure 10 ).\nAlthough our approach compared favorably with the baseline algorithms, we note that any effective AD dementia treatment probably has to begin early in the disease process, potentially at least a decade before the emergence of behavioral symptoms. However, even in the case of our best model (minimalRNN with model filling), prediction performance of clinical diagnosis dropped from a BCA of 0.935 in year 1 to a BCA of 0.810 in year 6, while ventricular volume MAE increased from 0.00104 in year 1 to 0.00511 in year 6. Thus, significant improvement is needed for clinical utility.\nOne possible future direction is to investigate new features, e.g., those derived from diffusion MRI or arterial spin labeling. Previous studies have also suggested that different atrophy patterns (beyond the temporal lobe) might influence cognitive decline early in the disease process (Noh et al., 2014; Byun et al., 2015; Ferreira et al., 2017; Zhang et al., 2016; Risacher et al., 2017; Sun et al., 2019) , so the atrophy features considered in this study (Table   1) might not be optimal. Although the new features may be correlated with currently used features, the new features might still provide complementary information when modeling AD progression (Popescu et al., 2019) .\nAs mentioned in the introduction, an earlier version of our algorithm was ranked 5th out of 50 entries in the TADPOLE competition. Our current model was ranked 2nd out of 56 entries on the TADPOLE live leaderboard as of Aug 12th, 2019. Interestingly, the top team considered additional handcrafted features, which might have contributed to its success. Furthermore, the top team utilized a non-deep-learning algorithm XGboost (Chen and Guestrin, 2016) , which might be consistent with recent work suggesting that for certain neuroimaging applications, non-deep-learning approaches might be highly competitive (He et al., 2019) "}, {"section_title": "Conclusion", "text": "Using 1677 participants from the ADNI database, we showed that the minimalRNN model was better than other baseline algorithms for the longitudinal prediction of multimodal AD biomarkers and clinical diagnosis of participants up to 6 years into the future. We explored three different strategies to handle the missing data issue prevalent in longitudinal data. We found that the RNN model can itself be used to fill in the missing data, thus providing an integrative strategy to handle the missing data issue. Furthermore, we also found that after training with longitudinal data, the trained RNN model can perform reasonably well using one input timepoint, suggesting the approach might also work for cross-sectional data. "}, {"section_title": "Supplementary", "text": ""}]