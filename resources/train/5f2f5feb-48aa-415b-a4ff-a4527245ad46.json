[{"section_title": "Abstract", "text": "We present recursive cascaded networks, a general architecture that enables learning deep cascades, for deformable image registration. The proposed architecture is simple in design and can be built on any base network. The moving image is warped successively by each cascade and finally aligned to the fixed image; this procedure is recursive in a way that every cascade learns to perform a progressive deformation for the current warped image. The entire system is end-to-end and jointly trained in an unsupervised manner. In addition, enabled by the recursive architecture, one cascade can be iteratively applied for multiple times during testing, which approaches a better fit between each of the image pairs. We evaluate our method on 3D medical images, where deformable registration is most commonly applied. We demonstrate that recursive cascaded networks achieve consistent, significant gains and outperform stateof-the-art methods. The performance reveals an increasing trend as long as more cascades are trained, while the limit is not observed. Our code will be made publicly available."}, {"section_title": "Introduction", "text": "Deformable image registration has been studied in plenty of works and raised great importance. The non-linear correspondence between a pair of images is established by predicting a deformation field under the smoothness constraint. Among traditional algorithms, an iterative approach is com-monly suggested [2, 3, 4, 7, 10, 18, 27, 52] , where the objective is formulated as a progressive optimization problem at each iteration.\nImage registration has drawn growing interests in terms of deep learning techniques. A closely related subject is optical flow estimation, which is essentially a 2D image registration problem except that the flow fields are discontinuous across objects and the tracking is mainly about motion with rare color difference. Occlusions and folding areas requiring a guess are inevitable in optical flow estimation (but certainly not expected in deformable image registration). Automatically generated datasets (e.g., Flying Chairs [24] , Flying Things 3D [41] ) are of great help for supervising convolutional neural networks (CNNs) in such settings [24, 29, 30, 54, 55] . Some studies also try to stack multiple networks. They assign different tasks and inputs to each cascade in a non-recursive way and train them one by one [30, 45] , but their performance approaches a limit with only a few (no more than 3) cascades. On the other hand, cascading may not help much when dealing with discontinuity and occlusions. Thus by intuition, we suggest that cascaded networks with a recursive architecture fits the setting of deformable registration.\nLearning-based methods are also suggested as an approach in deformable image registration. Unlike optical flow estimation, intersubject registration with vague correspondence of image intensity is usually demanded. Some initial works rely on the dense ground-truth flows obtained by either traditional algorithms [14, 56] or simulating intrasubject deformations [36, 53] , but their performance is restricted due to the limited quality of training data.\nUnsupervised learning methods with comparable performance to traditional algorithms have been presented recently [8, 9, 19, 20, 37, 38] . They only require a similarity measurement between the warped moving image and the fixed image, while the gradients can backpropagate through the differentiable warping operation (a.k.a. spatial trans- Figure 1 . Example of recursive cascaded networks for registering liver CT scans. The moving image is recursively and progressively warped by each of the cascades, finally aligned to the fixed image. Each \u03c6 k denotes a predicted flow field, taken both the preceding warped image and the fixed image as inputs. Only image slices are presented but note that the registration is actually performed in 3D. Figure 1 . The final flow prediction is composed of an initial affine transformation and \u03c61, . . . , \u03c6n, each of which only performs a rather simple displacement. We can see that the top cascades mainly learn a global alignment, while the bottom cascades play a role of refinement. Flow fields are drawn by mapping the abosolute value of the three components (x, y, z) of flow displacements into color channels (R, G, B) respectively. White area indicates zero displacement.\nformer [32] ). However, most proposed networks are enforced to make a straightforward prediction, which proves to be a burden when handling complicated deformations especially with large displacements. DLIR [19] and VTN [37] also stack their networks, though both limited to a small number of cascades. DLIR trains each cascade one by one, i.e., after fixing the weights of previous cascades. VTN jointly trains the cascades, while all successively warped images are measured by the similarity compared to the fixed image. Neither training method allows intermediate cascades to progressively register a pair of images. Those noncooperative cascades learn their own objectives regardless of the existence of others, and thus further improvement can hardly be achieved even if more cascades are conducted. They may realize that network cascading possibly solves this problem, but there is no effective way of training deep network cascades for progressive alignments. Therefore, we propose the recursive cascade architecture, which encourages the unsupervised training of an unlimited number of cascades that can be built on existing base networks, for advancing the state of the art. The difference between our architecture and existing cascading methods is that each of our cascades commonly takes the current warped image and the fixed image as inputs (in contrast to [30, 45] ) and the similarity is only measured on the final warped image (in contrast to [19, 37] ), enabling all cascades to learn progressive alignments cooperatively. Figure  1 shows an example of applying the proposed architecture built on 10 deformable cascades of the base network VTN.\nConceptually, we formulate the registration problem as determining a parameterized flow prediction function, which outputs a dense flow field based on the input of an image pair. This function can be recursively defined on the warped moving image with essentially the same functionality. Instead of training the function in a straightforward way, the final prediction can be considered a composition of recursively predicted flow fields, while each cascade only needs to learn a simple alignment of small displacement that can be refined by deeper recursion. Figure 2 verifies our conception. Our method also enables the use of sharedweight cascades, which potentially achieves performance gains without introducing more parameters.\nTo summarize, we present a deep recursive cascade architecture for deformable image registration, which facilitates the unsupervised end-to-end learning and achieves consistent gains independently of the base network; sharedweight cascading technique with direct test-time improvement is developed as well. We conduct extensive experiments based on diverse evaluation metrics (segmentations and landmarks) and multiple datasets across image types (liver CT scans and brain MRIs)."}, {"section_title": "Related Work", "text": "Cascade approaches have been involved in a variety of domains of computer vision, e.g., cascaded pose regression progressively refines a pose estimation learned from supervised training data [23] , cascaded classifiers speed up the process of object detection [25] .\nDeep learning also benefits from cascade architectures. For example, deep deformation network [57] cascades two stages and predicts a deformation for landmark localization. Other applications include object detection [13] , semantic segmentation [17] , and image super-resolution [16] . There are also several works specified to medical images, e.g., 3D image reconstruction for MRIs [6, 49] , liver segmentation [46] and mitosis detection [15] . Note that shallow, non-recursive network cascades are usually proposed in those works.\nIn respect of registration, traditional algorithms iteratively optimize some energy functions in common [2, 3, 4, 7, 10, 18, 27, 52] . Those methods are also recursive in general, i.e., similarly functioned alignments with respect to the current warped images are performed during iterations. Iterative Closest Point is an iterative, recursive approach for registering point clouds [12, 58] , where the closest pairs of points are matched at each iteration and a rigid transformation that minimizes the difference is solved. In deformable image registration, most traditional algorithms basically works like this but in a much more complex way. Standard symmetric normalization (SyN) [4] maximizes the cross-correlation within the space of diffeomorphic maps during iterations. Optimizing free-form deformations using B-spline [48] is another standard approach.\nLearning-based methods are presented recently. Supervised methods entail much effort on the labeled data that can hardly meet the realistic demands, resulting in the limited performance [14, 56, 36, 53] . Unsupervised methods are proposed to solve this problem. Several initial works shows the possibility of unsupervised learning [19, 20, 38, 50] , among which DLIR [20] performs on par with the Bspline method implemented in SimpleElastix [40] (a multilanguage extension of Elastix [35] , which is selected as one of our baseline methods). VoxelMorph [8] and VTN [37] achieve better performance by predicting a dense flow field using deconvolutional layers [44] , whereas DLIR only predicts a sparse displacement grid interpolated by a third order B-spline kernel. VoxelMorph only evaluates their method on brain MRI datasets [8, 9] , but shown deficiency on other datasets such as liver CT scans by later work [37] . Additionally, VTN proposes an initial convolutional network which performs an affine transformation before predicting deformation fields, leading to a truly end-to-end framework by substituting the traditional affine stage.\nState-of-the-art VTN and VoxelMorph are selected as our base networks, and the suggested affine network is also integrated as our top-level cascade. To our knowledge, none of those work realizes that training deeper cascades advances the performance for deformable image registration."}, {"section_title": "Recursive Cascaded Networks", "text": "Let I m , I f denote the moving image and the fixed image respectively, both defined over d-dimensional space \u2126. A flow field is a mapping \u03c6 : \u2126 \u2192 \u2126. For deformable image registration, a reasonable flow field should be continuously varying and prevented from folding. The task is to construct a flow prediction function F which takes I m , I f as inputs and predicts a dense flow field that aligns I m to I f .\nWe cascade this procedure by recursively performing registration on the warped image. The warped image I m is exactly the composition of the flow field and the moving image, namely\nConceptually,\nwhere F 1 may be the same as F , but in general a different flow prediction function. This recursion can be infinitely applied in theory.\nFollowing this recursion, the moving image is warped successively, enabling the final prediction (probably with large displacement) to be decomposed into cascaded, progressive refinements (with small displacements). One cascade is basically a flow prediction function (f k ), and the k-th cascade predicts a flow field of\nm denotes the moving image warped by the first k cascades. Figure 3 depicts the proposed architecture. Assuming for n cascades in total, the final output is a composition of all predicted flow fields, i.e.,\nand the final warped image is constructed by"}, {"section_title": "Subnetworks", "text": "Each f k is implemented as a convolutional neural network in this paper. Every network is designed to predict a deformable flow field on itself based on the input warped image and the fixed image. f 1 , . . . f n can be different in network architecture, but surely using a common base network is well-designed enough for convenience. Those cascades may learn different network parameters on each, since one cascade is allowed to learn a part of measurements or perform some type of alignment specifically. Note that the images input to the networks are discretized and so are the output flow fields, thus we treat them by multilinear interpolation (or simply trilinear interpolation for 3D images), and out-of-bound indices by nearest-point interpolation [37] .\nAn architecture similar to the U-Net [31, 47] is widely used for deformable registration networks, such as VTN [37] and VoxelMorph [8] . Such network consists of encoders followed by decoders with skip connections. The encoders help to extract features, while the decoders perform upsampling and refinement, ending with a dense prediction.\nFor medical images, it is usually the case that two scans can be roughly aligned by an initial rigid (or affine) transformation. VoxelMorph [8] assumes that input images are preaffined by an external tool, whereas VTN [37] integrates an efficient affine registration network which outperforms the traditional stage. As a result, we also embed the affine registration network as our top-level cascade, which behaves just like a normal one except that it is only allowed to predict an affine transformation rather than general flow fields."}, {"section_title": "Unsupervised End-to-End Learning", "text": "We suggest that all cascades can be jointly trained by merely measuring the similarity between I (n) m and I f together with regularization losses. Enabled by the differentiable composition operator (i.e., warping operation), recursive cascaded networks can learn to perform progressive alignments cooperatively without supervision. To our knowledge, no previous work achieves good performance by stacking more than 3 deformable registration networks, partly because they train them one by one [19] (then the performance can hardly improve) or they measure the similarity on each of the warped images [37] (then the networks can hardly learn progressive alignments).\nRegularization losses are basically the smooth terms of \u03c6 1 , . . . , \u03c6 n , and thus are necessary. Every predicted flow field is penalized by an L2 variation loss as done in [8, 37] . The affine cascade works with its own regularization losses introduced in VTN [37] ."}, {"section_title": "Shared-Weight Cascading", "text": "One cascade can be repetitively applied during recursion. I.e., multiple cascades can be shared with the same parameters, and that is called shared-weight cascading.\nAfter an n-cascade network is trained, we can still possibly apply additional shared-weight cascades during testing. For example, we may replicate all cascades as an indivisible whole by the end of I (n) m , i.e., totally 2n cascades are associated with flow prediction functions f 1 , . . . , f n , f 1 , . . . , f n respectively. We develop a better approach by immediately inserting one or more shared-weight cascades after each, i.e., totally r\u00d7n cascades are constructed by substituting each f k by r times of that. This approach will be proved to be effective later in the experiments.\nShared-weight cascading during testing is an option when the quality of output flow fields can be improved by further refinement. However, we note that this technique does not always get positive gains and may lead to over deformation. Recursive cascades only ensure an increasing similarity between the warped moving image and the fixed image, but the aggregate flow field becomes less natural if the images are too perfectly matched.\nThe reason we do not use shared-weight cascading in training is that shared-weight cascades consume extra GPU memory as large as non-shared-weight cascades during gradient backpropagation in the platform we use (Tensorflow [1] ). The number of cascades to train is constrained by the GPU memory, but they would perform better with the allowance of learning different parameters when the dataset is large enough to avoid overfitting."}, {"section_title": "Experiments", "text": ""}, {"section_title": "Experimental Settings", "text": "We build our recursive cascaded networks mainly based on the network architecture of VTN [37] , which is a stateof-the-art method for deformable image registration. Note that VTN already stacks a few cascades of their deformable subnetworks, and a single cascade is being used as our base network. Up to 10-cascade VTN (excluding the affine cascade) is jointly trained using our proposed method. To show the generalizability of our architecture, we also choose VoxelMorph [9] as another base network. We train up to 5-cascade VoxelMorph, because each cascade of VoxelMorph consumes more resources.\nWe evaluate our method on two types of 3D medical images: liver CT scans and brain MRI scans. For liver CT scans, we train and test recursive cascaded networks for pairwise, subject-to-subject registration, which stands for a general purpose of allowing the fixed image to be arbitrary. For brain MRI scans, we follow the experimental setup of VoxelMorph [8] , where each moving image is registered to a fixed atlas, called atlas-based registration. Both settings are common in medical image registration.\nImplementation. Inherited from the implementation of VTN [37] using Tensorflow 1.4 [1] built with a custom warping operation, the correlation coefficient is used as the similarity measurement, while the ratios of regularization losses are kept the same as theirs. We train our model using a batch size of 4, on 4 cards of 12G NVIDIA TITAN Xp GPU. The training stage runs for 10 5 iterations with the Adam optimizer [33] . The learning rate is initially 10 \u22124 and halved after 6 \u00d7 10 4 steps and again after 8 \u00d7 10 4 steps.\nBaseline Methods. VTN [37] and VoxelMorph [8] are state-of-the-art learning-based methods. We cascade their base networks and also compare with the original systems. Besides, we also compare against SyN [4] (integrated in ANTs [5] together with the affine stage) and B-spline [48] (integrated in Elastix [35] together with the affine stage), which are shown to be the top-performing traditional methods for deformable image registration [8, 34, 37] . We run ANTs SyN and Elastix B-spline with the parameters recommended in VTN [37] .\nEvaluation Metrics. We quantify the performance by the Dice score [22] based on the segmentation of some anatomical structure, between the warped moving image and the fixed image, as done in [8, 19] . The Dice score of two regions A, B is formulated as\nPerfectly overlapped regions come with a Dice score of 1. The Dice score explicitly measures the coincidence between two regions and thereby reflects the quality of registration. If multiple anatomical structures are annotated, we compute the Dice score with respect to each and take an average.\nIn addition, landmark annotations are available in some datasets and can be utilized as an auxiliary metric. We compute the average distance between the landmarks of the fixed image and the warped landmarks of the moving image, also introduced in VTN [37] ."}, {"section_title": "Datasets", "text": "For liver CT scans, we use the following datasets:\n\u2022 MSD [42] . This dataset contains various types of medical images for segmenting different target objects. CT scans of liver tumours (70 scans excluding LiTS), hepatic vessels (443 scans), and pancreas tumours (420 scans) are selected since liver is likely to be included.\n\u2022 BFH (introduced in VTN [37] ), 92 scans.\n\u2022 SLIVER [28] , 20 scans with liver segmentation ground truth. Additionally, 6 anatomical keypoints selected as landmarks are annotated by 3 expert doctors, and we take their average as ground truth.\n\u2022 LiTS [39] , 131 scans with liver segmentation ground truth.\n\u2022 LSPIG (Liver Segmentation of Pigs, provided by the First Affiliated Hospital of Harbin Medical University), containing 17 pairs of CT scans from pigs, along with liver segmentation ground truth. Each pair comes from one pig with (perioperative) and without (preoperative) 13 mm Hg pneumoperitoneum pressure.\nUnsupervised methods are trained on the combination of MSD and BFH with 1025 2 (1025 = 70 + 443 + 420 + 92) image pairs in total. SLIVER (20 \u00d7 19 image pairs) and LiTS (131 \u00d7 130 image pairs) are used for regular evaluation, while LSPIG is regarded as a challenging dataset which entails generalizability. Only 34 intrasubject image pairs in LSPIG, each of which comes from a same pig (preoperative to perioperative, or vice versa), are evaluated.\nFor brain MRI scans, we use the following datasets:\n\u2022 ADNI [43] , 66 scans.\n\u2022 ABIDE [21] , 1287 scans.\n\u2022 ADHD [11] , 949 scans.\n\u2022 LPBA (LONI Probabilistic Brain Atlas) [51] . This dataset contains 40 scans, each of which comes with segmentation ground truth of 56 anatomical structures.\nADNI, ABIDE, ADHD are used for training, and LPBA for testing. All 56 anatomical structures are evaluated by an average Dice score. For atlas-based registration, the first scan in LPBA is fixed as the atlas in our experiments, which 1 Images for training and testing are pre-affined (as required in VoxelMorph [9] ) using ANTs [5] . 2 Reimplemented with an integrated affine network and trained using our method. 3 Denotes one affine registration subnetwork plus three dense deformable subnetworks [37] .\nis shown to be without loss of generality later in the atlas analysis.\nWe carry out standard preprocessing steps referring to VTN [37] and VoxelMorph [8] . Raw scans are resampled into 128 \u00d7 128 \u00d7 128 voxels after cropping unnecessary area around the target object. For liver CT scans, a simple threshold-based algorithm is applied to find a rough liver bounding box for cropping. For brain MRI scans, skulls are first removed using FreeSurfer [26] . The volumes are visualized for quality control so that seldom badly processed images are manually removed. (An overview of the evaluation datasets is provided in the supplementary material.) Table 1 summarizes our overall performance compared with state-of-the-art methods. Running times are approximately the same across datasets, so we test them on SLIVER, with an NVIDIA TITAN Xp GPU and an Intel Xeon E5-2690 v4 CPU. No GPU implementation of ANTs or Elastix has been found, nor in previous works [5, 8, 19, 35, 37] . As shown in Table 1 , recursive cascaded networks outperform the existing methods in all our datasets with significant gains. More importantly, the proposed architecture is independent of the base network, not limited to VTN [37] and VoxelMorph [8] . Although the number of cascades causes linear increments to the running times, a 10-cascade VTN still runs in a comparable (GPU) time to the baseline networks, showing the efficiency of our architecture. Number of Cascades. Table 2 presents the results with respect to different number of recursive cascades, choosing either VTN or VoxelMorph as our base network. As shown in the table, recursive cascaded networks achieve consistent performance gains independently of the base network. Our 3-cascade VTN (in Table 2 ) already outperforms VTN (ADDD) (in Table 1 ) although they have similar network architectures, mainly because our intermediate cascades learn progressive alignments better with only the similarity loss drawn on the final warped image. Figure 5 plots our results for better illustrating the increasing trend. Note that our architecture requires a linear time increment, but cascading a small-size base network like VTN is quite efficient. Table 2 . Comparison among different number of recursive cascades. n-cascade means n recursive cascades of the base network, excluding the affine cascade. Standard deviations across instances are in parentheses. Shared-Weight Cascading. Deeper cascades can be directly constructed using weight sharing. As we suggest, an r\u00d7n-cascade network successively repeats each of the jointly trained n cascades for r times during testing. A linear time increment is also required. This technique ensures an increasing similarity between the warped moving image and the fixed image, but we note that it does not always get positive performance gains. Table 3 presents the results of shared-weight cascaded networks, together with the image similarity (correlation coefficient is used in this paper). The image similarity is always increasing as we expect. Shallower cascaded networks benefit more from this technique relatively to the deeper ones, since the images are still not well-registered (with relatively low similarity, as shown in the table). Less excepted results on LiTS and LSPIG datasets may imply that this additional technique has a limited generalizability."}, {"section_title": "Results", "text": "Note that shared-weight cascades generally perform worse than their jointly trained counterparts. More than 3 times of shared-weight cascades are very likely to deteriorate the quality (which partly coincides with previous studies), further proving the end-to-end learning to be vital.\nCascades vs. Channels vs. Depth. VoxelMorph (VM) [9] suggests that the number of channels in the convolutional layers can be doubled for a better performance. We compare this variant (VM x2) against the jointly trained 2-cascade VM as well as a shared-weight 2\u00d71-cascade VM, shown in Table 4 . VM x2 performs better than the original one as they suggest, but worse than both of our cascade methods. On the other hand, the number of parameters in VM x2 is 4 times as large as that in VoxelMorph (as well as 2\u00d71-cascade VM), and 2 times as large as that in 2-cascade VM. However, one may wonder that whether simply deeper networks would do the trick. To this end, we construct VM-double by doubling the number of convolutional layers at each U-net level, and also an encoder-decoder-encoderdecoder architecture denoted VM xx2, which looks similar to a 2-cascade VM except the explicit warping. They have approximately the same amount of parameters compared to the 2-cascade VM, but are outperformed by a considerable margin. This experiment implies that our improvements are essentially based on the proposed recursive cascade architecture rather than simply introducing more parameters.\nAtlas Analysis. The performance for atlas-based registration may vary depending on the chosen atlas. As a comparison, we retrain the models on two more (the second and the third) atlases in the LPBA dataset, shown in Table 5 . These results indicate that our performance is consistent and robust to the choice of atlas."}, {"section_title": "Discussion", "text": "Recursive cascaded networks are quite simple to implement, and also easy to train. We do not tune the ratios of losses when training more cascades, nor the training schedule, showing the robustness of our architecture. If more resources are available or a distributed learning platform is being used, we expect that the performance can be further improved by deeper cascades, and also, training or fine-tuning shared-weight cascades would be an alternative choice. A light-weight base network is also worth an exploration.\nA possible limitation of this work would be on the smoothness of the composed field. Theoretically, recursive cascaded networks preserve the image topology as long as every subfield does. However, folding area is common in currently proposed methods and may be amplified during recursion, which brings challenges especially for the use of weight sharing techniques. This problem can be reduced by taking a careful look on the regularization terms, or designing a base network that guarantees invertibility."}, {"section_title": "Conclusion", "text": "We present a deep recursive cascade architecture and evaluate its performance in deformable medical image registration. Experiments based on diverse evaluation metrics demonstrate that this architecture achieves significant gains over state-of-the-art methods on both liver and brain datasets. With the superiority of good performance, the general applicability of the unsupervised method, and being independent of the base network, we expect that the proposed architecture can potentially be extended to all deformable image registration tasks."}]