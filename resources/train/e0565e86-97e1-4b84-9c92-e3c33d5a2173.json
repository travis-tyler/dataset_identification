[{"section_title": "Abstract", "text": "Decoding, i.e. prediction from brain images or signals, calls for empirical evaluation of its predictive power. Such evaluation is achieved via cross-validation, a method also used to tune decoders' hyper-parameters. This paper is a review on cross-validation procedures for decoding in neuroimaging. It includes a didactic overview of the relevant theoretical considerations. Practical aspects are highlighted with an extensive empirical study of the common decoders in within-and across-subject predictions, on multiple datasets -anatomical and functional MRI and MEG-and simulations. Theory and experiments outline that the popular \"leave-one-out\" strategy leads to unstable and biased estimates, and a repeated random splits method should be preferred. Experiments outline the large error bars of cross-validation in neuroimaging settings: typical confidence intervals of 10%. Nested cross-validation can tune decoders' parameters while avoiding circularity bias. However we find that it can be favorable to use sane defaults, in particular for non-sparse decoders.\nhttp://dx."}, {"section_title": "Introduction: decoding needs model evaluation", "text": "Decoding, i.e. predicting behavior or phenotypes from brain images or signals, has become a central tool in neuroimage data processing (Haynes and Rees, 2006; Haynes, 2015; Kamitani and Tong, 2005; Norman et al., 2006; Varoquaux and Thirion, 2014; Yarkoni and Westfall, 2016) . In clinical applications, prediction opens the door to diagnosis or prognosis (Mouro-Miranda et al., 2005; Fu et al., 2008; Demirci et al., 2008) . To study cognition, successful prediction is seen as evidence of a link between observed behavior and a brain region (Haxby et al., 2001) or a small fraction of the image (Kriegeskorte et al., 2006) . Decoding power can test if an encoding model describes well multiple facets of stimuli (Mitchell et al., 2008; Naselaris et al., 2011) . Prediction can be used to establish what specific brain functions are implied by observed activations (Schwartz et al., 2013; Poldrack et al., 2009) . All these applications rely on measuring the predictive power of a decoder.\nAssessing predictive power is difficult as it calls for characterizing the decoder on prospective data, rather than on the data at hand. Another challenge is that the decoder must often choose between many different estimates that give rise to the same prediction error on the data, when there are more features (voxels) than samples (brain images, trials, or subjects). For this choice, it relies on some form of regularization, that embodies a prior on the solution (Hastie et al., 2009) . The amount of regularization is a parameter of the decoder that may require tuning. Choosing a decoder, or setting appropriately its internal parameters, are important questions for brain mapping, as these choice will not only condition the prediction performance of the decoder, but also the brain features that it highlights.\nMeasuring prediction accuracy is central to decoding, to assess a decoder, select one in various alternatives, or tune its parameters. The topic of this paper is cross-validation, the standard tool to measure predictive power and tune parameters in decoding. The first section is a primer on cross-validation giving the theoretical underpinnings and the current practice in neuroimaging. In the second section, we perform an extensive empirical study. This study shows that crossvalidation results carry a large uncertainty, that cross-validation should be performed on full blocks of correlated data, and that repeated random splits should be preferred to leave-one-out. Results also yield guidelines for decoder parameter choice in terms of prediction performance and stability."}, {"section_title": "A primer on cross-validation", "text": "This section is a tutorial introduction to important concepts in cross validation for decoding from brain images."}, {"section_title": "Cross-validation: estimating predictive power", "text": "In neuroimaging, a decoder is a predictive model that, given brain images X, infers an external variable y. Typically, y is a categorical variable giving the experimental condition or the health status of subjects. The accuracy, or predictive power, of this model is the expected error on the prediction, formally: \nwhere is a measure of the error, most often 1 the fraction of instances for which y y \u2260 pred ground truth . Importantly, in Eq. (1), \uf045 denotes the expectation, ie the average error that the model would make on infinite amount of data generated from the same experimental process.\nIn decoding settings, the investigator has access to labeled data, ie brain images for which the variable to predict, y, is known. These data are used to train the model, fitting the model parameters, and to estimate its predictive power. However, the same observations cannot be used for both. Indeed, it is much easier to find the correct labels for brain images that have been seen by the decoder than for unknown images. 2 The challenge is to measure the ability to generalize to new data.\nThe standard approach to measure predictive power is crossvalidation: the available data is split into a train set, used to train the model, and a test set, unseen by the model during training and used to compute a prediction error (Fig. 1 ). Chapter 7 of Hastie et al. (2009) contains a reference on statistical aspects of cross-validation. Below, we detail important considerations in neuroimaging.\nIndependence of train and test sets. Cross-validation relies on independence between the train and test sets. With time-series, as in fMRI, the autocorrelation of brain signals and the temporal structure of the confounds imply that a time separation is needed to give truly independent observations. In addition, to give a meaningful estimate of prediction power, the test set should contain new samples displaying all confounding uncontrolled sources of variability. For instance, in multisession data, it is harder to predict on a new session than to leave out part of each session and use these samples as a test set. However, generalization to new sessions is useful to capture actual invariant information. Similarly, for multi-subject data, predictions on new subjects give results that hold at the population level. However, a confound such as movement may correlate with the diagnostic status predicted. In such a case the amount of movement should be balanced between train and test set.\nSufficient test data. Large test sets are necessary to obtain sufficient power for the prediction error for each split of cross-validation. As the amount of data is limited, there is a balance to strike between achieving such large test sets and keeping enough training data to reach a good fit with the decoder. Indeed, theoretical results show that cross-validation has a negative bias on small dataset (Arlot and Celisse, 2010, Section 5.1) as it involves fitting models on a fraction of the data. On the other hand, large test sets decrease the variance of the estimated accuracy (Arlot and Celisse, 2010, Section 5.2) . A good cross-validation strategy balances these two opposite effects. Neuroimaging papers often use leave one out cross-validation, leaving out a single sample at each split. While this provides ample data for training, it maximizes test-set variance and does not yield stable estimates of predictive accuracy. 3 From a decision-theory standpoint, it is preferable to leave out 10% to 20% of the data, as in 10-fold cross-validation (Hastie et al., 2009, chap. 7.12; Breiman and Spector, 1992; Kohavi, 1995) . Finally, it is also beneficial to increase the number of splits while keeping a given ratio between train and test set size. For this purpose k-fold can be replaced by strategies relying on repeated random splits of the data (sometimes called repeated learning-testing 4 (Arlot and Celisse, 2010) or ShuffleSplit (Pedregosa et al., 2011) ). As discussed above, such splits should be consistent with the dependence structure across the observations (using eg a LabelShuffleSplit), or the training set could be stratified to avoid class imbalance (Raamana et al., 2015) . In neuroimaging, good strategies often involve leaving out sessions or subjects."}, {"section_title": "Hyper-parameter selection", "text": "A necessary evil: one size does not fit all. In standard statistics, fitting a simple model on abundant data can be done without the tricky choice of a meta-parameter: all model parameters are estimated from the data, for instance with a maximum-likelihood criterion. However, in high-dimensional settings, when the number of model parameters is much larger than the sample size, some form of regularization is needed. Indeed, adjusting model parameters to best fit the data without restriction leads to overfit, ie fitting noise (Hastie et al., 2009, chap. 7) . Some form of regularization or prior is then necessary to restrict model complexity, e.g. with low-dimensional PCA in discriminant analysis (Chen et al., 2006) , or by selecting a small number of voxels with a sparse penalty (Yamashita, 2008; Carroll et al., 2009 ). If too much regularization is imposed, the ensuing models are too constrained by the prior, they underfit, ie they do not exploit the full richness of the data. Both underfitting and overfitting are detrimental to predictive power and to the estimation of model weights, the decoder maps. Choosing the amount of regularization is a typical bias-variance problem: erring on the side of variance leads to overfit, while too much bias leads to underfit. In general, the best tradeoff is a dataspecific choice, governed by the statistical power of the prediction task: the amount of data and the signal-to-noise ratio.\nNested cross-validation. Choosing the right amount of regularization can improve the predictive power of a decoder and controls the appearance of the weight maps. The most common approach to set it is to use cross-validation to measure predictive power for various choices of regularization and to retain the value that maximizes predictive power. Importantly, with such a procedure, the amount of regularization becomes a parameter adjusted on data, and thus the predictive performance measured in the corresponding cross-validation loop is not a reliable assessment of the predictive performance of the model. The standard procedure is then to refit the model on the available data, and test its predictive performance on new data, called a validation set. Given a finite amount of data, a nested cross-validation procedure can Test set Train set Full data Fig. 1 . Cross-validation: the data is split multiple times into a train set, used to train the model, and a test set, used to compute predictive power.\n1 For multi-class problems, where there is more than 2 categories in y, or for unbalanced classes, a more elaborate choice is advisable, to distinguish misses and false detections for each class.\n2 A simple strategy that makes no errors on seen images is simply to store all these images during the training and, when asked to predict on an image, to look up the corresponding label in the store. 3 One simple aspect of the shortcomings of small test sets is that they produce unbalanced dataset, in particular leave-one-out for which there is only one class represented in the test set. 4 Also related is bootstrap CV, which may however duplicate samples inside the training set of the test set.\nbe employed: the data are repeatedly split in a validation set and a decoding set to perform decoding. The decoding set itself is split in multiple train and test sets with the same validation set, forming an inner \"nested\" cross-validation loop used to set the regularization hyper-parameter, while the external loop varying the validation set is used to measure prediction performance -see Fig. 2 . Model averaging. Choosing the best model in a family of good models is hard. One option is to average the predictions of a set of suitable models (Penny et al., 2007 , chap. 35, Kuncheva and Rodr\u00edguez, 2010 , Hoyos-Idrobo et al., 2015 ) -see Hastie et al. (2009, chap. 8) for a description outside of neuroimaging. A simple version of this idea is bagging (Breiman, 1996) : using bootstrap, random resamplings of the data, to generate many train sets and corresponding models, the predictions of which are then averaged. The benefit of these approaches is that if the errors of each model are sufficiently independent, they average out: the average model performs better and displays much less variance. With linear models often used as decoders in neuroimaging, model averaging is appealing as it boils down to averaging weight maps.\nTo benefit from the stabilizing effect of model averaging in parameter tuning, we can use a variant of both cross-validation and model averaging. 5 In a standard cross-validation procedure, we repeatedly split the data in train and test set and for each split, compute the test error for a grid of hyper-parameter values. However, instead of selecting the hyper-parameter value that minimizes the mean test error across the different splits, we select for each split the model that minimizes the corresponding test error and average these models across splits."}, {"section_title": "Model selection for neuroimaging decoders", "text": "Decoding in neuroimaging faces specific model-selection challenges. The main challenge is probably the scarcity of data relative to their dimensionality, typically hundreds of observations. 6 Another important aspect of decoding is that, beyond predictive power, interpreting model weights is relevant.\nCommon decoders and their regularization. Both to prefer simpler models and to facilitate interpretation, linear models are ubiquitous in decoding. In fact, their weights form the common brain maps for visual interpretation.\nThe classifier used most often in fMRI is the support vector machine (SVM) (Mouro-Miranda et al., 2005; Chen et al., 2006; LaConte et al., 2005) . However, logistic regressions (Log-Reg) are also often used (Ryali et al., 2010; Varoquaux et al., 2012; Chen et al., 2006; Yamashita, 2008; Rasmussen et al., 2012) . Both of these classifiers learn a linear model by minimizing the sum of a loss -a data-fit term-and a penalty p -the regularizing energy term that favors simpler models:\nwhere C is the regularization parameter that controls the biasvariance tradeoff: small C means strong regularization. The SVM and logistic regression model differ only by the loss used. For the SVM the loss is a hinge loss: flat and exactly zero for well-classified samples and with a misclassification cost increasing linearly with distance to the decision boundary. For the logistic regression, it is a logistic loss, which is a soft, exponentially-decreasing, version of the hinge (Hastie et al., 2009) . By far the most common regularization is the \u2113 2 penalty. Indeed, the common form of SVM uses \u2113 2 regularization, which we will denote SVM-\u2113 2 . Combined with the large zero region of the hinge loss, strong \u2113 2 penalty implies that SVMs build their decision functions by combining a small number of training images (see Fig. 3 ). Logistic regression is similar: the loss has no flat region, and thus every sample is used, but some very weakly. Another frequent form of penalty, \u2113 1 , imposes sparsity on the weights: a strong regularization means that the weight maps w are mostly comprised of zero voxels (see Fig. 4 ).\nParameter-tuning in neuroimaging. In neuroimaging, many publications do not discuss their choice of decoder hyper-parameters; while others state that they use the default value, e.g. C=1 for SVMs. Standard machine learning practice advocates setting the parameters by nested cross-validation (Hastie et al., 2009) . For non sparse, \u2113 2penalized models, the amount of regularization often does not have a strong influence on the weight maps of the decoder (see Fig. 4 ). Indeed, regularization in these models changes the fraction of input maps supporting the hyperplane (see 3). As activation maps for the same condition often have similar aspects, this fraction impacts weakly decoders' maps.\nFor sparse models, using the \u2113 1 penalty, sparsity is often seen as a means to select relevant voxels for prediction (Carroll et al., 2009; Ryali et al., 2010) . In this case, the amount of regularization has a very visible consequence on weight maps and voxel selection (see Fig. 4 ). Neuroimaging studies often set it by cross-validation (Carroll et al., 2009) , though very seldom nested (exceptions comprise Varoquaux et al., 2012) ). Voxel selection by \u2113 1 penalty on brain maps is unstable because neighboring voxels respond similarly and \u2113 1 estimators will choose somewhat randomly few of these correlated features (Varoquaux et al., 2012; Rondina et al., 2013) . Hence various strategies combining sparse models are used in neuroimaging to improve decoding performance and stability. Averaging weight maps across cross-validation folds (Hoyos-Idrobo et al., 2015; Varoquaux et al., 2012) , as described above, is interesting as it stays in the realm of linear models. Relatedly, Grosenick et al. (2013) report median weight maps, thought they do not correspond to weights in a predictive model. Consensus between sparse models over data perturbations gives theoretically better feature selection (Meinshausen and B\u00fchlmann, 2010) . In fMRI, it has been used to screen voxels before The SVM learns a separating line between the two classes. In a weakly regularized setting (large C, this line is supported by few observations -called support vectors-, circled in black on the figure, while in a strongly-regularized case (small C), it is supported by the whole data. 5 The combination of cross-validation and model averaging is not new (see e.g.\n(Hoyos-Idrobo et al., 2015)), but it is seldom discussed in the neuroimaging literature. It is commonly used in other areas of machine learning, for instance to set parameters in bagged models such as trees, by monitoring the out-of-bag error (e.g. in the scikit-learn library (Pedregosa et al., 2011) ). 6 While in imaging neuroscience, hundreds of observations seems acceptably large, it is markedly below common sample sizes in machine learning. Indeed, data analysis in brain imaging has historically been driven by very simple models while machine learning has tackled rich models since its inception.\nfitting linear models (Rondina et al., 2013; Varoquaux et al., 2012) or to interpret selected voxels (Yamashita, 2008) . For model selection in neuroimaging, prediction performance is not the only relevant metric and some control over the estimated model weights is also important. For this purpose, LaConte et al. (2003), Strother et al. (2002) , Rasmussen et al. (2012) advocate using a tradeoff between prediction performance and stability of decoder maps. Stability is a proxy for estimation error on these maps, a quantity that is not accessible without knowing the ground truth. While very useful it gives only indirect information on estimation error: it does not control whether all the predictive brain regions were found, nor whether all regions found are predictive. Indeed, a decoder choosing its maps independently from the data would be very stable, though likely with poor prediction performance. Hence the challenge is in finding a good prediction-stability tradeoff , Rasmussen et al., 2012 ."}, {"section_title": "Empirical studies: cross-validation at work", "text": "Here we highlight practical aspects of cross-validation in brain decoding with simple experiments. We first demonstrate the variability of prediction estimates on MRI, MEG, and simulated data. We then explore how to tune decoders parameters."}, {"section_title": "Experiments on real neuroimaging data", "text": "A variety of decoding datasets. To achieve reliable empirical conclusions, it is important to consider a large number of different neuroimaging studies. We investigate cross-validation in a large number of 2-class classification problems, from 7 different fMRI datasets (Appendix E gives an exhaustive list). We decode visual stimuli within subject (across sessions) in the classic Haxby dataset (Haxby et al., 2001) , and across subjects using data from Duncan et al. (2009) . We discriminate across subjects i) affective content with data from Wager et al. (2008) , ii) visual from narrative with data from Moran et al. (2012) , iii) famous, familiar, and scrambled faces from a visual-presentations dataset (Henson et al., 2002) , and iv) left and right saccades in data from Knops et al. (2009) . We also use a nonpublished dataset, ds009 from openfMRI (Poldrack et al., 2013) . All between-subject predictions are performed on trial-by-trial response (Z-maps) computed in a first-level GLM. Finally, beyond fMRI, we predict gender from VBM maps using the OASIS data (Marcus et al., 2007) . Note that these tasks cover many different settings, range from easy discriminations to hard ones, and (regarding fMRI) recruit very different systems with different effect size and variability. The number of observations for decoding varies between 80 (40 per class) and 400, with balanced classes.\nThe results and figures reported below are for all these datasets. We use more inter-subject than intra-subject datasets. However 15 classification tasks out of 31 are intra-subject (see Table A1 ). In addition, when decoding is performed intra-subject, each subject gives rise to a cross-validation. Thus in our cross-validation study, 82% of the data points are for intra-subject settings.\nAll MR data but (Knops et al., 2009 ) are openly available from openfMRI (Poldrack et al., 2013) or OASIS (Marcus et al., 2007) . Standard preprocessing and first-level analysis were applied using SPM and Nipy (details in F.1). Data were variance-normalized 7 and spatially-smoothed at 6 mm FWHM for fMRI data and 2 mm FWHM for VBM data.\nMEG data. Beyond MR data, we assess cross-validation strategies for decoding of event-related dynamics in neurophysiological data. We analyze magneteoencephalography (MEG) data from a working-memory experiment of the Human Connectome Project (Larson-Prior et al., 2013) . We perform intra-subject decoding in 52 subjects with two runs, using a temporal window on the sensor signals (as in Sitt et al. (2014) ).\nHere, each run serves as validation set for the other run. We consider two-class decoding problems, focusing on either the image content (faces vs tools) or the functional role in the task (target vs low-level and high-level distractors). This yields in total four classification analyzes per subject. For each trial, the feature set is a time window constrained to 50 ms before and 300 ms after event onset, emphasizing visual components. We use the cleaned single-trial outputs from the HCP \"tmegpreproc\" pipeline. MEG data analysis was performed with the MNE-Python software (Gramfort et al., 2013b . See F.3 for details on the analysis.\nExperimental setup. Our experiments make use of nested crossvalidation for an accurate measure of prediction power. As in Fig. 2 , we repeatedly split the data in a validation set and a decoding set passed on to the decoding procedure (including parameter-tuning for experiments in 3.3 and 3.4). To get a good measure of predictive power, we choose large validation sets of 50% of the data, respecting the sample dependence structure (leaving out subjects, or sessions). We use 10 different validation sets that each contribute a data point in results.\nWe follow standard decoding practice in fMRI (Pereira et al., 2009 ). We use univariate feature selection on the training set to select the strongest 20% of voxels and train a decoder on the selected features. As a choice of decoder, we explore classic linear models: SVM and logistic regression with \u2113 1 and \u2113 2 penalty 8 . We use scikit-learn for all decoders (Pedregosa et al., 2011; Abraham et al., 2014) .\nIn a first experiment, we compare decoder performance estimated by cross-validation on the decoding set, with performance measured on the validation set. In a second experiment, we investigate the use of cross-validation to tune the model's regularization parameter, either using the standard refitting approach, or averaging as described in Section 2.2, as well as using the default C=1 choice of parameter, and a value of C=1000. (Haxby et al., 2001) . Left: with a log-reg \u2113 1 , more regularization (small C) induces sparsity. Right: with an SVM \u2113 2 , small C means that weight maps are a combination of a larger number of original images, although this has only a small visual impact on the corresponding brain maps. 7 Dividing each voxel/sensor time series by its standard deviation. 8 Similar decoders adding a regularization that captures spatio-temporal correlations among the voxels are well suited for neuroimaging (Gramfort et al., 2013a; Michel et al., 2011; Grosenick et al., 2013; Karahano\u011flu et al., 2013) . Also, random forests, based on model averaging discussed above, have been used in fMRI (Langs et al., 2011; Kuncheva and Rodr\u00edguez, 2010) . However, this review focuses on the most common practice. Indeed, these decoders entail computational costs that are intractable given the number of models fit in the experiments."}, {"section_title": "Results: cross-validation to assess predictive power", "text": "Reliability of the cross-validation measure. Considering that prediction error on the large left-out validation set is a good estimate of predictive power, we use it to assess the quality of the estimate given by the nested cross-validation loop. Fig. 5 shows the prediction error measured by cross-validation as a function of the validation-set error across all datasets and validation splits. It reveals a small negative bias: as predicted by the theory, cross-validation is pessimistic compared to a model fit on the complete decoding set. However, models that perform poorly are often reported with a better performance by cross-validation. Additionally, cross-validation estimates display a large variance: there is a scatter between estimates by cross-validation and on the validation set.\nDifferent cross-validation strategies. Fig. 6 summarizes the discrepancy between prediction accuracy measured by cross validation and on the validation set for different cross-validation strategies: leaving one sample out, leaving one block of data out -where blocks are the natural units of the experiment, sessions or subjects-and random splits leaving out 20% of the blocks of data with 3, 10, and 50 repetitions.\nIdeally, a good cross-validation strategy would minimize this discrepancy. We find that leave-one-sample out is very optimistic in within-subject settings. This is expected, as samples are highly correlated. When leaving out blocks of data that minimize dependency between train and test set, the bias mostly disappears. The remaining discrepancy appears mostly as variance in the estimates of prediction accuracy. For repeated random splits of the data, the larger the number of splits, the smaller the variance. Performing 10 to 50 splits with 20% of the data blocks left out gives a better estimation than leaving successively each blocks out, at a fraction of the computing cost if the number of blocks is large. While intra and inter subject settings do not differ strongly when leaving out blocks of data, intra-subject settings display a larger variance of estimation as well as a slight negative bias. These are likely due to non-stationarity in the time-series, e.g. scanner drift or loss of vigilance. In inter-subject settings, heterogeneities may hinder prediction ), yet a cross-validation strategy with multiple subjects in the test set will yield a good estimate of prediction accuracy. 9 Other modalities: MEG and simulations. We run the experiments on the MEG decoding tasks and the simulations.\nWe generate simple simulated data that mimic brain imaging to better understand trends and limitations of cross-validation. Briefly, we generate data with 2 classes in 100 dimensions with Gaussian noise temporally auto-correlated and varying the separation between the class centers (more details in Appendix A). We run the experiments on a decoding set of 200 samples.\nThe results, displayed in Fig. 7 , reproduce the trends observed on MR data. As the simulated data is temporally auto-correlated, leaveone-sample-out is strongly optimistic. Detailed analysis varying the separability of the classes (Appendix A) shows that cross-validation tends to be pessimistic for high-accuracy situations, but optimistic when prediction is low. For MEG decoding, the leave-one-out procedure is on trials, and thus does not suffer from correlations between samples. Cross-validation is slightly pessimistic and display a large variance, most likely because of inhomogeneities across samples. In both situations, leaving blocks of data out with many splits (e.g. 50) gives best results."}, {"section_title": "Results on cross-validation for parameter tuning", "text": "We now evaluate cross-validation as a way of setting decoder hyperparameters.\nTuning curves: opening the black box. Fig. 8 is a didactic view on the parameter-selection problem: it gives, for varying values of the meta-parameter C, the cross-validated error and the validation error for a given split of validation data. 10 The validation error is computed Fig. 5 . Prediction error: cross-validated versus validation set. Each point is a measure of predictor error in the inner cross-validation loop (10 splits, leaving out 20%), or in the left-out validation set. The dark line is an indication of the tendency, using a lowess local regression. The two light lines indicate the boundaries above and below which fall 5% of the points. They are estimated using a Gaussian kernel density estimator, with a bandwidth set by the Scott method, and computing the CDF along the y direction. Fig. 6 . Cross-validation error: different strategies. Difference between accuracy measured by cross-validation and on the validation set, in intra and inter-subject settings, for different cross-validation strategies: leave one sample out, leave one block of samples out (where the block is the natural unit of the experiment: subject or session), or random splits leaving out 20% of the blocks as test data, with 3, 10, or 50 random splits. For intersubject settings, leave one sample out corresponds to leaving a session out. The box gives the quartiles, while the whiskers give the 5 and 95 percentiles. 9 The probability of correct classification for each subject is also an interesting quantity, though it is not the same thing as the prediction accuracy measured by cross-validation (Hastie et al., 2009, sec 7.12) . It can be computed by non-parametric approaches, e.g. bootstrapping the train set (Platt, 1999) , or from a posterior probability given by certain classifiers. 10 For the figure, we compute cross-validated error with a leave-one-session-out on the first 6 sessions of the scissor / scramble Haxby data, and use the last 6 sessions as a validation set.\non a large sample size on left out data, hence it is a good estimate of the generalization error of the decoder. Note that the parameter-tuning procedure does not have access to this information. The discrepancy between the tuning curve, computed with cross-validation on the data available to the decoder, and the validation curve, is an indication of the uncertainty on the cross-validated estimate of prediction power. Test-set error curves of individual splits of the nested cross-validation loop show plateaus and a discrete behavior. Indeed, each individual test set contains dozens of observations. The small combinatorials limit the accuracy of error estimates. Fig. 8 also shows that non-sparse -\u2113 2 -penalized-models are not very sensitive to the choice of the regularization parameter C: the tuning curves display a wide plateau. 11 However, for sparse models (\u2113 1 models), the maximum of the tuning curve is a more narrow peak, particularly so for SVM. A narrow peak in a tuning curve implies that a choice of optimal parameter may not alway carry over to the validation set.\nImpact of parameter tuning on prediction accuracy. Cross-validation is often used to select regularization hyper-parameters, eg to control the amount of sparsity. On Fig. 9 , we compare the various strategies: refitting with the best parameters selected by nested crossvalidation, averaging the best models in the nested cross-validation, or simply using either the default value of C or a large one, given that tuning curves can plateau for large C.\nFor non-sparse models, the figure shows that tuning the hyperparameter by nested cross validation does not lead in general to better prediction performance than a default choice of hyper-parameter. Detailed investigations (Fig. A3) show that these conclusions hold well across all tasks, though refitting after nested cross-validation is beneficial for good prediction accuracies, i.e. when there is either a large signal-to-noise ratio or many samples.\nFor sparse models, the picture is slightly different. Indeed, high values of C lead to poor performance -presumably as the models are overly sparse-, while using default value C=1, refitting or averaging models tuned by cross-validation all perform well. Investigating how these compromises vary as a function of model accuracy (Fig. A3 ) reveals that for difficult decoding situations (low prediction) it is preferable to use the default C=1, while in good decoding situations, in is beneficial to tune C by nested cross-validation and rely on model averaging, which tends to perform well and displays less variance."}, {"section_title": "Results: stability of model weights", "text": "Impact of parameter tuning on stability. The choice of regularization parameter also affects the stability of the weight maps of the classifier. Strongly regularized maps underfit, thus depending less on the train data, which may lead to increased stability. We measure stability of the decoder maps by computing their correlation across different choices of validation split for a given task. Fig. 10 summarizes the results on stability. For all models, sparse and non-sparse, model averaging does give more stable maps, followed by refitting after choosing parameters by nested cross-validation. Sparse models are much less stable than non-sparse ones (Varoquaux et al., 2012) .\nPrediction power -stability tradeoff. The choice of decoder with the best predictive performance might not give the most stable weight maps, as seen by comparing Figs. 9 and 10. Fig. 11 shows the prediction-stability tradeoff for different decoders and different parameter-tuning strategies. Overall, SVM and logistic-regression perform similarly and the dominant effect is that of the regularization: nonsparse, \u2113 2 -penalized, models are much more stable than sparse, \u2113 1penalized, models. For non-sparse models, averaging stands out as giving a large gain in stability albeit with a decrease of a couple of percent in prediction accuracy compared to using C=1 or C=1000, which gives good prediction and stability ( Figs. 9 and 11 ). With sparse models, averaging offers a slight edge for stability and, for SVM performs also well in prediction. C=1000 achieves low stability (Fig. 10) , low prediction power (Fig. 9) , and a poor tradeoff. D.2 shows trends on datasets where the prediction is easy or not. For non-sparse models, averaging brings a larger gain in stability when prediction accuracy is large. Conversely, for sparse models, it is more beneficial to average in case of poor prediction accuracy. Fig. 7 . Cross-validation error: non-MRI modalities. Difference between accuracy measured by cross-validation and on the validation set, for MEG data and simulated data, with different cross-validation strategies. Detailed simulation results in Appendix A. Fig. 8 . Tuning curves for SVM \u2113 2 , logistic regression \u2113 2 , SVM \u2113 1 , and logistic regression \u2113 1 , on the scissors / scramble discrimination for the Haxby dataset (Haxby et al., 2001) . The thin colored lines are test scores for each of the internal cross-validation folds, the thick black line is the average of these test scores on all folds, and the thick dashed line is the score on leftout validation data. The vertical dashed line is the parameter selected on the inner cross-validation score.\nNote that these experimental results are for common neuroimaging settings, with variance-normalization and univariate feature screening."}, {"section_title": "Discussion and conclusion: lessons learned", "text": "Decoding seeks to establish a predictive link between brain images and behavioral or phenotypical variables. Prediction is intrinsically a notion related to new data, and therefore it is hard to measure. Crossvalidation is the tool of choice to assess performance of a decoder and to tune its parameters. The strength of cross-validation is that it relies on few assumptions and probes directly the ability to predict, unlike other model-selection procedurese.g. based on information theoretic or Bayesian criteria. However, it is limited by the small sample sizes typically available in neuroimaging. 12 An imprecise assessment of prediction. The imprecision on the estimation of decoder performance by cross-validation is often underestimated. Empirical confidence intervals of cross-validated accuracy measures typically extend more than 10 points up and down ( Fig. 5 and  6 ). Experiments on MRI (anatomical and functional), MEG, and simulations consistently exhibit these large error bars due to data scarcity. Such limitations should be kept in mind for many MVPA practices that use predictive power as a form of hypothesis testinge.g. searchlight (Kriegeskorte et al., 2006) or testing for generalization (Knops et al., 2009 )-and it is recommended to use permutation to define the null hypothesis (Kriegeskorte et al., 2006) . In addition, in the light of cross-validation variance, methods publications should use several datasets to validate a new model.\nGuidelines on cross-validation. Leave-one-out cross-validation should be avoided, as it yields more variable results. Leaving out blocks of correlated observations, rather than individual observations, is crucial for non-biased estimates. Relying on repeated random splits with 20% of the data enables better estimates with less computation by Fig. 9 . Prediction accuracy: impact of the parameter-tuning strategy. For each strategy, difference to the mean prediction accuracy in a given validation split. Fig. 10 . Stability of the weights: impact of the parameter-tuning strategy: for each strategy, difference to the mean stability of the model weights, where the stability is the correlation of the weights across validation splits. As the stability is a correlation, the unit is a different between correlation values. The reference is the mean stability across all models for a given prediction task. 12 There is a trend in inter-subject analysis to acquire databases with a larger number of subjects, e.g. ADNI, HCP. Conclusions of our empirical study might not readily transfer to these settings. increasing the number of cross-validations without shrinking the size of the test set.\nParameter tuning. Selecting optimal parameters can improve prediction and change drastically the aspects of weight maps (Fig. 5) .\nHowever, our empirical study shows that for variance-normalized neuroimaging data, non-sparse decoders (\u2113 2 -penalized) are only weakly sensitive to the choice of their parameter, particularly for the SVM. As a result, relying on the default value of the parameter often outperforms parameter tuning by nested cross-validation. Yet, such parameter tuning tends to improve the stability of the maps. For sparse decoders (\u2113 1 -penalized), default parameters also give good prediction performance. However, parameter tuning with model averaging increases stability and can lead to better prediction. Note that it is often useful to variance normalize the data (see Appendix C).\nConcluding remarks. Evaluating a decoder is hard. Cross-validation should not be considered as a silver bullet. Neither should prediction performance be the only metric. To assess decoding accuracy, best practice is to use repeated learning-testing with 20% of the data left out, while keeping in mind the large variance of the procedure. Any parameter tuning should be performed in nested cross-validation, to limit optimistic biases. Given the variance that arises from small samples, the choice of decoders and their parameters should be guided by several datasets.\nOur extensive empirical validation (31 decoding tasks, with 8 datasets and almost 1000 validation splits with nested cross-validation) shows that sparse models, in particular \u2113 1 SVM with model averaging, give better prediction but worst weight-maps stability than non-sparse classifiers. If stability of weight maps is important, non-sparse SVM with C=1 appears to be a good choice. Further work calls for empirical studies of decoder performance with more datasets, to reveal factors of the dataset that could guide better the choice of a decoder for a given task."}, {"section_title": "Acknowledgments", "text": "This work was supported by the EU FP7/2007-2013 under grant agreement no. 604102 (HBP). Computing resources were provided by the NiConnect project (ANR-11-BINF-0004_NiConnect) and an Amazon Webservices Research Grant. The authors would like to thank the developers of nilearn, 13 scikit-learn 14 and MNE-Python 15 for continuous efforts in producing high-quality tools crucial for this work. In addition, we acknowledge useful feedback from Russell Poldrack and the anonymous reviewers."}, {"section_title": "Appendix A. Experiments on simulated data", "text": ""}, {"section_title": "A.1. Dataset simulation", "text": "We generate data with samples from two classes, each described by a Gaussian of identity covariance in 100 dimensions. The classes are centered respectively on vectors \u03bc \u03bc ( ,\u2026, ) and \u03bc \u03bc (\u2212 , \u2026, \u2212 ) where \u03bc is a parameter adjusted to control the separability of the classes. With larger \u03bc the expected predictive accuracy would be higher. In addition, to mimic the time dependence in neuroimaging data we apply a Gaussian smoothing filter in the sample direction on the noise (\u03c3 = 2). Code to reproduce the simulations can be found on https:// github.com/GaelVaroquaux/cross_val_experiments.\nWe produce different datasets with predefined separability by varying 16 \u03bc in (.05, .1, .2 ). Fig. A1 shows two of these configurations."}, {"section_title": "A.2. Experiments: error varying separability", "text": "Unlike with a brain imaging datasets, simulations open the door to measuring the actual prediction performance of a classifier, and therefore comparing it to the cross-validation measure.\nFor this purpose, we generate a pseudo-experimental data with 200 train samples, and a separate very large test set, with 10,000 samples. The train samples correspond to the data available during a neuroimaging experiment, and we perform cross-validation on these. We apply the decoder on the test set. The large number of test samples provides a good measure of prediction power of the decoder (Arlot and Celisse, Fig. 11 . Predictionstability tradeoff. The figure summarize Figs. 9 and 10, reporting the stability of the weights, relative to the split's average, as a function of the delta in prediction accuracy. It provides an overall summary, with errors bar giving the first and last quartiles (more detailed figures in Appendix D). Fig. A1 . Simulated data for different levels of separability between the two classes (red and blue circles). Here, to simplify visualization, the data are generated in 2D (2 features), unlike the actual experiments, which are performed on 100 features. Top: The feature space. Bottom: Time series of the first feature. Note that the noise is correlated timewise, hence successive data points show similar shifts. 13 https://github.com/nilearn/nilearn/graphs/contributors. 14 https://github.com/scikit-learn/scikit-learn/graphs/contributors. 15 https://github.com/mne-tools/mne-python/graphs/contributors. 16 The values we explore for \u03bc were chosen empirically to vary classification accuracy from 60% to 90%. 2010). We use the same decoders as for brain-imaging data and repeat the whole procedure 100 times. For cross-validation strategies that rely on sample blocks -as with sessions-, we divide the data in 10 continuous blocks.\nResults. Fig. A2 summarizes the cross-validation measures for different values of separability. Beyond the effect of the cross-validation strategy observed on other figures, the effect of the separability, i.e. the true prediction accuracy is also visible. Setting aside the leave-onesample-out cross-validation strategy, which is strongly biased by the correlations across the samples, we see that all strategies tend to be biased positively for low accuracy and negatively for high accuracy. This observation is in accordance with trends observed on Fig. 5. Appendix B. Comparing parameter-tuning strategies Fig. A3 shows pairwise comparisons of parameter-tuning strategies, in sparse and non-sparse situations, for the best-performing options. In particular, it investigates when different strategies should be preferred. The trends are small. Yet, it appears that for low predictive power, setting C=1 in non-sparse models is preferable to cross-validation while for high predictive power, cross-validation is as efficient. This is consistent with results in Fig. 5 showing that cross-validation is more reliable to measure prediction error in situations with a good accuracy than in situations with a poor accuracy. Similar trends can be found when comparing to C=1000. For sparse models, model averaging can be preferable to refitting. We however find that for low prediction accuracy it is favorable to use C=1, in particular for logistic regression.\nNote these figures show points related to different studies and classification tasks. The trends observed are fairly homogeneous and there are not regions of the diagram that stand out. Hence, the various conclusions on the comparison of decoding strategies are driven by all studies. Fig. A2 . Cross-validation measures on simulations. Prediction accuracy, as measured by cross-validation (box plots) and on a very large test set (vertical lines) for different separability on the simulated data and for different cross-validation strategies: leave one sample out, leave one block of samples out (where the block is the natural unit of the experiment: subject or session), or random splits leaving out 20% of the blocks as test data, with 3, 10, or 50 random splits. The box gives the quartiles, while the whiskers give the 5 and 95 percentiles. Note that here leave-one-block-out is similar of 10 splits of 10% of the data. Fig. A3 . Comparing parameter-tuning strategies on prediction accuracy. Relating pairs of tuning strategies. Each dot corresponds to a given dataset, task, and validation split. The line is an indication of the tendency, using a lowess non-parametric local regression. The top row summarizes results for non-sparse models, SVM \u2113 2 and logistic regression \u2113 2 ; while the bottom row gives results for sparse models, SVM \u2113 1 and logistic regression \u2113 1 ."}, {"section_title": "Appendix C. Results without variance-normalization", "text": "Results without variance normalization of the voxels are given in Fig. A4 for the correspondence between error measured in the inner cross-validation loop, Fig. A5 for the effect of the choice of a parametertuning strategy on the prediction performance, and Fig. A6 for the effect on the stability of the weights.\nCross-validation on non variance-normalized neuroimaging data is not more reliable than on variance-normalized data (Fig. A4 ). However, parameter tuning by nested cross-validation is more important than on variance-normalized data for good prediction (Fig.  A5) . This difference can be explained by the fact that variance normalizing makes dataset more comparable to each others, and thus a default value of parameters is more likely to work well.\nIn conclusion, variance normalizing the data can be important, in particular with non-sparse SVM.\nAppendix D. Stability-prediction trends D.1. Details on stability-prediction results Fig. 11 summarizes the effects of the decoding strategy on the predictionstability tradeoff. On Fig. A7 , we give the data points that underly this summary. Fig. 11 captures the effects of the decoding strategy across all datasets. However, some classification tasks are easier or more stable than others."}, {"section_title": "D.2. Prediction and stability interactions", "text": "We give an additional figure, Fig. A8 , showing this interaction between classification performance and the best decoding strategy in terms of weight stability. The main factor of variation of the prediction accuracy is the choice of dataset, i.e. the difficulty of the prediction task.\nHere again, we see that the most important choice is that of the penalty: logistic regression and SVM have overall the same behavior. In terms of stability of the weights, higher prediction accuracy does correspond to more stability, except for overly-penalized sparse model (C=1000). For non-sparse models, model averaging after cross-validation is particularly beneficial in good prediction situations. Table A1 lists all the studies used in our experiments, as well as the specific prediction tasks. In the Haxby dataset (Haxby et al., 2001) we use various pairs of visual stimuli, with differing difficulty. We excluded pairs for which decoding was unsuccessful, such as scissors versus bottle)."}, {"section_title": "Appendix E. Details on datasets used", "text": "Appendix F. Details on preprocessing F.1. fMRI data Intra-subject prediction. For intra-subject prediction, we use the Haxby dataset (Haxby et al., 2001) as provided from the PyMVPA (Hanke et al., 2009 ) website -http://dev.pymvpa.org/datadb/ haxby2001.html. Details of the preprocessing are not given in the Fig. A5 . Impact of the parameter-tuning strategy on the prediction accuracy without feature standardization: for each strategy, difference to the mean stability of the model weights across validation splits. . Predictionstability tradeoff. This figures gives the data points behind 12, reporting the stability of the weights, relative to the split's average, as a function of the delta in prediction accuracy. Each point is corresponds to a specific prediction task in our study. Fig. A8 . Predictionstability tradeoff. The figure reports for each dataset and task the stability of the weights as a function of the prediction accuracy measured on the validation set, with the different choices of decoders and parameter-tuning strategy. The line is an indication of the tendency, using a lowess local regression. The stability of the weights is the correlation across validation splits. Fig. A6 . Impact of the parameter-tuning strategy on stability of weights without feature standardization: for each strategy, difference to the mean stability of the model weights across validation splits."}, {"section_title": "Table A1", "text": "The different datasets and tasks. We report the prediction performance on the validation test for parameter tuning by 10 random splits followed by refitting using the best parameter. A9 . Performance of each decoding strategy and each dataset. The plot is a \"parallel coordinate plot\": each lines denotes a dataset and the different x positions denote different decoding strategies. original paper, beyond the fact that no spatial smoothing was performed. We have not performed additional preprocessing on top of this publicly-available dataset, aside from spatial smoothing with an isotropic Gaussian kernel, FWHM of 6 mm (nilearn 0.2, Python 2.7).\nInter-subject prediction. For inter-subject prediction, we use different datasets available on openfMRI (Poldrack et al., 2013) . For all the datasets, we performed standard preprocessing with SPM8 17 : in the following order, slice-time correction, motion correction (realign), corregistration of mean EPI on subject's T1 image, and normalization to template space with unified segmentation on the T1 image. The preprocessing pipeline was orchestrated through the Nipype processing infrastructure (Gorgolewski et al., 2011) . For each subject, we then performed session-level GLM with a design according to the individual studies, as described in the openfMRI files, using Nipy (version 0.3, Python version 2.7) (Millman and Brett, 2007) ."}, {"section_title": "F.2. Structural MR data", "text": "For prediction from structural MR data, we perform Voxel Based Morphometry (VBM) on the Oasis dataset (Marcus et al., 2007) . We use SPM8 with the following steps: segmentation of the white matter/ grey matter/CSF compartiments and estimation of the deformation fields with DARTEL (Ashburner and Friston, 2011) . The inputs for predictive models is the modulated grey-matter intensity. The corresponding maps can be downloaded with the dataset-downloading facilities of the nilearn software (function nilearn.datasets.-fetch_oasis_vbm)."}, {"section_title": "F.3. MEG data", "text": "The magneteoencephalography (MEG) data is from an N-back working-memory experiment made available by the Human Connectome Project (Larson-Prior et al., 2013) . Data from 52 subjects and two runs was analyzed using a temporal window approach in which all magnetic fields sampled by the sensor array in a fixed time interval yield one variable set (see for example (Sitt et al., 2014) for event related potentials in electroencephalography). Here, each of the two runs served as validation set for the other run. For consistency, twoclass decoding problems were considered, focussing on either the image content (faces VS tools) or the functional role in the working memory task (target VS low-level and high-level distractors). This yielded in total four classification analyses per subject. For each trial, the time window was then constrained to 50 ms before and 300 ms after event onset, emphasizing visual components.\nAll analyses were based on the cleaned single-trial outputs obtained from the HCP \"tmegpreproc\" pipeline which provides cleaned segmented sensor space data. The MEG data that were recorded with a wholehead MAGNES 3600 (4D Neuroimaging, San Diego, CA) magnetometer system in a magnetically shielded room. Contamination by environmental magnetic fields was accounted for by computing the residual MEG signal from concomitant recordings of reference gradiometers and magnetometers located remotely from the main sensor array. Data were bandpass filtered between 1.3 and 150 Hz using zerophase forward and everse Butterworth filters. Notch filters were then applied at (59-61/119-121 Hz) to attenuate line noise artefacts. Data segments contaminated by remaining environmental or system artifacts were detected using a semi-automatic HCP pipeline that takes into account the local and global variation as well as the correlation structure of the data. Independent component analysis based on the FastICA algorithm was then used to estimate and suppress spatial patterns of cardiac and ocular artifacts. Artifact related components were identified in a semi-automatic fashion assisted by comparisons with concomitantly recorded electrocardiogram (ECG) and electroocu-logram (EOG). These components were then projected out from the data. Depending on the classification of bad channels performed by the HCP pipelines, the data contained fewer than 248 sensors. For details on the HCP pipelines see Larson-Prior et al. (2013) and the HCP reference manual. The MEG data were accessed through the MNE-Python software (Gramfort et al., 2013b and the MNE-HCP library https://github.com/mne-tools/mne-hcp."}, {"section_title": "Appendix G. Performance on each classification task", "text": "The prediction accuracy results presented in the various figures are differential effects removing the contribution of the dataset. In Fig. A9 , we present for each decoding strategy the prediction accuracy on all datasets.\nWe can see that the variations of prediction accuracy from one decoding strategy to another are mostly reported across datasets: the various lines are roughly parallel. One notable exception is SVM \u2113 1 with C=1000 for which some datasets show a strong decrease. Another, weaker, variation is the fact that \u2113 1 models tend to perform better on the Haxby dataset (our source of intra-subject classification tasks). This good performance of sparse models could be due to the intra-subject settings: sparse maps are less robust to inter-subject variability. However, the core messages of the paper relative to which parameter-tuning strategy to use are applicable to intra and inter-subject settings. For non-sparse models, using a large value of C without parameter tuning is an overall safe choice, and for sparse models, model averaging, refitting, and a choice of C=1 do not offer a clear win, although model averaging is comparatively less variable."}]