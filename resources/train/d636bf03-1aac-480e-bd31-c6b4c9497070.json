[{"section_title": "Abstract", "text": "This manuscript considers the following \"graph classification\" question: Given a collection of graphs and associated classes, how can one predict the class of a newly observed graph? To address this question, we propose a statistical model for graph/ class pairs. This model naturally leads to a set of estimators to identify the class-conditional signal, or \"signal-subgraph,\" defined as the collection of edges that are probabilistically different between the classes. The estimators admit classifiers which are asymptotically optimal and efficient, but which differ by their assumption about the \"coherency\" of the signal-subgraph (coherency is the extent to which the signal-edges \"stick together\" around a common subset of vertices). Via simulation, the best estimator is shown to be not just a function of the coherency of the model, but also the number of training samples. These estimators are employed to address a contemporary neuroscience question: Can we classify \"connectomes\" (brain-graphs) according to sex? The answer is yes, and significantly better than all benchmark algorithms considered. Synthetic data analysis demonstrates that even when the model is correct, given the relatively small number of training samples, the estimated signal-subgraph should be taken with a grain of salt. We conclude by discussing several possible extensions."}, {"section_title": "INTRODUCTION", "text": "G RAPHS are emerging as a prevalent form of data representation in fields ranging from optical character recognition and chemistry [1] to neuroscience [2] . While statistical inference techniques for vector-valued data are widespread, statistical tools for the analysis of graph-valued data are relatively rare [1] . In this work, we consider the task of labeled graph classification: Given a collection of labeled graphs and their corresponding classes, can we accurately infer the class for a new graph? Note that we assume throughout that each vertex has a unique label, and that all graphs have the same number of vertices with the same vertex labels. The methods developed herein, however, can straightforwardly be relaxed to more general settings.\nWe propose and analyze a joint graph/class modelsufficiently simple to characterize its asymptotic properties, and sufficiently rich to afford useful empirical applications. This model admits a class-conditional signal encoded in a subset of edges, the signal-subgraph. Finding the signalsubgraph amounts to providing an understanding of the differences between the two graph classes. Moreover, borrowing a term from the compressive sensing literature [3] , [4] , we are interested in learning to what extent this signal is coherent, that is, to what extent are the signalsubgraph edges incident to a relatively small set of vertices. In other words, if the signal is sparse in the edges, then the signal-subgraph is incoherent; if it is also sparse in the vertices, then the signal-subgraph is coherent (we formally define these notions below). This graph-model based approach is qualitatively different from most previous approaches, which utilize only unique vertex labels or graph structure. In the former case, simply representing the adjacency matrix with a vector and applying standard machine learning techniques ignores graph structure (for instance, it is not clear how to implement a coherent signal-subgraph estimator in this representation). In the latter case, computing a set of graph invariants (such as clustering coefficient), and then classifying using only these invariants ignores vertex labels [1] , [5] , [6] .\nWhile some of the above approaches consider attributed vertices or edges, we are unable to find any that utilize both unique vertex labels and graph structure. The field of connectomics (the study of brain-graphs), however, is ripe with many examples of brain-graphs with vertex labels. In invertebrate brain-graphs, for example, often each neuron is named such that one can compare neurons across individuals of the same species [7] . In vertebrate neurobiology, while neurons are rarely named, \"neuron types\" [8] and neuroanatomical regions [9] are named. Moreover, a widely held view is that many psychiatric issues are fundamentally \"connectopathies\" [10] , [11] . For prognostic and diagnostic purposes, merely being able to differentiate groups of brain-graphs from one another is sufficient. However, for treatment, it is desirable to know which vertices and/or edges are malfunctioning such that therapy can be targeted to those locations. This is the motivating application for our work.\nWe demonstrate via theory, simulation, analysis of a neurobiological dataset (magnetic resonance-based connectome sex classification), and synthetic data analysis that utilizing graph structure can significantly enhance classification accuracy. However, the best approach for any particular dataset is not just a function of the model, but also the amount of data. Moreover, even when the model is true, given a relatively small sample size, the estimated signal-subgraph will often overlap with the truth, but not fully capture it. Nonetheless, the classifiers described below still significantly outperform the benchmarks."}, {"section_title": "METHODS", "text": ""}, {"section_title": "Setting", "text": "Let G G : ! G be a graph-valued random variable with samples G i . Each graph G \u00bc \u00f0V; E\u00de is defined by a set of V vertices, V \u00bc fv i g i2\u00bdV , where \u00bdV \u00bc f1; . . . ; V g, and a set of edges between pairs of vertices E V \u00c2 V . Let A : ! A be an adjacency matrix-valued random variable taking values a 2 A IR V \u00c2V , identifying which vertices share an edge. Let Y : ! Y be a discrete-valued random variable with samples y i . Assume the existence of a collection of n exchangeable samples of graphs and their corresponding classes from some true but unknown joint distribution: f\u00f0G G i ; Y i \u00deg i2\u00bdn $ exch: F G G;Y . Our aim (exploitation task) is to build a graph classifier that can take a new graph, G G, and correctly estimate its class, y, assuming that they are jointly sampled from some distribution, F \u00bc F G G;Y . Moreover, we are interested solely in graph classifiers that are interpretable with respect to the vertices and edges of the graph. In other words, nonlinear manifold learning, feature extraction, and related approaches are unacceptable. We adopt the common practice of identifying graphs with their adjacency matrices. We note, however, that operations available on the latter (addition, multiplication) are not intrinsic to the former."}, {"section_title": "Model", "text": "Consider the model, F G G;Y , which includes all joint distributions over graphs and classes under consideration:\nWe proceed via a hybrid generative-discriminative approach [12] whereby we describe a generative model and place constraints on the discriminant boundary.\nFirst, assume that each graph has the same set of uniquely labeled vertices so that all the variability in the graphs is in the adjacency matrix, which implies that\nthe set of all possible edges. Now, consider the generative decomposition F A;Y \u00bc F AjY F Y , and let F uvjy \u00bc F A uv jY \u00bcy and y \u00bc F Y \u00bcy . Third, assume the existence of a class-conditional difference, that is, F uvj0 6 \u00bc F uvj1 for some \u00f0u; v\u00de 2 E, and denote the edges satisfying this condition as the signal-subgraph, S \u00bc f\u00f0u; v\u00de 2 E : F uvj0 6 \u00bc F uvj1 g. Fourth, although the following theory and algorithms are valid for both directed and undirected graphs, for concreteness, assume that the graphs are simple graphs, that is, undirected, with binary edges, and lacking (self-)loops (so jEj \u00bc \u00f0 V 2 \u00de). Thus, the likelihood of an edge between vertex u and v is given by a Bernoulli random variable with a scalar probability parameter: Bern\u00f0A uv ; p uvjy \u00de. Together, these four assumptions imply the following model:\nwhere\nBern\u00f0a uv ; p uv \u00de; \u00f02\u00de\nand \u00bc fp p p p; ; Sg. The likelihood parameter is constrained such that each element must be between zero and one: p p p p 2 \u00f00; 1\u00de\n\u00f0 \u00de\u00c2jYj . The prior parameter, \u00bc \u00f0 1 ; . . . ; jYj \u00de, must have elements greater than or equal to zero and sum to one: y ! 0, P y y \u00bc 1. The signal-subgraph parameter is a nonempty subset of the set of possible edges, S E and S 6 \u00bc ;.\nWe consider up to two additional constraints on S. First, the size of the signal-subgraph may be constrained such that jSj s. Second, the minimum number of vertices onto which the collection of edges is incident to is constrained such that S \u00bc f\u00f0u; v\u00de : u [ v 2 Ug, where U is a set of signalvertices with jUj m. Edges in the signal-subgraph are called signal-edges. Note that given a collection of signaledges, the signal-vertex set may not be unique. While it may be natural to treat S as a prior, we treat it as a parameter of the model; the constraints, s and m, are considered hyperparameters.\nNote that given a specification of the class-conditional likelihood of each edge and class-prior, one completely defines a joint distribution over graphs and classes; the signal-subgraph is implicit in that parameterization. However, the likelihood parameters for all edges not in the signal-subgraph, p uvjy \u00bc p uv 8 y 2 Y; \u00f0u; v\u00de 6 2 S, are nuisance parameters, that is, they contain no class-conditional signal. When computing a relative posterior class estimate, these nuisance parameters cancel in the ratio."}, {"section_title": "Classifier", "text": "A graph classifier, h 2 H, is any function satisfying h : G ! Y. We desire the \"best\" possible classifier, h \u00c3 . To define best, we first choose a loss function, ' h : G \u00c2 Y ! IR \u00fe , specifically the 0 \u00c0 1 loss function:\nwhere IIf\u00c1g is the indicator function, equaling one whenever its argument is true and zero otherwise. Further, let risk, R : F \u00c2 H ! IR \u00fe , be the expected loss under the true distribution:\nThe Bayes optimal (best) classifier for a given distribution F minimizes risk. It can be shown that the classifier that maximizes the class-conditional posterior F Y jG G is optimal [13] :\nGiven the proposed model, (5) can be further factorized using the above four assumptions:\nBern\u00f0A uv ; p uvjy \u00de y :\nUnfortunately, Bayes optimal classifiers are typically unavailable. In such settings, it is therefore desirable to induce a classifier estimate from a set of training data. Formally, let T n \u00bc f\u00f0G G i ; Y i \u00deg i2\u00bdn denote the training corpus, where each graph-class pair is sampled exchangeably from the true but unknown distribution:\nGiven such a training corpus and an unclassified graph G, an induced classifier predicts the true (but unknown) class of G, b h : G \u00c2 \u00f0G \u00c2 Y\u00de n ! Y. When a model F G G;Y is specified, a beloved approach is a Bayes plugin classifier. Due to the above simplifying assumptions, the Bayes plugin classifier for this model is defined as follows: First, obtain parameter estimates \u00bc f\u015c;p p p p; g. Second, plug those estimates into the above equation. The result is a Bayes plugin graph classifier:\nwhere the Bernoulli probability is explicit. To implement such a classifier estimate, we specify estimators for S, , and p p p p.\nWe evaluate the classifier's finite sample properties using either held-out or leave-one-out misclassification performance, depending on whether the data is simulated or experimental, respectively. Formally, given C equally sized subsets of the data, fT 1 ; . . . ; T C g, the cross-validated error is given by\nGiven this definition, let L be the error of the classifier using only the prior estimates, and let L \u00c3 be the error for the Bayes optimal classifier. To determine whether a classifier is significantly better than \"chance\" (defined as the performance by a naive classifier), we randomly permute the classes of each graph n MC times, and then estimate a naive Bayes classifier using the permuted data, yielding an empirical distribution of chance misclassification performance. The p-value of a permutation test is the minimum fraction of Monte Carlo permutations that did better than the classifier of interest [15] .\nTo determine whether a pair of classifiers are significantly different, we compare the leave-one-out classification results using McNemar's test [16] ."}, {"section_title": "Estimators", "text": ""}, {"section_title": "Desiderata", "text": "We desire a sequence of estimators, b 1 ; b 2 ; . . . , that satisfy the following five desiderata, listed in no particular order:\nConsistency. An estimator is consistent (in some specified sense) if its sequence converges in the limit to the true value: lim n!1 b n \u00bc ."}, {"section_title": "2.", "text": "Robustness. An estimator is robust if the resulting estimate is relatively insensitive to small model misspecifications. Because the space of models is massive (uncountably infinite), it is intractable to consider all misspecifications, so we consider only a few of them, as described below.\n3. Quadratic complexity. Computational time complexity should be no more than quadratic in the number of vertices. 4. Interpretability. We desire that the parameters are interpretable with respect to a subset of vertices and/or edges. 5. Finite sample/empirical performance. At the end of the day, we are concerned with having a classifier that works to solve our applied problems."}, {"section_title": "Signal-Subgraph Estimators", "text": "Naively, one might consider a search over all possible signal-subgraphs by plugging each one in to the classifier and selecting the best performing option. This strategy is intractable because the number of signal-subgraphs scales superexponentially with the number of vertices (see Fig. 1 , left panel). Specifically, the number of possible edges in a simple graph with V vertices is\n, so the number of unique possible signal-subgraphs is 2 V 2 \u00f0 \u00de . Searching over all of them is sufficiently computationally taxing as to motivate the search for other alternatives.\nBefore proceeding, recall that we assume each edge is independent; thus, one can evaluate each edge separately (although treating edges independently is not necessarily advisable, consider the Stein estimator [14] ). Formally, consider a hypothesis test for each edge. The simple null hypothesis is that the class-conditional edge distributions are the same, so H 0 : F uvj0 \u00bc F uvj1 . The composite alternative hypothesis is that they differ, H A : F uvj0 6 \u00bc F uvj1 . Given such hypothesis tests, one can construct test statistics T \u00f0n\u00de uv : T n ! IR \u00fe . We reject the null in favor of the alternative whenever the value of the test statistic is greater than some critical-value: T \u00f0n\u00de uv \u00f0T n \u00de > c. We can therefore construct a significance matrix T T T T \u00bc 4 T \u00f0n\u00de uv , which is the sufficient statistic for the signal-subgraph estimators. Example test statistics include Fisher's and chi-squared, which will be discussed further below. Whichever test statistic one uses, the sufficient statistics are captured in a 2 \u00c2 jYj contingency table, indicating the number of times edge u; v was observed in each class. For example, the twoclass contingency table for each edge is given by Fig. 1 . Exhaustive searches for the signal-subgraph, even given severe constraints, are computationally intractable even for small graphs. The three panels illustrate the number of unique simple subgraphs as a function of the number of vertices V for the three different constraint types considered: unconstrained, edge constrained, and both edge and vertex constrained (coherent). Note the ordinates are all log scale. On the left is the unconstrained scenario, that is, all possible subgraphs for a given number of vertices. In the middle panel, each line shows the number of subgraphs with a fixed number of signal-edges, s, ranging from 10 to 100, incrementing by 10 with each line. The right panel shows the number of subgraphs for various fixed s and only a single signal-vertex, that is, all edges are incident to one vertex.\nFor simplicity, we will assume that jYj \u00bc 2 for the remainder, though the general case is relatively straightforward.\nIncoherent signal-subgraph estimators. Assume the size of the signal-subgraph, jEj \u00bc s, is known. The number of subgraphs with s edges on V vertices is given by dV s \u00c0 \u00c1 , also superexponential (see Fig. 1 , middle panel). Thus, searching them all is currently computationally intractable. When s is given under the independent edge assumption, one can choose the critical value a posteriori to ensure that only s edges are rejected under the null (that is, have significant class-conditional differences):\nIIfT \u00f0n\u00de uv < cg ! s:\nTherefore, an estimate of the signal-subgraph is the collection of s edges with minimal test statistics. Let T \u00f01\u00de < T \u00f02\u00de < \u00c1 \u00c1 \u00c1 < T \u00f0dV \u00de indicate the ordered test statistics (dropping the superscript indicating the number of samples for brevity). Then, the incoherent signal-subgraph estimator is given by b S n \u00f0s\u00de \u00bc fe \u00f01\u00de ; . . . ; e \u00f0s\u00de g, where e \u00f0u\u00de indicates the uth edge ordered by significance of its test statistic, T \u00f0u\u00de .\nNote that the number of distinct test-statistic values is typically much smaller than the number of possible settings of s; specifically, the number of unique test statistic values will be t min\u00f0jEj; \u00f0n 0 \u00fe 1\u00de\u00f0n 1 \u00fe 1\u00de\u00de. In practice, t is often be far less than either of the upper bounds, because not every edge has a unique contingency table. In such scenarios, certain settings of the hyperparameters will lead to \"ties,\" that is, edges that are equally valid under the assumptions. In such settings, we simply randomly choose edges satisfying the criterion.\nPseudocode for implementing the incoherent signalsubgraph estimator is provided in Algorithm 1, and MATLAB code is available from http://jovo.me. Algorithm 1. Pseudocode for estimating incoherent signal-subgraph. Input: T n and s Output: b S n \u00f0s\u00de 1: Compute test statistics T \u00f0n\u00de uv for all \u00f0u; v\u00de 2 E 2: Sort each edge according to its test-statistic rank,\nS n \u00f0s\u00de \u00bc fe \u00f01\u00de ; . . . ; e \u00f0s\u00de g, arbitrarily breaking ties as necessary.\nCoherent signal-subgraph estimators. In addition to the size of the signal-subgraph, also assume that each of the edges in the signal-subgraph are incident to one of m special vertices called signal-vertices. While this assumption further constrains the candidate sets of edges, the number of feasible sets still scales super exponentially (see Fig. 1 , right panel). Therefore, we again take a greedy approach.\nFirst, compute the significance of each edge as above, yielding ordered test statistics. Second, rank edges by significance with respect to each vertex, e k;\u00f01\u00de e k;\u00f02\u00de \u00c1 \u00c1 \u00c1 e k;\u00f0n\u00c01\u00de for all k 2 V. Third, initialize the critical value at zero, c \u00bc 0. Fourth, assign each vertex a score equal to the number of edges incident to that vertex more significant than the critical value,\nthe vertex significance scores, w \u00f01\u00de;c ! w \u00f02\u00de;c ! \u00c1 \u00c1 \u00c1 ! w \u00f0V \u00de;c . Sixth, check if there exist m vertices whose scores sum to greater than or equal the size of the signal-subgraph, s. That is, check whether the following optimization problem is satisfied:\nIf so, call the collection of s most significant edges from within that subset the coherent signal-subgraph estimate, b S n \u00f0s; m\u00de. If not, increase c and go back to step four. As above, we break ties arbitrarily. Pseudocode for implementing the coherent signal-subgraph estimator is provided in Algorithm 2, and MATLAB code is available from http://jovo.me. \nLet c c \u00fe 1 8:\nUpdate w c 9: end while 10: Let b S n \u00f0s; m\u00de be the collection of s edges from amongst those that satisfy (9) for the final value of c, arbitrarily breaking ties as necessary.\nCoherograms. In the process of estimating the incoherent signal-subgraph, one can build a \"coherogram.\" Each column of the coherogram corresponds to a different critical value c, and each row corresponds to a different vertex v. The \u00f0c; v\u00deth element of the coherogram w v;c is the number of edges incident to vertex v with test statistic larger than c. Thus, the coherogram gives a visual depiction of the coherence of the signal-subgraph (see Fig. 2 , right column, for some examples).\nTo evaluate absolute performance of the signal-subgraph estimators, we define \"miss-edge rate\" as the fraction of true edges missed by the signal-subgraph estimator:\nIIf\u00f0u; v\u00de 6 2 b S n g: \u00f014\u00de\nNote that when jSj is fixed, miss-edge rate is a sufficient statistic for all combinations of false/negative positive/ negative results. Further, we estimate the relative rate and relative efficiency to evaluate the relative finite sample properties of a pair of consistent estimators. The relative rate is simply \u00f01 \u00c0 R inc n \u00de=\u00f01 \u00c0 R coh n \u00de. Relative efficiency is the number of samples required for the coherent estimator to obtain the same rate as the incoherent estimator.\nA variety of test statistics are available for computing the edge-specific class-conditional signal, T \u00f0n\u00de uv . Fisher's exact test computes the probability of obtaining a contingency table equal to, or more extreme than, the table resulting from the null hypothesis: that the two classes have the same probability of sampling an edge. In other words, Fisher's exact test is the most powerful statistical test assuming independent edges [18] . This leads to the following lemma: Proof. Whenever p uvj0 6 \u00bc p uvj1 , the p-value of Fisher's exact test converges to zero, whereas whenever p uvj0 \u00bc p uvj1 , the distribution of p-values converges to the uniform distribution on \u00bd0; 1. Therefore, Fisher's exact test induces a consistent estimator of the signal-subgraph as n ! 1, assuming a fixed and finite V . Moreover, as V ! 1, as long as V =n ! 0, Fisher's exact test remains consistent [18] . t u\nWhile most powerful, computing Fisher's exactly is computationally taxing. Fortunately, the chi-squared test is asymptotically equivalent to Fisher's test, and therefore shares those convergence properties [18] . Even the absolute difference of MLEs, jb p MLE uvj1 \u00c0 b p MLE uvj0 j, which is trivially easy to compute, is asymptotically equivalent to Fisher's [18] and therefore consistent. Moreover, the signal-subgraph estimators are robust to a variety of model misspecifications. Specifically, as long as all the marginal probabilities of all the edges in the signal-subgraph are different between the two classes, p uvj1 6 \u00bc p uvj0 , and the constraints are upperbounds on the true values, s 0 ! s and m 0 ! m, then any consistent test statistic will yield a consistent signalsubgraph estimator. Estimating the coherent signal-subgraph is more computationally time consuming than estimating the incoherent signal-subgraph. What is lost by computational time, however, is typically gained by finite sample efficiency whenever the model does not induce too much bias, as will be shown below."}, {"section_title": "Likelihood Estimators", "text": "The class-conditional likelihood parameters p uvjy are relatively simple. In particular, because the graphs are assumed to be binary, p uvjy is just a Bernoulli parameter for each edge in each class. The maximum likelihood estimator (MLE), which is simply the average value of each edge per class, is a principled choice:\nwhere P ijy i \u00bcy indicates the sum is over all training samples from class y. Unfortunately, the MLE has an undesirable property; in particular, if the data contain no examples of an edge in a particular class, then the MLE will be zero. If the unclassified graph exhibits that edge, then the estimated probability of it being from that class is zero, which is undesirable. We therefore consider a smoothed estimator\nwhere we let n \u00bc 1=\u00f010n\u00de."}, {"section_title": "Prior Estimators", "text": "The priors are the simplest. The prior probabilities are Bernoulli, and we are concerned only with the case where jYj ( n, so the maximum likelihood estimators suffice:\nwhere n y \u00bc P i2\u00bdn IIfy i \u00bc yg."}, {"section_title": "Hyperparameter Selection", "text": "The signal-subgraph estimators require specifying the number of signal-edges s, as well as the number of signalvertices m for the coherent classifier. In both cases, the number of possible values of finite. In particular, s 2 \u00bdd V and m 2 \u00bdV . Thus, to select the best hyperparameters we implement cross-validation procedures (see Section 2.5.2 for details), iterating over \u00f0s; m\u00de 2s \u00c2m \u00bdd V \u00c2 \u00bdV . Note that when m \u00bc V , the coherent signal subgraph estimator reduces to the incoherent signal subgraph estimator. For all simulated data, we compare hyperparameter performance via a training and held-out set. For the real data application, we decided to use a leave-one-out cross-validation procedure due to the small sample size."}, {"section_title": "All Together", "text": "Putting the above pieces together, Algorithm 3 provides pseudocode for implementing our signal-subgraph classifiers. MATLAB code is available from the first author's website, http://jovo.me. "}, {"section_title": "Likelihoods and Priors", "text": "The likelihood and prior estimators will be evaluated with respect to robustness to model misspecifications, finite samples, efficiency, and complexity."}, {"section_title": "ESTIMATOR PROPERTIES", "text": ""}, {"section_title": "Likelihood and Prior Estimators", "text": "Lemma 3.1. b p uvjy as defined in (11) is an L-estimator.\nProof. Huber defines an L-estimator as an estimator that is a linear combination of (possibly nonlinear functions of) the order statistics of the measurements [17] . Indeed, b p uvjy is a thresholded function of the minimum, maximum, and mean.\nt u\nBecause L-estimators converge to the MLE, our estimators share the nice asymptotic properties of the MLE. Moreover, L-estimators are known to be robust to certain model misspecifications [17] . The prior estimators are MLEs, and therefore also consistent and efficient. Both prior and likelihood estimates are trivial to compute as closed-form analytic solutions are available for both."}, {"section_title": "Bayes Plugin Classifier", "text": "Lemma 3.3. The Bayes plug-in classifier, using the signalsubgraph, likelihood, and prior estimators described above, is consistent under the model defined by (2) .\nProof. A Bayes plugin classifier is a consistent classifier whenever the estimates that are plugged in are consistent [13] . Because the likelihood, prior, and signal-subgraph estimates are all consistent, the Bayes plugin classifier is also consistent. t u\nNote that naive Bayes classifiers often exhibit impressive finite sample performance due to their winning the biasvariance tradeoff relative to other classifiers [19] . In other words, even when edges are highly dependent, because marginal probability estimates are more efficient than joint probability estimates, an independent edge-based classifier will often outperform a classifier based on dependences."}, {"section_title": "SIMULATED EXPERIMENTS", "text": ""}, {"section_title": "Simulation Details", "text": "To better assess the finite sample properties of the signalsubgraph estimators, we conduct a number of simulated experiments. Consider the following homogeneous model: each simple graph has V \u00bc 70 vertices. Class 0 graphs are Erdos-Renyi with probability p for each edge; that is, f uvj0 \u00bc p 8 \u00f0u; v\u00de 2 E. Class 1 graphs are a mixture of two Erdos-Renyi models: all edges in the signal-subgraph have probability q, and all others have probability p, so that f uvj1 \u00bc q 8\u00f0u; v\u00de 2 S, and f uvj1 \u00bc p 8\u00f0u; v\u00de 2 EnS. The signalsubgraph is constrained to have m signal-vertices and s signal-edges. Let the class-prior probabilities be given by F Y \u00bc0 \u00bc and F Y \u00bc1 \u00bc 1 \u00c0 . Thus, the model is characterized by M V \u00f0m; s; ; p; q\u00de, where V is a constant, m and s are hyperparameters, and , p, and q are parameters."}, {"section_title": "A Simple Demonstration", "text": "To provide some insight with respect to the finite sample performance of the incoherent and coherent signalsubgraph estimators for this model, we run the following simulated experiments, with results depicted in Fig. 2 . In each row we sample from M 70 \u00f01; 20; 0:5; 0:1; 0:3\u00de (note that we are actually conditioning on the class-conditional sample size). Given these n samples, we compute the significance matrix (first column), which contains the sufficient statistics for both estimators. The incoherent estimator simply chooses the s most significant edges as the signal-subgraph (second column). The coherent estimator jointly estimates both the m signal-vertices and the s signal-edges incident to at least one of those vertices (third column). The coherogram shows the \"coherency\" of the data (fourth column).\nFrom this figure, one might notice a few tendencies. First, both the incoherent and coherent signal-subgraphs seem to converge to the true signal-subgraph. Second, while both estimators perform poorly with n < 16, the coherent estimator converges more quickly than the incoherent estimator. Third, the coherogram sharpens with additional samples, showing after only approximately 50 samples that this model is strongly coherent."}, {"section_title": "Quantitative Comparisons", "text": "To better characterize the relative performance of the two signal-subgraph estimators, Fig. 3 shows their performance as a function of the number of training samples, n, for the M 70 \u00f01; 20; 0:5; 0:1; 0:3\u00de model. The top panel shows the mean and standard error of the missed-edge rate-the fraction of edges incorrectly identified-averaged over 200 trials. For essentially all n, the coherent estimator (black solid line) performs better than the incoherent estimator (gray solid line). We also compare the performance of an ' 1 -penalized logistic regression classifier (\"lasso\" hereafter [20] ). As expected, the missed edge rate for the lasso (gray dashed line) and the incoherent classifier are about the same. The improvement in signal-edge detection of the coherent signal-subgraph estimator over the incoherent's and lasso's performance translates directly to improved classification performance (middle panel), where the plugin classifier using the coherent signal-subgraph estimator has a better misclassification rate than either the incoherent signal-subgraph classifier or the lasso for essentially all n. Note that the incoherent classifier also admits better performance than the lasso. This is expected-although they are very similar-the incoherent classifier was derived specifically for this joint graph/class model. For comparison purposes, the naive Bayes plugin classifier, that is, the classifier that assumes the whole graph is the signalsubgraph, is also shown (black dashed line). Note that the performance of all the classifiers is bounded above by L \u00bc 0:5 and below by L \u00c3 \u00bc 0:\nAn important aspect of any algorithm is compute time, both of training and testing. The signal-subgraph classifiers that we developed are very fast. Computations essentially amount to computing a test-statistic for all jEj edges, then sorting them. The parameter estimates of the likelihood and prior terms come directly from the same test-statistics used to obtain the significance of each edge. Thus, obtaining those estimates amounts to essentially computing a mean. On the other hand, the lasso classifier, which yields worse signal detection and misclassification rates than both our classifiers, requires an iterative algorithm for each value on the hyperparameter path [20] . Despite the fact that efficient computational schemes have been developed for searching the whole regularization path [21] , such iterative algorithms should be much slower than our classifiers.\nIndeed, the lower panel of Fig. 3 demonstrates that our MATLAB implementation of the signal-subgraph classifiers are approximately 10 times faster than MATLAB's lasso implementation. All the results shown in Fig. 3 include errorbars computed from 100 trials, each with 100 held-out samples, demonstrating that for these simulation parameters, the differences are highly significant. Although the quantitative results may vary for different implementations and different parameter settings, our expectation is that the qualitative results should be consistent. Because our classifiers have lower risk, better signal identification, and run an order of magnitude faster than the standard, we do not consider lasso in further simulations.\nThe above numerical results suggest that the coherent estimator achieves better signal-subgraph identification and classification performance than the incoherent estimator almost always, despite the fact that the computational time of the coherent classifier is almost identical. However, that result is a function of both the model M V (which includes the number of vertices) and the number of training samples n (there is a bias-variance tradeoff here, as always). Fig. 4 explicitly shows that the relative performance of an estimator for a particular model-M 30 \u00f01; 5; 0:5; 0:1; 0:2\u00dechanges as a function of the number of samples. More specifically, for small n, the incoherent estimator yields better performance, as indicated by the relative rate and relative efficiency being above one. However, with more samples, when the signal-subgraph is coherent, the coherent estimator will eventually outperform the incoherent one. At infinite samples, since both estimators are consistent, they will yield identical results: the truth.\nThus, to choose which estimator will likely achieve the best performance, knowledge of the model, M V \u00f0m; s; ; p; q\u00de, is insufficient; rather, both the model and the number of samples must be known a priori."}, {"section_title": "Estimating the Hyperparameters", "text": "In the above analyses, the hyperparameters, both the number of signal-edges s and signal-vertices m, were known. In practice while one might have a preliminary guess of the range of these hyperparameters, the optimal values will usually be unknown. We can, therefore, use a cross-validation technique to search over the space of all reasonable combinations of s and m, and choose the best performing combination. Fig. 5 shows one such simulation depicting several key features. The top panel shows the misclassification rate on held-out data as a function of the log of the assumed size of the signal-subgraph for the incoherent classifier. Although the true size is s \u00bc 20, the best performing estimate is b s inc \u00bc 23. This is a relatively standard result in model selection: The best performer will include a few extra dimensions because adding a few uninformative features is less costly than missing a few informative features [22] . This intuition is further reified by the U-shape of the misclassification curve on a log scale: Including many nonsignal-edges is less detrimental than excluding a few signal-edges.\nThe bottom panel shows the coherent performance by varying both m and s, which exhibits a \"banded\" structure, indicating that the performance is relatively robust to small changes in m. This banding likely results from the fact that the test statistics are identical for many edges, so therefore minor changes in the number of allowable edges are not expected to change performance much. The best performing m coh \u00bc 1 and b s coh \u00bc 24, suggesting that n was sufficiently large to correctly find the true signal-vertex, and further corroborating the \"better safe than sorry\" attitude to selecting the signal-edges."}, {"section_title": "MR CONNECTOME SEX CLASSIFICATION", "text": "A connectome is a brain-graph [23] . MR connectomes utilize multimodal magnetic resonance (MR) imaging to determine both the vertex and edge set for each individual [2] . This section investigates the utility of the classifiers developed above on data collected for the Baltimore Longitudinal Study of Aging, as described previously [24] . Briefly, 49 subjects (25 males, 24 females) underwent a diffusion-weighted MRI protocol. The Magnetic Resonance Connectome Automated Pipeline (MRCAP) was used to convert each subject's raw multimodal MR data into a connectome [25] (each connectome is a simple graph with 70 vertices and up to 70 2 \u00c0 \u00c1 \u00bc 2;415 edges). Lacking strong priors on either the number of signal-edges or signal-vertices in the signal-subgraph (or even whether a signal-subgraph exists), we searched over a large space of hyperparameters using leave-one-out cross-validated misclassification performance as our metric of success (Fig. 6) . The naive Bayes classifier-which assumes the signalsubgraph is the whole edge set, b\nS nb \u00bc E-performs marginally better than chance: b L nb \u00bc 0:41 (p-value % 0:05 assessed by a permutation test). With a relatively small number of incoherent edges-b s inc \u00bc 10-the incoherent classifier (top left panel) achieves b L inc \u00bc 0:27, significantly better than chance (p-value < 0:0007), but not significantly better than the naive Bayes classifier (using McNemar's test). The coherent classifier achieved a minimum of b L coh \u00bc 0:16 (top right and middle panels), significantly better than both chance and the naive Bayes classifier (p-values < 10 \u00c05 and < 0:004, respectively). This improved performance upon using the coherent classifier suggests that the signalsubgraph is at least approximately coherent. Using b m coh \u00bc 12 and b s coh \u00bc 360 from the best performing coherent classifier, we can estimate the signal-subgraph (bottom left). The coherogram suggests that, indeed, the signal is somewhat, but not entirely coherent (bottom right).\nWe next compare the performance of our classifiers on this MR connectome sex classification dataset to several other classifiers. First, a standard parametric classifier: lasso. We chose the regularization parameter via a 10-fold crossvalidation. Second, a nonparametric (distribution free) classifier: k n -nearest neighbor (kNN), which operates directly on graphs [26] . This kNN classifier uses the Frobenius norm distance metric. We tried all k 2 \u00bdn and simply report the best performance. The universal consistency of this kNN classifier is useful in assessing the algorithm complexity supported by this data. In particular, given enough samples, kNN will achieve optimal performance. Less than optimal performance therefore indicates that the sample size is not sufficiently large for this kNN classifier. Third, a graph invariant-based classifier. We computed six graph invariants for each graph: size, max degree, scan statistic, number of triangles, clustering coefficient, and average path length, normalized each to have zero mean and unit variance, and then used a kNN with ' 2 distance metric on the invariants. These particular invariants were chosen based on their desirable statistical properties [27] , [28] , [29] .\nDespite the small sample size, Table 1 demonstrates that the signal-subgraph classifier is significantly better than all the others, as assessed via a one-sided McNemar's test."}, {"section_title": "Model Evaluation", "text": "We investigate to what extent the above estimated signalsubgraph represents the true signal-subgraph. We address this question in two ways: 1) synthetic data analysis and 2) assumption checking."}, {"section_title": "Synthetic Data Analysis", "text": "For the synthetic data analysis, we generated data as follows: Given the above estimated signal-subgraph, for every edge not in b S n , let p uvj0 \u00bc p uvj1 \u00bc b p uv , where b p uv is the estimated edge probability averaging over all samples. For all edges in b S n , let p uvjy \u00bc b p uvjy . Set the priors according to the data as well: \u00bc b\n. Given this synthetic data model, we first generated 49 data samples, 25 from class 0 and 24 from class 1, and estimated the incoherent and coherent classifier performance on a single synthetic experiment (Fig. 7, top panels) . The performance of the classifiers on the synthetic data qualitatively mirrors that of the real data, suggesting some degree of model appropriateness. To assess what fraction of the edges in the estimated signal-subgraph were reliable, even assuming a true model, we then sampled up to 100 training samples (and 100 test samples), and computed the missed-edge rate (bottom left) and misclassification rate (bottom right) as a function of the number of samples. Given approximately 50 samples, the incoherent signalsubgraph estimator correctly identifies about 40 percent of the edges, whereas the coherent signal-subgraph estimator correctly identifies about 50 percent. This suggests that even if the model were true (which we doubt) we are justified in believing that only about half the edges in the estimated signal-subgraph are in the actual signal-subgraph. Despite our stated desideratum of interpretability of the resulting classifier in terms of correctly identifying the signal-edges and vertices, for data sampled from this assumed distribution, sample sizes of < 50 seem to be insufficient. That said, both missed-edge rate and misclassification rate exhibit a step-like function in performance: After about 50 samples, performance dramatically improves. This suggests that perhaps only a few more data points would be necessary to obtain greatly improved classification accuracy."}, {"section_title": "Model Checking", "text": "The assumption of independence between edges is 1) very useful for algorithms and analysis, and 2) almost certainly nonsense for real connectome data. Checking whether edges are independent is relatively easy. Fig. 8 shows the correlation coefficient between all pairs of edges in the estimated signal-subgraph from the neurobiological data. We used a spectral clustering algorithm [30] to more clearly highlight any significant correlations. Several groups of edges seem to be highly correlated. To assess significance, we compare the distribution of correlation coefficients with the distribution of correlation coefficients obtained from the synthetic data analysis. A two-sample Kolmogorov-Smirnov test shows that the two matrices are significantly different (p-value % 0), rejecting the null hypothesis that the edges in the real data are independent. This analysis further corroborates that making independence assumptions can be fruitful even when the data are dependent [19] ."}, {"section_title": "DISCUSSION", "text": ""}, {"section_title": "Summary", "text": "This work makes the following contributions: First, it introduces a novel graph/class model that admits rigorous Additionally, slightly more than 50 training samples seems to be sufficient for obtaining nearly perfect classification, suggesting that perhaps only a few more subjects would be sufficient to yield much greater classification performance.\nstatistical investigation. Moreover, it presents two approaches for estimating the signal-subgraph: The first using only vertex label information, the second also utilizing graph structure. The resulting estimators satisfy the five above mentioned desiderata (Section 2.4.1): (model) consistency, robust to model misspecifications, quadratic complexity, interpretability in terms of the vertices and edges, and state-of-the-art finite sample/empirical performance. Third, simulated data analysis indicates that neither approach dominates the other; rather, the best approach is a function of both the model and the amount of training data. And while the lasso classifier has similar error properties as our incoherent classifier, lasso's computational time is about an order of magnitude longer. Fourth, these classifiers are applied to an MR connectome sex classification dataset; the coherent classifier performs significantly better than a variety of benchmark classifiers. More specifically, the coherent classifier outperformed a pair of classifiers that use only vertex labels (the naive Bayes and Lasso classifiers) as well as a classifier that only uses structural information (the invariant-kNN classifier). Only the signal subgraph classifier and graph-kNN classifier use both vertex labels and graph structure. Since the graph-kNN classifier, however, is universally consistent, it has high variance and therefore takes much longer than the coherent classifier to converge to a good estimate.\nFifth, synthetic data analysis suggests that while we can use the signal-subgraph estimators to improve classification performance, we should not expect that all the edges in the estimated signal-subgraph will be the true signal-edges, even when the model is correct. Moreover, we might expect a drastic improvement in classification performance with only a few additional data samples. Finally, model checking suggests that the independent edge assumption does not fit the data well."}, {"section_title": "Related Work", "text": "Our signal-subgraph classifiers represent somewhat of a departure from previous work. Most graph classification algorithms come from the \"structural pattern recognition\" school of thought, lacking an explicit statistical model and associated provable properties (see [1, Section 2.1 and references therein] for an excellent review). On the other hand, most work on \"statistical pattern recognition\" begins by assuming the data to be classified are euclidean vectors [31] . Our work is a unification of the two. Moreover, because the sufficient statistics are essentially encoded in a matrix, our work can be related to recent developments in matrix decompositions. For example, sparse and lowrank matrix decompositions are close in spirit to our coherent signal subgraph estimators [32] , [33] , [34] . Note, however, that our coherent estimator is robust to signalvertices having a subset of its edges highly nonsignificant, that is, the coherent signal-subgraph estimator can be thought of as a sparse and locally low-rank decomposition."}, {"section_title": "Future Work", "text": "Collectively, the above analyses suggest a number of possible next steps. First, collect more data. Second, relax various assumptions, including the 1) independent edge assumption by considering conditionally independent edges [35] , [36] , [37] , 2) binary edge and two-class assumptions, and 3) uniquely labeled and identical vertices in each graph assumptions. Specifically, extension to situations for which none of the vertices are labeled [38] , [39] , only some subset of vertices are labeled [40] , [41] , [42] , or data are otherwise errorfully observed [43] are all avenues of future investigation. Third, transform a number of conjectures that have arisen due to these results into theorems. For instance, perhaps the misclassification rate is a monotonic function of the missed-edge rate. Fourth, (Bayesian) model-averaging to combine estimated signal-subgraphs instead of picking one might improve performance (perhaps at the cost of computational resources and interpretability).\nWe hope the proposed approaches will yield many applications. To that end, all the data and code used in this work is available from the author's website, http://jovo.me. . For more information on this or any other computing topic, please visit our Digital Library at www.computer.org/publications/dlib."}]