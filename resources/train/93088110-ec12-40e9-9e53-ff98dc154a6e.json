[{"section_title": "Abstract", "text": "Convolution Neural Network (CNN) recently have been adopted in several neuroimaging studies for diagnosis capturing disease-specific changes in the brain. While many of these methods are designed to work with images in R n exploiting regular structure of the domain, they are not wellsuited to analyze data with irregular structure such as brain connectivity. As there is significant interest in understanding the altered interactions between different brain regions that lead to neuro-disorders, it is important to develop datadriven methods that work with a population of graph data for traditional prediction tasks. In this regime, we propose a novel CNN-based framework with adaptive graph transforms to learn the most disease-relevant connectome feature maps which have the highest discrimination power across diagnostic categories. The backbone of our framework is a multi-resolution representation of the graph matrix which is steered by a set of wavelet-like graph transforms. In this context, our supervised graph learning framework outperforms conventional graph methods that predict diagnostic label only based on the underlying individual graph. Our extensive experiments on two real datasets of functional and structural brain networks show that our multi-resolution framework achieves significantly higher accuracy, precision and recall in predicting diagnostic labels and identifying disease-specific brain connectivities that are associated with brain disorders such as Attention-Deficit/Hyperactivity Disorder (ADHD) and Alzheimer's Disease (AD)."}, {"section_title": "Introduction", "text": "Consider a supervised learning setting where a population of graphs {G i } N i=1 with labels {y i } N i=1 are given for regression, classification or statistical inference tasks (without node signals). The overall goal here would be to learn a function f (G i ) that takes a graph G i as an input to accurately predict an outcome\u0177 i for the graph, i.e.,\u0177 i = f (G i ). This setting is more challenging than traditional image analyses that operate with data in R n , since individual graphs have arbitrary structure. However, with substantial set of Figure 1 . Example of multi-resolution representation of brain connectivity in different scales. First figure: original brain network, Second -Fourth: brain network at different scales (i.e., s 1 =1.2, s 2 =1.5 and s 3 =1. 7.) recent data that live in non-Euclidean spaces such as point clouds [21, 33] , 3D surface meshes [49, 23] , geophysical data [31] and social networks [22] , analyzing a population of networks incorporating their inherent topology is emerging in recent scopes of machine learning and computer vision communities. Such a setting is actually quite common in many brain imaging studies that deal with images or image-derived measures in complex domains such as cortical thickness on brain surfaces or brain connectivity, whose main goal is to identify \"interpretable\" disease specific variation in the brain [3, 44, 47] .\nMany neuroimaging studies operate with data from a population of cohort that can be stratified into two or more groups (e.g., diseased vs. control). Given images or imagederived measures acquired from the participants, after registering the images to a common template space (i.e., for voxel-wise correspondence across images), contrasting the different groups at each voxel over the whole brain identifies those regions in the brain that are affected by the variable of interest (e.g., disease or risk factors) [10, 24, 40] . While such regional brain analyses have a rich history of informing spatial variation from various brain diseases, they still suffer from sensitivity issues due to poor correlation between cognitive changes and pathological features from scanned images [17] . Recent studies motivate that characterizing changes in the brain connectivity or network (i.e., graph) that comprise several affected regions yield a better understanding of the brain over traditional spatial analyses [12, 27, 3] . Unfortunately, there exist few frameworks that are capable of performing traditional inference tasks (e.g., classification or regression) on such graph data.\nThe most critical challenge in the connectivity analysis tasks is that the data are in irregular structure. For regular images in R n , several methods utilize image filtering [41, 15, 18, 20] to increase sensitivity, which take advantage of the regular lattice structure of the domain. For signals defined in non-Euclidean spaces, e.g., a function f (n) that is defined on sampled points n (e.g., graph nodes), recent methods use convolutions on graphs that require special definition of data transformation such as wavelet transform on manifolds [7, 9, 30] . However, when the object of interest is the graph itself and not the signal on data points, the methods described above are not directly applicable. On the other hand, graph kernels embeds graphs directly into a vector space to adopt traditional classification methods that compare local substructures among graphs [14, 34, 37] . Unfortunately, typical kernel techniques are not adaptive and the results may significantly vary depending on the kernel types [42] . Alternative deep learning methods for graph objects such as [48, 38] lose interpretability in space particulary with dense graphs. In the end, there exist very few methods that are capable of adaptively transforming the graph data incorporating the inherent structure of the graphs to increase the sensitivity and maintain location-wise interpretability simultaneously. Especially in the medical imaging studies where the sample-size is small (typically up to only a few hundreds), such a method is highly appreciated when the focus is to detect even subtle changes in brain connectivity yet the data remain extremely high-dimensional.\nTo tackle the issues addressed above, we propose a new convolution neural network (CNN) framework for graph data that derives flexible multi-resolution features (an example shown in Fig. 1 ) that are highly capable of distinguishing graph from different classes. The core component of our CNN is an adaptive graph transform -we adopt ideas from harmonic analysis on graphs to define a wavelet-like transform that provides novel descriptors at multiple scales for a positive semi-definite (p.s.d.) matrix such as connectivity matrix. The transform yields coefficients by a linear combination of a kernel function (i.e., a band-pass filter) with scaling parameters and orthogonal basis, which shares commonality with traditional continuous wavelet transform that performs band-pass filtering at multiple scales in the frequency space [26] . With a non-linear activation function on the coefficients, we get a multi-resolution feature map of graphs that is trained for graph classification.\nIn the end, our CNN framework can that not only predict a label (i.e., a disease) of a graph (i.e., a brain network), but also identify which of the individual edges are significantly associated with the prediction. This edge identification is important considering our brain connectivity analysis application, since it will tell us which of the brain connectivities are significantly related to disease-specific variables. Parameterizing a kernel with the notion of scales enables efficient training on the scale parameter and accurate prediction. The main contributions of our work here are, 1) we propose a CNN framework for graphs that can efficiently train and predict labels for a given set of graphs, 2) the proposed algorithm can identify which of the edges in the graphs are significantly affecting the prediction, 3) we provide extensive empirical results on both real functional and structural brain connectivity data (Attention-Deficit/Hyperactivity Disorder (ADHD) dataset and Alzheimer's Disease (AD) dataset respectively) to validate our framework. Interestingly, the discoveries that we report in our experiments align with other on-going ADHD and AD studies suggesting that our findings are sound, and our framework has potential to be applied to the analyses of various other neurodegenerative diseases."}, {"section_title": "Preliminary: Multi-resolution on Graphs", "text": "Our method is built on the philosophy that multiresolution representation of data driven by convolution will provide a robust means for comparisons of the data from different classes. One of the fundamental approaches to derive the multi-resolution representation is to perform wavelet transform, and we provide a brief review of the wavelet transform and its extension on graphs which will be used to describe our framework in later sections."}, {"section_title": "Continuous Wavelet Transform", "text": "The concept of a wavelet transform is similar to that of Fourier transform, i.e., both transforms represent a signal as a linear combination of bases and corresponding coefficients. That is, Fourier transform uses sin() bases to transform an original signal to its Fourier coefficients, and a wavelet transform uses a mother wavelet \u03c8 as the basis, which is a localized and oscillating function. While the sin() for Fourier transform has infinite support and is localized in frequency space only, the wavelet bases \u03c8 is localized in both time and frequency [35] . A mother wavelet \u03c8 s,a has a scale parameter s and a translation parameter a as \u03c8 s,a (x) = 1 s \u03c8( x\u2212a s ) where s controls the dilation and a changes localization of \u03c8 s,a . The wavelet transform using \u03c8 s,a as the bases transforms f (x) as\nwhere W f (s, a) is the wavelet coefficient at scale s and at location a, and \u03c8 * is the complex conjugate of \u03c8. Using the coefficients W f (s, a) and the bases \u03c8 s,a , we obtain a wavelet expansion of f (x) as a linear combination of them. Interestingly, if we set\u03c8 s (x) = 1 s \u03c8 * ( \u2212x s ), the wavelet transform in (1) can be interpreted as a convolution as\nThe key in wavelet expansion is that the mother wavelets \u03c8 s at different scales behave as band-pass filters focusing on specific bandwidths in the frequency space. Such behavior offers the multi-resolution representations of the original signal capturing local contexts in various receptive fields."}, {"section_title": "Multi-resolution in Non-Euclidean Spaces", "text": "Defining a wavelet transform in the Euclidean setting (represented as a regular lattice) was convenient since one can easily design the shape of a mother wavelet for bases. However, in a non-Euclidean setting where the domain is irregular (e.g., a graph), it is difficult to define the key parameters for a mother wavelet such as scale and translation. This is because of the irregularity in the domain, e.g., the distance between vertices and the number of edges in a graph are not uniform, and thus makes it difficult to define a localized mother wavelet at a specific scale. Due to this issue, it has been difficult to adopt the traditional wavelet transform for analyses of data with arbitrary structure.\nThe breakthrough was to utilize a dual space. The key idea was to define a mother wavelet \u03c8 s in a simple 1D dual space (i.e., an analogue of frequency space) instead of the complex original domain. Recall that the wavelets are bandpass filters in the frequency space. Therefore, if we first construct a localized band-pass filter in the dual domain and transform it back to the original graph space, it would implement a localized mother wavelet on the graph vertices at a specific scale. Such process requires 1) a localized kernel function (i.e., band-pass filter) and 2) orthogonal bases for graphs to define the dual space. Specifically in [13] , spectral graph theory was used to define an orthogonal transform.\nA graph G = {V, E} defined by a vertex set V and an edge set E (with corresponding edge weights e) is typically represented as a form of matrix. Given |V | = N , an adjacency matrix A N \u00d7N is defined by the connections among the vertices, i.e., the non-zero a i,j in A represents the connection between the i-th and j-th vertices. A degree matrix D N \u00d7N is a diagonal matrix where the i-th diagonal is the sum of edge weights connected to the i-th vertex. Subtracting these two matrices defines a graph Laplacian as L = D \u2212 A, which is a positive semi-definite (p.s.d.), symmetric and self-adjoint operator. The eigendecomposition of L yields eigenvalues \u03bb l \u2265 0 and eigenvectors u l where l = 1, \u00b7 \u00b7 \u00b7 N , where u l are orthonormal. The u l can be used to define the graph Fourier transform which offers the transform of a signal/measurement on graph nodes/vertices to the frequency domain a\u015d\nwheref (l) is the resultant graph Fourier coefficient. Then, a mother wavelet \u03c8 s can be constructed in the graph Fourier space as a kernel function k() (i.e., localized band-pass filter), and localized on a graph node n by a dirac delta function \u03b4 n through the inverse transform. Using \u03b4 n , u l = u * l (n), the mother wavelet \u03c8 s,n at vertex n at scale s is defined as\nwhere s manages dilation of \u03c8 s . Using \u03c8 as the bases, the wavelet transform for f (n) on graph nodes is defined as\nwhich yields wavelet coefficients W f (s, n). Following the reformulation in (4), this operation in (7) can be also viewed as a convolution which will be a key concept for convolution neural network for \"graphs\" to be introduced later."}, {"section_title": "Multi-resolution Neural Network Framework for Graphs", "text": "In the problem posed in this paper, we assume that a set of graphs are provided with a label y assigned for each graph G, and each graph is represented as its adjacency matrix form A. Here, we consider undirected graph setting whose each positive element a ij denotes the edge weight (i.e., measure of association) between the i-th and j-th nodes, while zero elements denote no connection between two different nodes. In the following, we introduce a novel transform for graph matrices and use it to design a convolution neural network that predicts labels\u0177 for graphs G."}, {"section_title": "Multi-resolution View of Graphs", "text": "Consider a graph (e.g., brain network) represented as an adjacency matrix A and its Laplacian L. In (6), the eigenvectors from L and a kernel function k() were used to define a wavelet basis that is used to derive multi-resolution representation of a function f (n) defined on graph nodes. On the other hand, in our case, we do not have a function f (n) and need a means to define \"multi-resolution view for edges\", which will differentiate our method from others previous works [16, 7] . In the following, we choose to continue with graph Laplacian to define a novel graph transform since it is a p.s.d. operator whose eigenvalues are all greater than or equal to 0 and their eigenvector are orthonormal. An outerproduct of the eigenvectors will be used as bases for the transform which are still orthonormal.\nFor a given graph, its corresponding Laplacian representation L can be decomposed with eigenvalues and eigenvectors in the following way,\nwhere U = [u 0 , u 1 , \u00b7 \u00b7 \u00b7 , u N \u22121 ] and \u039b is a diagonal matrix whose l-th diagonal element is \u03bb l . Equation (6) suggests defining scaling in a dual space, hence we define a basis as\nWe use this \u03a8 s to transform the Laplacian L as \u03b2 L (s) = L, \u03a8s (10)\nwhere \u03b2 L (s) is the resultant coefficient matrix at scale s.\nx dx < \u221e, the original graph Laplacian can be perfectly reconstructed via an inverse transformation.\nProof. Projecting the coefficients \u03b2 L (s) back to the original domain, we get\nThe Lemma above follows the traditional admissibility condition in the continuous wavelet transform [26] integrating multi-resolution wavelet coefficients over the scale s, and let us concretely define multi-resolution representation of L at different scales s. Focusing on a specific scale s, the representation of L s then becomes\nThe shapes of k() will determine the shape of waveletlike basis for the L and its multi-resolution views. In the later sections, we will use this transform to derive novel representations of a graph which will be used to define a CNN framework for graphs."}, {"section_title": "Fast Approximation of Matrix Transform", "text": "The transform in 3.1 requires eigendecompostion of a graph Laplacian (or estimating partial set of eigenvectors) which is computationally burdening. It may become a bottleneck when a graph has large number of nodes or there are multiple graphs matrices to transform. This is especially true considering our future applications where we will process multiple graphs to perform classification or regression. We therefore suggest an approximation of the transform in (18) that significantly reduces computation with marginal error inspired by the approach in [13] .\nLet's assume g(\u039b) = \u039bk(s\u039b) 2 and\u039b = 2 \u03bbmax \u039b \u2212 I N since the largest eigenvalue of a normalized graph Laplacian is bounded at 2. Then,\u039b = \u039b \u2212 I N and g(\u039b) = g(\u039b \u2212 I N ).\nIf we expand g(\u039b) at I N , then we get\nConsidering that the elements of\u039b are in the range [-1, 1], we assume there exists a positive K where if n > K,\u039b n \u2192 0. Then g(\u039b) can be further approximated as\nSince U \u039b m U T = (U \u039bU T ) m , L s now can be written as\nwhereL = L \u2212 I N \u00d7N . Using this approximation for the matrix transform, we can make our framework (to be introduced in section 3.3) more efficient and practical to be used in various application domains where the graph size is large or there are a number of graphs to transform."}, {"section_title": "Multi-resolution Graph Neural Network", "text": "Based on the transform introduced in section 3.1, we propose Multi-resolution Graph Neural Network (MGNN) which is a novel convolution neural network framework that utilizes multi-scale representation of graphs (not the signal on the nodes) for classification of graph data. Fig.2 illustrates the overall pipeline of our MGNN, which demonstrates two main components (i.e., convolution and fully connected (FC) layers) in the MGNN.\n\u2022 Convolution layer: When a graph is inputted to this layer, it returns multi-resolution representations of the graph using the transform in (18) as a tensor, i.e., |s| \u00d7 N \u00d7 N where |s| is the total number of scales. The convolution layer contains |s| units that represent different resolution of the graph representation. \u2022 FC Layer: this component is a Deep Neural Network (DNN) classifier that takes the multi-resolution features of a graph as an input and predicts its class label. It is a fully connected layer with hidden layers, and connected to L output units (i.e., output layer) where L is the number of available classes. The values computed at each output unit, when normalized, represent the probability of an input belong to a specific class.\nThe schematic of the MGNN is given in Fig. 2 and it is trained to learn two sets of parameters: 1) scale parameters s that define the optimal resolutions of a graph for a classification task, and 2) weights W h associated with the edges between the layers in DNN. One note is that we are not performing pooling which is quite common in many CNN architectures. While it is important to increase efficiency of the algorithm, however without an invertable method for pooling, we want to maintain spatial interpretability especially for neuroimaging applications."}, {"section_title": "Training MGNN", "text": "Given a training set with N G number of individual graphs G with corresponding labels y, the learning process consists of feedforward and backpropagation steps. In the feedforward propagation of MGNN, a graph G is inputted to the neural network as a form of graph Laplacian, and the probability that the G belongs to a particular class is computed at the output layer. Suppose we are given an input graph G with N vertices and a set of initial scales s. First, using the operation in (18) , the input G is transformed to L s . Since each L s is represented as a matrix and when there are |s| of them, these L s are combined to consist a tensor as M = L 1 \u222a L 2 \u222a \u00b7 \u00b7 \u00b7 \u222a Ls \u222a \u00b7 \u00b7 \u00b7 \u222a L |s| (24) which is a feature map M that consists a hidden layer.\nIn the first layer of DNN module with T hidden units, at each t-th hidden unit, the learned features in hidden units are linearly combined with corresponding weights in the first layer of DNN as\nwhere m spq represents a feature in multi-scale graph representation M (i.e., an element at (p, q) in s-th scale) and w h t,spq denotes the weight on a connection between a hidden unit m spq to the t-th hidden unit of the following layer. In the middle of the FC layer, we used leaky Rectified Linear Unit (leaky-Relu) as an activation function for the z t in each hidden layer in DNN. In the output layer of DNN, a soft-max function was utilized to get the final outcome o l for the l-th output unit.\nOnce the output o l is obtained from the feedforward system above, an error can be computed between the o l and the target value y l , i.e., a label with one-hot-encoding for the input graph. In our framework, we used cross-entropy as a measure of classification error as follows: (26) where N G and L are the total number of graphs and the total number of available classes respectively, and y il and o il represents target value and the predicted output at l-th output unit of i-th input sample respectively. Our framework \"adaptively\" learns scale parameters s for novel graph representations and W h in the FC layer by primarily minimizing the classification error in (26) . We backpropagate this error to update these parameters. In a traditional wavelet transform, the s is fixed to yield a few theoretical guarantees, however, we will freely explore different aspects of s to find the optimal resolutions with the smallest loss. Additional regularizations for these parameters will be discussed in a later section.\nWith the derivatives of error function with respect to connections between different layers in the MGNN, we can further write the gradient of total error function as\nwhere \u2207J i (s, W h ) is the gradient calculated based on the i-th input graph, and this gradient will be used for gradient descent with regularizers described in the following section."}, {"section_title": "Regularization in MGNN", "text": "In order to avoid the overfitting (especially with small sample size) and achieve desirable properties in the learned parameters, we impose the following constraints in our model. First of all, we assume that not all edges in the graphs are responsible for prediction of class labels, rather only a few of them are highly associated with the variable of interest. This is a natural assumption considering our neuroimaging experiment that will follow later, where changes due to a brain disorder usually do not manifest over the whole brain but sparsely appear in different ROIs in the brain. We therefore impose an 1 -norm constraint to the first layer of W h which includes the fully connected weights. We expect that this constraint will set many of the elements in the first layer of W h to zeros and identify the edges that are significantly related the prediction of class labels. Unlike the sparsity property of the first layer of W h , we expect s to be smooth in a reasonable range so that we obtain a multi-resolution view of the graph instead of getting few extreme views of it, i.e., avoid s from diverging.\nBased on both the multi-resolution graph representation and the constraints mentioned above, a new objective function for a graph classification problem is written as\nwhere W h 1 represents the weights of the first layer of DNN module, \u03b8 1 and \u03b8 2 are the regularization constants for 1norm and 2 -norm respectively.\nThe partial derivative of this new objective function w.r.t. the weight from hidden layer to the output layer becomes (29) and similarly, the partial derivative of (28) with respect to s from the convolution layer to the hidden layer is given by\nWith these derivatives, we can now minimize the final objective function (28) and update the parameters of our model using gradient descent with different learning rates \u03b3 W and \u03b3 s for W h and s respectively."}, {"section_title": "Experiments", "text": "In this section, we perform two sets experiments on two real datasets. The ADHD-200 dataset contains resting state functional magnetic resonance images (rs-fMRI) from which we construct functional brain connectivity, whereas we utilize structural brain connectivity from Alzheimer's Disease Neuroimaging Initive (ADNI) dataset to perform individual analysis for ADHD and AD respectively."}, {"section_title": "Datasets", "text": "Here, we introduce the following two real independent datasets that are used to validate our MGNN framework.\nADHD-200 dataset. Our experiments were conducted on the public ADHD-200 dataset with data collected from 973 participants in eight different sites [1] . We adopted rs-fMRI data which were registered to Automated Anatomical Labeling (AAL) atlas with 116 regions of interest (ROIs). We used Pearson's correlation coefficients between different ROIs construct functional brain connectivity for each participant, i.e., a 116 \u00d7 116 adjacency matrix whose rows and columns correspond to ROIs. We had four labels depending on the progression of the ADHD: 1) Typically Developing Children (TDC), 2) ADHD-Combined (ADHD-C), 3) ADHD-Hyperactive/Impulsive (ADHD-H/I) and 4) ADHD-Inattentive (ADHD-I). We removed ADHD-H/I group since it had only 11 samples; taking all the available samples (without any artifact), we ended up with total of N = 756 samples for our experiment. The demographic of ADHD-200 dataset is given in Table 1 . ADNI dataset. ADNI dataset is a public dataset for longitudinal AD study. From the initiative, we obtained Diffusion Tensor Images (DTI), and individual images were processed by tractography pipeline to extract structural brain networks using Destrieux atlas with 148 ROIs. Each brain network is representated as an adjacencey matrix whose elements denote number of neuron fiber tracts connecting two different ROIs. The dataset includes 5 classes: 1) AD, 2) Cognitively Normal (CN), 3) Early Mild Cognitive Impairment (EMCI), 4) Late Mild Cognitive Impairment (LMCI) and 5) Significant Memory Concern (SMC), and the demographics of the ADNI dataset can be found in Table 2 . In our experiment, we merged CN and EMCI groups as Preclinical AD group and combined LMCI and AD groups as Prodromal AD group to ensure sufficient sample size and compare their differences. "}, {"section_title": "Experimental Settings", "text": "Performance measures. We used 3-fold cross validation (CV) to evaluate our model and baselines with unbiased result. Evaluation measures were accuracy, weighted precision and weighted recall averaged across the CV. We used weighted precision and recall since the class distributions in our datasets were skewed, and these weights were given according to the number of samples in each class.\nParameters. In our experiments, we utilized Adam optimizer for back-propagation. Our kernel function was defined as k s (x) = sxe \u2212sx to ensure that the k() behaves as a band-pass filter (i.e., it achieves 0 at the origin), and the total number of scales to derive multi-resolution representation was |s| = 5. Weights were randomly initialized with Xavier initialization and the scales were uniformly selected between [0, 2.5]. To avoid overfitting, we used dropout of rate 0.2. 1 -norm was applied on the first layer of DNN with hyper-parameter 0.0001 to achieve sparsity. 2 -norm was adopted on scales with hyper-parameter 0.001. The input of DNN module was fixed as 50 and the number of nodes in hidden layers were set to 2000, 128 and 32, respectively. Moreover, LeakyReLU activation function was applied on the output of each hidden layer. Considering the imbalance property in our datasets, we chose to evenly sample training data from each class during the training process. The learning rate of scaling parameters was set to \u03b3 s = 0.05, and that of weight parameters was set to 0.01. For the approximation, the degree of Taylor expansion K = 30.\nBaselines. We used Support Vector Machine with an RBF kernel (RBF-SVM), Logistic regression (LR), graph kernel methods (i.e., Shortest Path (SP) [2] and Weisfeiler-Lehman (WL) [36] ) with SVM, and two deep learning frameworks (i.e., graph2vec [29] and Dynamic Graph CNN (DGCNN) [46] ) as baselines to compare performances with our MGNN. To deal with the problem of imbalanced dataset, the training dataset was first oversampled using SMOTE [4] before fed into baseline methods. If the method required node features, degree was used as the node feature."}, {"section_title": "Functional Brain Connectivity Analysis on ADHD-200", "text": "In this section, we analyzed brain connectivity across 116 ROIs from N = 756 participants in the ADHD-200 dataset. Each brain connectivity was given as an adjacency matrix in size 116 \u00d7 116 whose individual element was the functional connectivity between two different ROIs in the brain. As described in 4.1, there were three classes which we predicted, and the trained parameters informed which multi-resolution representations were useful and which individual connectivities were responsible for the prediction. As the participants in this dataset are adolescents whose brains are actively developing (high variation), characterizing the differences among these groups was a difficult task.\nOur results are summarized in Table 3 . During our experiments, because the label distribution in the dataset was imbalanced, we have experienced many cases where these algorithms bias towards predicting all testing instances as a single class (i.e., TDC) simply to achieve high accuracy.\nThe parameters for baseline methods were tuned carefully so that such case does not happen, and this effort is shown with high weighted precisions and recalls. MGNN achieved highest accuracy as well as weighted recall compared to all baseline methods except for weighted precision, which was still comparable to the best result with LR. Graph kernel methods with SVM performed even worse than SVM with RBF kernel, it may be because these algorithms are designed to take binary adjacency matrices only instead of weighted ones. Considering that the dataset was imbalanced, it is important that we obtained the highest weighted recall covering even the classes with the less number of samples. DNN was a fully connected neural network that we used; comparing the results from MGNN and DNN, we can see that the multi-resolution representation helped improve the result. Fig. 3 shows the convergence of the scales for multi-resolution, and the one for ADHD experiment is given in the left panel. Interestingly, even if we initially start with |s| = 5, some of the scales converged to the same value. They quickly converged -this is important since it would have taken much longer or not even possible to train with small training set if we did not use a parametric kernel.\nTo help clinical interpretation of our findings, we take average of all the trained edge weights that are connected to the trained L s , resize them to the adjacency matrix size, and visualize it as a brain network as in Fig. 4 (left) . The top-10 connectivities with the highest average weights are shown for sparsity -these are the most important connectivities in our classification; the thickness of the edges corresponds to the edge weight, and the size of the nodes corresponds to the degree of each ROI. The list of the 10 connections is given in Table 4 that span across 17 ROIs (full ROI names can be found in [43] ). We observed that several of them overlapped in Cerebellum [32, 5, 19] and Frontal region [28, 25] ; these results are well documented in many ADHD literature."}, {"section_title": "Structural Brain Connectivity Analysis on AD", "text": "In addition to the functional connectivity analysis on ADHD in section 4.3, we performed structural connectivity analysis on AD. This was a binary classification problem i.e., Pre-clinical AD versus Prodromal AD group to identify differences between the two groups. Instead of clas- sifying 4 groups independently, we chose to perform two group analysis since it benefits increase in sample sizes for each group and let us clearly see the differences between the two groups (i.e., Pre-clinical AD vs. Prodromal AD). We performed 3-fold cross validation multiple times with several settings and reported the best results. The convergence of trained scales can be found in Fig. 3 (right) , where we initially start with 5 scales but eventually converge to 4 scales. It suggests that we do not need too many scales to achieve high classification accuracy; but rather only a few optimal scales may be useful for the task. The classification results are summarized in Table 5 . Comparing the different results on accuracy, weighted precision and recall from all baseline models and MGNN, our result outperformed other baseline methods in all evaluation categories. Considering that the decision boundary exists between EMCI and LMCI in the disease spectrum and the differences between them are very subtle, this was not an easy task. As seen in the results with the baseline methods, it was difficult to achieve good performance with brain connectivity classification. Only Neural Network methods (i.e., LR, DNN and DGCNN) yielded reasonable results.\nAgain, the top-10 connectivities with the largest average of trained weights are visualized in Fig. 4 (right) , which are the most significant edges for classifying Pre-clinical and Prodromal AD. The list of these connectivities are given in Table 6 which come from 18 different ROIs (full ROI names can be found in [8] ). We observed several temporal regions (i.e., inferior temporal gyrus, inferior temporal sulcus, temporal pole, transverse temporal sulcus) [11, 6] as well as lateral and collateral fissure [39, 45] , and many others, which are corroborated by various AD literature. "}, {"section_title": "Conclusion", "text": "In this paper, we developed a novel convolution neural network framework that is designed to perform traditional classification tasks with a population of graphs. We first defined a novel graph transform to derive its multi-resolution representations of a graph matrix (not a signal on the nodes), and used them as a means to obtain feature maps that are better suited to perform classification on graphs. Using a parametric kernel, our framework, i.e., MGNN, can train well with relatively small training samples and its effectiveness was validated with extensive experiments on two independent datasets: 1) functional brain connectivity (ADHD-200) and 2) structural brain connectivity (ADNI) datasets. We achieved improved performances over existing baselines, and the results yielded clinically sound results on ADHD and AD that are supported by existing literature. We believe that our MGNN has significant potential to be practically applied to those application domains with graph data where they still suffer from lack of samples."}]