[{"section_title": "Abstract", "text": "We present a detailed description and reference implementation of preprocessing steps necessary to prepare the public Retrospective Image Registration Evaluation (RIRE) dataset for the task of magnetic resonance imaging (MRI) to X-ray computed tomography (CT) translation. Furthermore we describe and implement three state of the art convolutional neural network (CNN) and generative adversarial network (GAN) models where we report statistics and visual results of two of them."}, {"section_title": "Introduction", "text": "CT and MRI are the essential medical imaging modalities for clinical diagnosis and cancer monitoring. Inside the clinical framework MRI is the more informative and safer modality [1] . Instead of x-rays which are known to contribute to carcinogenesis [2] , MRI exploits the magnetic properties of the hydrogen nucleus and is not associated with to have negative impact on the patients health. In addition MRI provides more detailed visual information on soft tissue. These benefitial characteristics suggest that MRI supersedes CT in the long-term. One of many remaining obstacles is, however, the requirement of CT for image guided radiation therapy planning. Although MRI and CT differ significant in the applied physics, the high entropy of MRI data suggests the existence of a surjective transform from MRI to CT space. With the recent advents in computer vision techniques based on GAN we seem to close to finding such a mapping emprically."}, {"section_title": "Related Work", "text": "Since the early days of CT, health manufacturer were attempted to reduce radiation exposure in CT scans by using, for instance, more sensible detection electronics, and more sophisticated scanning sequences. Through the growing availability of computing power we also find evermore computer vision techniques being utilized, for example, in the enhancement of image quality of low-dose CTs [3] . Altough these efforts have lead to an impressive and steady evolution of the CT apparatus, they still require the patient to be irradiated nevertheless. First approaches which dispense the radiation exposure, through the computational transformation of MRI to CT, relay on the atlas-based transformations applied to MRI to predict CT, see Ref. [4] . Further improvements thereto include, for instance, random forests [5] . Finally it has been shown that these CT prediction methods can in fact already replace physical CT for treatment planning [6] . At the same time, we have seen an incredible progress with deep learning techniques in computer science [7] . Recent efforts with GANs, see Ref. [8] , seem to be a promising path towards finding a global optimum in training neural networks through the use of game theory. Furthermore GANs proved significant improvements over the former state of art in the task of image to image translation [9] but also the generalization of three dimensional structures inside the so called latent space [10] . Keeping this in mind, the medical computer vision community rapidly adapted GANs for their own specific tasks. In comparison to datasets common in general computer vision, medical datasets typical comprise volumetric single channel images with high bit depth. Bearing the challenge of CT from MRI prediction in mind, the expectations towards GANs have been lately shown increased performance to the previous approaches [11] . Yet, the full potential of GANs have not been exhausted. For example, it has been shown that GANs are capable of being trained with unregistered modalities [12] . Beside the enourmous breakthroughs made in medical computer vision we still see a shortage in a reproducable comparison of recent methods with publicly available data. Not to mention the open questions with regard to best practices in choosing good GAN model parameters for the task of CT prediction which we hope to address in the subsequent sections."}, {"section_title": "Methods", "text": ""}, {"section_title": "Dataset", "text": "Though many datasets involving MRI and CT data exist, for instance, Open Access Series of Imaging Studies (OASIS) [13] or Alzheimer's Disease Neuroimaging Initiative (ADNI) [14] , public datasets in which both modalities are obtainable for the same subject are, to date, rare. To our knowledge only the RIRE project [15] and the Cancer Imaging Archive [16] provide MRI and CT from the same subject. For the present work we used the data from the RIRE project because it uses an uniform data fromat. In Table 1 we list the aggregated modality count of the RIRE dataset   CT MRI PD MRI T1 MRI T2 MRI MP RAGE PET   17  14  19  18  9  8  12  17  16  9  6   Table 1 : Subject counts of the RIRE dataset with respect to the available imaging modalities.\nIn the second table row we only consider subjects with CT data present.\nin the first row. In the second row we list the aggregated modality count for the subjects with CT modality available. Beside of CT one can also obtain positron emission tomography (PET) images for some subjects. Next to the common spin-lattice relaxation time (T1) and spin-spin relaxation time (T2) weighted MRI, some subjects of the RIRE dataset also offer proton density (PD) and magnetization-prepared (MP) RF pulse and rapid gradient echo (RAGE) weighted MRIs. Some MRIs can be obtained in a rectified version, which we did not use. We used the T1 weighted MRI together with the CT as input and target data as these give us the highest subject count. However, it would be an interesting experiment to supply different MRIs as multi-channel input."}, {"section_title": "Preprocessing", "text": "The modality data for each subject can be downloaded from the website of the RIRE project, see Ref. [15] . In Figure 1 we depicted the first preprocessing protocol. It involves the extraction, decompression and conversion of the volumetric data. After extraction and decompression the volumetric data presents itself as MetaImage Header (MHD). We converted the MHD files to the self-contained Neuroimaging Informatics Technology Institute (NIfTI) format through the Python front-end of the Insight Segmentation and Registration Toolkit (ITK) library. Figure 2 illustrates the coregistration procedure that follows the first preprocessing procedure. The coregistration yields a rigid transformation that aligns the moving volume with the fixed volume. Given a rigid transformation, a linear interpolator returns a translated volume from the sample points of the initial moving volume. The mutual information between the moved MRI and the CT is then TAR ZIP MHD NII Figure 1 : Image extraction and conversion from MHD to NIfTI format.\nused to optimize the rigid transformation. This procedure is executed iteratively and stopped when the maximum iterations steps are reached or the convergence condition is met. As the implementation of the interpolator and the transformation optimizer are complex, we used the registration toolset included in the ITK library, see Ref. [17] . For the present work we choose the CT volume to be fixed, as the CT volumes are in general spatially normalized accross different subjects. Because the different modalities have in general different resolutions, we found that for the lower resolution modality the coregistration produced artifacts at the boundaries of the transverse plane. We manually removed these slices from the dataset. we used the binary fill holes algorithm from SciPy [18] as an attempt to remove the CT table present in some CT volumes as well as background noise.\n1 Finally we converted the preprocessed pairs of MRI and CT volumes to the tfrecord format in order to easily read the data into Tensorflow [19] . As part of the data pipeline implemented with Tensorflow we perform a pad or crop to either 384 \u00d7 384 for transverse 2D slices. In the 3D case we performed patch extraction of target shape 32 \u00d7 32 \u00d7 32 for MRI and 16 \u00d7 16 \u00d7 16 for CT. The target shape for the 2D slices was choosen as a compromise between compatibility with the convolution parameters and reducing crop on the volumes. Furtheremore we applied a min-max-normalization in order to keep floating range arthimetic in a range of [0, 1]."}, {"section_title": "Models", "text": "We attempted to implement three different neural network models for the MRI to CT synthesis task. The first and most simple model is based on the popular u-net model [20] in combination with a standard error metric, i.e. mean absolute error (MAE) and mean squared error (MSE). The second model is based on pix2pix [9] , which already has proven great success in the task of image translation. It uses a u-net based model as generator in addition to a simple discriminator model to calculate the adversarial loss. As third and last model we attempted an implementation of the context-aware 3D synthesis GAN from Nie [11] . Unfortunately we found our implementation of the patch reconstruction to be too resource intensive for practical purpose. In comparison to the other two models, which operate on the transverse 2D slices of the brain, it is applied to 3D patches. Training and interferen were implemented using the Tensorflow [19] framework. "}, {"section_title": "u-net", "text": "The original u-net model [20] was developed for the segmentation of biomedical images. A central concept of the architecture is to combine the capture of context and precise localization through interconnected layers. In Figure 3 the u-net architecture is illustrated. We remark the two paths\nThe 17 subjects of the dataset were divided into 13 subjects for training and 4 subjects for validation. We tried to respect the transverse resolution of the initial volumes, i.e. the number of transverse slices, in the division process. In Table 7 we see the volume shape of the input MRI and the target CT of the respective subject as well as their assignment to the training or validation dataset. The subjects assigned to the training dataset were processed in transverse slices. We trained the u-net model once with the MAE and once with the MAE and GDL loss in order to estimate the impact of the GDL. The training parameters are summarized in Table 8 . The image slices correspond to the total number of 2D images extracted from the transverse (depth) plane of the volumes. The batch size denotes the number of images proccessed in one step. For convenience we estimated the number of epochs from the total training step number. The training was stopped when the gradients vanished and the total loss stabilized. We found that these criteria were met for the u-net model at around 20 000 steps or 140 epochs. The appropriate loss term weights \u03bb mae and \u03bb mse were chosen such that the gradient with respect to the loss terms yields a similar magnitude. We found that to be the case for 1 \u00d7 10 \u22127 . In an early attempt we also tried to compare MAE and MSE as loss functions, yet, we did not find significant differences and stuck with MAE which is the distance loss used in the original pixtopix. Table 9 lists the metrics for the u-net model trained with different loss functions evaluated on the training dataset. The peak signal-to-noise ratio (PSNR) metric is defined as\nwherein M denotes the maximum pixel value, in our case 2 16 \u2212 1. It is useful to quantify the noise level present in the generated CT images, with a higher PSNR usually corresponding to lower noise. We remark that the GDL yields a slightly better result on the PSNR metric, but yields inferior values on MAE and MSE. In Table 10 we see the same metrics evaluated on the validation dataset. These metrics are in general more informative than the metrics from the training dataset as we expect the networks to overfit. In comparison to the Table 9 the MAE are nearly four times the MAE for the training dataset. The MSE is of one magntiude higher which also confirms overfitting. The PSNR metric obtained from the validation dataset is lower than for the training dataset. We should keep in mind that for the PSNR a higher value is usually better and also that the PSNR is scaled logarithmicly. Overall the metrics suggest that our network overfits and that the GDL slightly decreases the performance. Nevertheless we should keep in mind that these metrics are based on pixel-wise measures, therefore we need to examine the visual results to draw final conclusions and sort out, for instance, possible bias in the subject selection of the datasets. In Figure 8 we present the the transverse views for the differently trained u-net models evaluated on the training dataset including the ground truth on the left. We note that the u-net instance trained with GDL shows some artifacts outside of the head. Furthermore the soft matter structure seems more coarse. In Figure 9 we show the transverse views for the differently trained u-net models evaluated on the validation dataset. We can see that the overall performance is much worse to unknown data which again suggests overfitting. For the first two rows we note that the u-net trained with GDL loss seems more robust. We conclude that the GDL improves subjective performance on the validation dataset by a small amount, but performance by standard metric seems to be decreased by a small amount. Furthermore we want to mention, that the use of the GDL requires high computational cost. 129.0 72 704 47.90 Table 10 : Distance metrics for the u-net model trained with different loss functions, evaluated on the validation dataset."}, {"section_title": "Input", "text": "Convolution ReLU Batch Norm Output Leaky ReLU Dropout Deconvolution of data flow: for one the image is passed through a sequence of encoders and decoders, then again data can flow from one encoder stage directly to the corresponding decoder stage. The encoder encode localized features while the decoders decode an image from the previous layer and the corresponding encoder stage. We adapted the specific u-net based architecture from pixtopix. In comparison to the original formulation the number convolution layers are reduced and the max pooling in the decoder blocks were replaced by deconvolution (also known as transposed convolution) layers. Furthermore we used Leaky ReLUs in the encoders instead of usual ReLUs. Except for the first encoder we applied batch normalization inbetween the convolution and activation layers. Another difference relative to the original scheme there is a use of dropout layers after the first and second decoder. Dropout layers are known to improve network generalization by randomly suppressing features from the training process [21] . Figure 3 lists the network parameters used for our u-net architecture. The kernel paremeter specifies the shape of the convolution kernel, the stride parameter describes the spacing between convolutions. Weight initialization was performed using Xavier, see Ref. [22] , if not noted otherwise. Table 2 : Network parameters used in the u-net."}, {"section_title": "pixtopix", "text": "The pixtopix model uses the previously introduced u-net architecture as generator to translate an input MRI to CT. In addition, pixtopix utilizes a second network, the discriminator network, to output a score map that distinguishes between real and fake CT, wherein the term real CT corresponds to a CT propably obtained from the ground truth and fake CT correspond to a probable output of the generation In this sense one is able to add an adversarial loss term to the standard metric loss, that maximizes the identification of real CTs while minimizing the missidentification of fake CTs as real ones [8] . The pixtopix model has proven great success as general purpose solution for translation experiments with color images [9] . Recently pixtopix was extended to support even training on unpaired data [23] . This approach has also successfully been applied to the task of MRI to CT translation [12] . architecture. It consists of five convolution layers with non-linear activation function. The first four activation functions are Leaky ReLUs while the last one is of type sigmoid. Table 3 lists the network parameters used for the pixtopix discriminator network. The input comprises the input MRI with either the real or fake CT concated at the last dimension. The final output is a score map of shape 1 \u00d7 24 \u00d7 512.\nIn a second part we want to compare the u-net model trained on the MAE with the pixtopix model. As already noted both models differ in that the pixtopix uses a discriminator network in order to calculate a least-square adverarial loss term. The adversarial least-square loss term was waited with \u03bb adv = 0.01 and the MAE term with \u03bb mae = 1. Additionaly we manualy removed incomplete slices from the dataset. These incomplete slices arise from the coregistration routine when one volume is tilted but does not cover the same region of the fixed volume because of different resolution. In Table 11 we present the volumes shapes of the cleaned dataset. In comparison to Table 7 the transverse (depth) resolution has been reduced by the incomplete transverse slices we removed. Table 14 : Distance metrics for the u-net model trained with MAE loss compared with the pixtopix model trained with least-square adversarial loss, evaluated on the validation dataset.\nof the u-net and pixtopix model on the training dataset, see Figure 10 shows very good results for both models. The pixtopix model, however, does not show artifacts. Overall the hard and soft matter tissue look very similar to the ground truth. The visual comparison of the u-net and pixtopix model on the validation dataset, see Figure 11 shows that even though the metrics on the validation dataset decreased much more relative to the u-net metrics, the visual results are much better. For ananatomical characteristics general to the human head the pixtopix model is able to successfully reproduce CT representation from MRI, however for anatomical features that differ greatly between subjects, results are not good. Overall we can confirm a large improvement of the GAN approach compared with CNN approach. Altough both architecture use the same network for the prediction, the adversarial loss term in pixtopix is able to guide the optimizer to a better local extrema."}, {"section_title": "Context-aware 3D synthesis", "text": "The last model uses 3D patches of shape 32 \u00d7 32 \u00d7 32 from the MRI to synthesize CT patches of shape 16 \u00d7 16 \u00d7 16. By using a larger volume for the input the network is able to perform contextaware synthesis. Furthermore the patch-based data approach allows the support of different sized brain volumes or even only specific subregions -as long as the voxel size correspond to the same world sizes. Even though patch-based models give benefits under practical circumstances, Table 3 : Network parameters used in the pixtopix discriminator.\nthey increase the complexity of the pre-and postprocessing by requiring patch extraction and aggregation. In Figure 5 and Figure 6 we illustrated the generator and discriminator architecture of Input Convolution ReLU Output Tanh Batch Norm discriminator takes a similar approach and reduces the output or target CT patch to a score map of shape 8 \u00d7 8 \u00d7 8 \u00d7 1. In comparison to pixtopix it does not consider the input MRI. Furthremore we note that the lack of dropout layers and the preference of ReLUs over Leaky ReLUs as well as max pooling over transposed convolution (deconvolution). Table 4 discloses the network parameters of the generator. Though the kernel size was given in Ref. [11] , we had to experiment with the padding algorithm and the stride parameter in order to reproduce the dimension reduction to 16 \u00d7 16 \u00d7 16. Table 5 : Network parameters used in the context-aware 3D synthesis discriminator.\nthat the context-aware 3D synthesis generator lacks interconnected layers in comparison to u-net. Instead, it uses the auto-context model first introduced in Ref. [24] . The concept is illustrated in Figure 7 . The idea is to first train a single model instance on a pair of CT and MRI patches. The predicted CT then are used as input together with the MRI patches to train a second model instance. Applied iteratively this approach converges after three iterations [11] ."}, {"section_title": "Losses", "text": "Beside the preprocessing and the network architecture another important part in using neural network is the choice of a cost function. The cost function is necessary in order to calculate a gradient with respect to the network weights. The network weights are then updated according to their respective gradient and a convergence parameter of the optimizer. In this manner one hopes to find the optimal weights for a specific task.\nIn our experiments we relied on the Adam optimizer, see Ref. [25] , with the parameters listed in Table 6 . These parameters were choosen empirically for fast convergence and good results. That said there may of course exist better parameters. We did not perform grid search or other hyperparameter optimization techniques."}, {"section_title": "Distance", "text": "Distance based losses are well-known from a wide range of scientific disciplines and correspond to a distance between two pixel values. We will present some distance losses now. Let X, Y \u2208 [0, 1] N be output and target vectors, then we define the MAE to be\nThe MSE we define via\nFinally the gradient distance loss (GDL) disclosed in Ref. [11] is defined as\nwherein \u2207 is the spatial gradient. We approximate the ith element of the spatial gradient through\nThe loss terms can of course be combined\nwherein the \u03bb denotes the weight of the respective loss term. The MSE penalizes outliers stronger than the MAE. Furthermore the MSE offers a continous derivative whereas the MAE has undefined behaviour at 0. The GDL was reported to correct for strong edges [11] , as present at the tissue boundaries in the brain."}, {"section_title": "Adversarial", "text": "A major shortcoming of the distance based losses is that they only consider pixel-wise deviations and thereby neglect more complex structures. With the advent of GAN one can think of the adversarial loss as an embodiment of more complex function that respects (local) structures. Given a discriminator network that outputs a score map for real D(X) and fake data D(Y ) = D(G(Z)), where G(Z) is the generator output from the input vector Z, the standard adversarial loss is defined as log(D(X)) + log(1 \u2212 D(G(Z))).\nRecently a modified least-squared adversarial loss\nhas been reported that yields superior results and more stable training characteristics [26] . The least-squared adversarial loss is used in the pixtopix model."}, {"section_title": "Experiments", "text": "As noted earlier, we ran into practical challenges with our implementation of the patch aggregation algorithm required for the implementation of the context-aware 3D synthesis. Though patch aggregation worked in general, it occupied more computational resources than we could consume without the interference with other projects. As a result we did not perform more than one iteration of the auto-context model, which prevents us from a fair comparison, however, we encourage everyone to test our implementation themselves. Consequently we will only report results obtained with the u-net CNN and the pixtopix GAN model."}, {"section_title": "Gradient Boost", "text": "As a third experiment we wanted to improve the soft tissue structure of the synthesized CTs. Therefore we used skull extraction to create masks of the brain volume. These masks were then used to increase gradient weight in fine-tuning the pixtopix model. In Table 15 we summarized the training parameters for the fine-tuning experiment. The untuned pixtopix, described in the prevous section, was trained for about 299 epochs. Then we amended the gradient calculation to increase weight of the soft-tissue area and proceeded to train for about 112 more epochs. In Table 16 and Table 17 the evaluation metrics on the training and validation dataset comparing the pixtopix model with the fine-tuned pixtopix model are presented. For the MAE and MSE we see a small improvement of the fine-tuned model on the validation dataset. In Figure 12 and Figure 13 we show the visual results of the two pixtopix variants. Altough some results, for instance the last row from the training results, suggest an improved fine structure of the soft tissue, we cannot definetly conclude that fine-tuning with incresed soft-tissue weights yields better softtissue results, however, we should keep in mind that we might not found the correct fine-tuning Table 16 : Distance metrics for the pixtopix model trained with least-square adversarial loss compared to fine-tuned with gradient boost, evaluated on the training dataset.\nparameters and that a further increase in order to compensate for the exponential decay of the optimizer is necessary."}, {"section_title": "Summary and outlook", "text": "We outline in detail the preprocessing steps necessary to prepare a public available dataset for the task of MRI to CT translation. Furtheremore we provide a reference implementation of different state of the art models and compare obtained statistics and visual results. We believe that the lack of sufficient (public) data is still a major holdback to this specific computer vision task, which, however can be circumvented to a degree through the input of more domain knowledge. "}]