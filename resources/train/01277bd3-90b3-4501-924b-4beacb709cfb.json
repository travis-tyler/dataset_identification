[{"section_title": "", "text": "AdcircViz is a MATLAB-based GUI application developed as an end-user application for visualizing and analyzing storm surge and wave forecasts in the collection of ASGS instances. It retrieves the data collection catalog, uses the UGRID metadata descriptions to populate the GUI fields and data structures, and uses NCTOOLBOX retrieve data fields only when needed. It provides a consistent display of model results independent of the model's implementation details, inter-comparison of time series output at userspecified locations, and analyses of ensembles of simulations. Using flexible and comprehensive standards and conventions allow rapid development and deployment of end-user applications. The preliminary version of AdcircViz was written from scratch in about two weeks, as tropical cyclone Isaac (2012) strengthened to a tropical storm on 21 August and early analyses indicated that the storm could threaten the Tampa Bay area of west Florida. The US Coast Guard and the National Hurricane Center were interested in ADCIRC forecasts, but had no easy method with which to access and visualize ADCIRC model results. Since all ASGS instances use the same data format and metadata specification and post results to a THREDDS server, most of the application development is in the GUI and not in data access and management. Going forward, we will replace the ad hoc catalog generator with harvesting across multiple data servers and use OpenSearch in MATLAB to discover model forecast simulations that have been inserted into the THREDDS data collection with UGRID compliance. We are also exploring data grid technology such as iRODS to ingest, manage, and catalog simulation results."}, {"section_title": "Real-time Applications", "text": "High-resolution predictions of coastal storm surge, inundation, and waves generally require substantial computational resources, particularly in a forecast, realtime mode. Regional forecast systems using the ADCIRC tide, storm surge, and wave model [Westerink et al (2008)] have been operating in several risk-prone areas of the eastern US and Gulf coasts for the past several years using the Adcirc Surge Guidance System [ASGS, Fleming et al (2008)]. ADCIRC uses triangular finite elements to represent regional topography, bathymetry, critical hydraulic structures, and land cover at highresolution. Each ASGS instance uses locally provisioned compute resources and publishes its output in a Introduction UNC's Renaissance Computing Institute (RENCI) has built a system to provide uniform access to ASGS instance forecasts outputs on unstructured model grids. This simplifies knowing which systems are running and when solutions become available. The data collection uses NetCDF and UGRID (a NetCDF Climate and Forecast metadata convention extension for unstructured grids), to access the ASGS predictions. A simple cataloging mechanism maintains a catalog file on the THREDDS servers."}, {"section_title": "Plans and Conclusions System Components", "text": "Community-driven conventions and standards enable rapid development of end-user applications to provide solutions to complex data cataloging, discovery, and access. The ADCIRC simulation data collection is built from three main components: THREDDS/OPeNDAP: catalogs and serves unstructured model output files. Structured grid model output can be handled by creating an unstructured grid specification of triangles from the gridded model nodes. NOAA's SLOSH model [Jelesnianski et al (1992)] is a curvilinear grid model used operationally by the National Hurricane Center to assess the storm surge threat during coastal storms. By mapping the SLOSH structured grid data to UGRID, AdcircViz allows simultaneous display of multiple model outputs. // Mesh topology and node coordinates! !int adcirc_mesh(mesh) ;! ! ! adcirc_mesh:cf_role = \"mesh_topology\" ;! ! ! adcirc_mesh:long_name = \"mesh_topology\" ;! ! ! adcirc_mesh:dimension = 2 ;! ! ! adcirc_mesh:node_coordinates = \"x y\" ;! ! ! adcirc_mesh:face_node_connectivity = \"element\" ;! !int element(nele, nvertex) ;! ! ! element:long_name = \"element\" ;! ! ! element:standard_name = \"face_node_connectivity\" ;! ! ! element:start_index = 1 ;! !double x(node) ;! ! ! x:long_name = \"longitude\" ;! ! ! x:standard_name = \"longitude\" ;! !double y(node) ;! ! ! y:long_name = \"latitude\" ;! ! ! y:units = \"degrees_north\" ;! % get geovariable object! gvar_name=zvar.attribute('mesh'); % get mesh connectivity ! gridvar=nc.geovariable(gvar_name); ! trivar_name=gridvar.attribute('face_node_connectivity');! tri=nc{trivar_name}(:);! lon=zvar.getlondata(:); % get mesh node coordinates! lat=zvar.getlatdata(:);! zeta=zvar.data(itime,:); % retrieve water level data ! trisurf(tri,lon,lat,zeta);! end!"}, {"section_title": "CF-UGRID:", "text": ""}]