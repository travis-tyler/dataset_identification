[{"section_title": "Abstract", "text": "Abstract-In this paper we present a novel system for the automated reconstruction of cortical surfaces from T1-weighted magnetic resonance images. At the core of our system is a unified Reeb analysis framework for the detection and removal of geometric and topological outliers on tissue boundaries. Using intrinsic Reeb analysis, our system can pinpoint the location of spurious branches and topological outliers, and correct them with localized filtering using information from both image intensity distributions and geometric regularity. In this system, we have also developed enhanced tissue classification with Hessian features for improved robustness to image inhomogeneity, and adaptive interpolation to achieve sub-voxel accuracy in reconstructed surfaces. By integrating these novel developments, we have a system that can automatically reconstruct cortical surfaces with improved quality and dramatically reduced computational cost as compared with the popular FreeSurfer software. system is able to generate surfaces that better represent cortical anatomy and produce thickness features with higher statistical power in population studies."}, {"section_title": "I. INTRODUCTION", "text": "C ORTICAL surface reconstruction from magnetic resonance (MR) images is a critical problem in brain mapping which provides the geometric foundation for measuring cortical morphometry and tissue integrity. While many sophisticated algorithms were developed for its solution [1] - [11] , significant challenges remain in improving the accuracy, robustness, and speed of cortical reconstruction. In this work, we develop a novel system for the automated reconstruction of cortical surfaces from T1-weighted MR images based on intrinsic analysis of geometry and topology using the Reeb graph of Laplace-Beltrami (LB) eigenfunctions. We demonstrate that our system can robustly reconstruct high quality cortical surfaces on large scale data sets.\nThe successful reconstruction of cortical surfaces requires the development of a complicated image analysis system that includes preprocessing steps such as inhomogeneity correction [12] , nonlinear registration [13] - [16] , skull stripping [17] - [19] , and tissue classification [20] - [23] . Even though different combinations of preprocessing methods were made in various systems, a popular choice for surface formation is that a smooth white matter (WM) surface, which represents the boundary between WM and gray matter (GM), with correct topology is first reconstructed, and then deformed to find the GM surface that represents the boundary of the GM and cerebrospinal fluid (CSF). Due to limited image resolution, partial failure of preprocessing steps, or anatomical variability across population, however, geometric outliers, such as spurious spikes, and topological outliers, such as handles and tunnels, occur frequently during the surface reconstruction process. To build high quality surface representations of tissue boundaries, the challenge is the removal of both types of outliers without sacrificing accuracy.\nGeometric and topological outliers were handled separately in previous works. To avoid geometric outliers in the reconstructed surface, smoothness regularization was applied globally together with data terms in surface evolution [4] , [5] , [7] , [8] , [11] . This regularization-based method, however, has two 0278-0062/$31.00 \u00a9 2012 IEEE problems. First, it only helps but does not guarantee the occurrence of geometric outliers can be prevented, which could be due to leakage into noncortical areas not removed by skull-stripping. Second, shrinkage can arise, especially in deep sulcal regions, because the regularization is enforced everywhere on the surface, even at places it is unnecessary. This could affect the accuracy in cortical thickness measurements and lead to decreased power in statistical analysis.\nTo ensure genus-zero topology in reconstructed surfaces, topology-preserving deformations can be used [1] , [3] , [4] , [24] , [25] after topological outliers are removed. There are mainly two different approaches for topological outlier detection and correction. The first approach works in the voxel space and uses graph analysis and morphological operations for topology analysis [22] , [26] , [27] , however cut decisions are made according to the geometric size of outlier branches only. The second approach uses the triangular mesh representation of the surface and detects topological outliers from overlapping triangles after mapping the surface to the sphere [28] , [29] . Cut/fill decisions are then made according to image intensity and curvature distributions. The drawback of this approach is that it relies on the spherical mapping for outlier detection, which is computationally expensive and not suitable for complicated surfaces with large number of handles and tunnels.\nIn this work, we present a novel system for automated reconstruction of cortical surfaces from MR images. At the core of our system is a unified approach for the correction of geometric and topological outliers based on intrinsic geometry. With well-composed boundary deformation driven by evolution speeds derived from the MR image [30] , [31] , our system builds manifold representations of tissue boundaries and computes the LB eigenfunctions [32] - [43] as Morse functions for Reeb analysis [44] - [49] , where we develop a novel algorithm for the efficient construction of Reeb graphs to capture manifold geometry and topology. By analyzing the loops and branches of the intrinsically defined Reeb graph, we develop a unified approach for the detection and correction of geometric and topological outliers. For geometric outliers, intrinsic Reeb analysis naturally leads us to perform localized outlier filtering without causing unintended shrinkage to other parts of the cortex. By computing paired boundary estimates with different topology constraints, our system carefully takes into account information from tissue analysis and geometric regularity for the cut or fill decisions in the correction of topological outliers.\nBesides the novel method for geometric and topological outlier correction, there are two other key components in our system. The first is the enhancement of tissue classification with geometric features to help overcome ambiguities in tissue classification. By using features derived from the Hessian of images [50] , [51] , this improvement enables us to rely on information in the data instead of artificial assumptions to separate touching gyri and alleviate the impact of partial volume effects on misclassification. The second key element is an adaptive interpolation algorithm that achieves sub-voxel accuracy for the final surface. With locally estimated tissue property, we position the surface at sub-voxel locations for the accurate representation of cortical anatomy. By integrating these novel developments, we build a robust and efficient system for automated cortical reconstruction. An overview of our system is shown in Fig. 1 . Given a skull-stripped MR image, we perform enhanced tissue classification and nonlinear registration as described in Section II to design initial evolution speeds for the WM and GM surface. Using methods developed in Sections III and IV, geometric and topological outliers in the WM evolution speed are then corrected with our unified approach, which produces an evolution speed for the estimation of a clean WM boundary. To obtain the GM boundary, we deform the WM boundary outward with the GM evolution speed. Geometric outliers in the GM boundary are removed with intrinsic Reeb analysis. Finally adaptive interpolation developed in Section V is applied to both the WM and GM boundary to generate the WM and GM cortical surfaces with sub-voxel accuracy.\nThe rest of the paper is organized as follows. In Section II, we present the tissue enhancement algorithm and derive the evolution speeds for WM and GM boundary estimation. The construction of the manifold representation of tissue boundaries and their Reeb graphs are developed in Section III. Using paired boundary estimates, we develop in Section IV the unified approach for geometric and topological outlier correction with intrinsic Reeb analysis and localized filtering. In Section V, the adaptive interpolation algorithm is developed for sub-voxel accuracy. Experimental results are presented in Section VI, where we present detailed comparisons with FreeSurfer [5] , [52] and demonstrate that our system can achieve better performance on both simulated and real MR images from two databases. Finally conclusions are made in Section VII."}, {"section_title": "II. ENHANCING TISSUE CLASSIFICATION", "text": "Tissue classification typically uses statistical models to map intensities to three tissue types in the brain: gray matter (GM), white matter (WM), and cerebrospinal fluid (CSF) [20] - [23] , but inhomogeneity and partial volume effects usually compromise the effectiveness of such models in correctly identifying thin structures. To enhance fractions of CSF between touching gyri, skeletons of weighted distance transforms from WM were proposed to open up CSF regions [7] , but the challenge is that the WM map by itself has inherent uncertainty. In this section, we propose to use features directly derived from the data, which is the eigen-structure of the Hessian, to enhance tissue maps and capture thin structures. Instead of just enhancing the CSF maps, our method applies to thin structures in both WM and CSF maps, which leads to more integral reconstructions of both WM and GM surfaces. Based on the enhanced tissue maps and atlas labels, we then define evolution speeds for boundary estimation.\nLet denote the skull-stripped MR image, where is the lattice of voxels that we represent as . With partial volume models, a tissue classifier typically uses the intensity at each voxel to assign it as either one of three brain tissue types: GM, WM, CSF, or a weighted combination of WM and GM at the WM boundary, and GM and CSF at the GM boundary. Let denote the individual tissue maps of GM, WM, and CSF, which we compute in this work with the FAST tool in the FSL software [21] . Tissue classification is a critical step in our system as it provides the basis for our enhancement algorithm. We designed our system with the flexibility of taking inputs from any software that generates tissue maps with partial volume models. Here we choose the FAST tool because of its robustness across various datasets. It is also relatively efficient and can compute results in less than 10 min. At each voxel, the individual tissue map represents the fraction of the voxel belonging to the corresponding tissue. Voxels where all tissue maps are zero are labeled as background (BG). Using the tissue maps, we can define a composite tissue map as\nfor all . This composite map provides a simple way of representing the partial volume tissue models. As an example, the composite tissue map of an MR image in Fig. 2(a) , which is from a patient with Alzheimer's disease, is plotted in Fig. 2(e) .\nBecause tissue classification relies on intensity information to assign tissue types, it does not necessarily follow the geometric assumptions of partial volume models. For example, voxels with small factions of WM tissue should be either on the boundary of definite WM voxels or ridges of the image. When neighboring gyri touch each other, voxels in between with tiny fractions of CSF may exhibit as valleys in image intensities. Even though such ridges and valleys have distinctive geometric characteristics, partial volume modeling with intensity distributions may not be sensitive enough to detect them. To overcome this difficulty, we will compute an enhanced tissue map based on Hessian features of the image, which is well known for ridge detection in image analysis [50] , [51] .\nAt a voxel in the MR image , we denote its gradient as , and Hessian as where the entries are the second order gradients of at this voxel. The eigenvalue of with the maximal magnitude is denoted as , and the corresponding eigenvector is denoted as . At each voxel, we define the tissue enhancement feature as (3) where the inner product between and is the gradient of along at the voxel. For voxels at the top of ridges or bottom of valleys, we have . Using the sign of , we can determine whether it is a ridge or valley. With this tissue enhancement feature, we can help resolve ambiguities in intensity-based tissue classification.\nAs an example, we show in Fig. 2(b) the tissue enhancement feature. Compared with the image in Fig. 2(a) and the original Fig. 2(e) , we can see that this feature successfully detects ridges and valleys, but there are also false positives that need to be cleaned.\nTo filter out these false positives, we use a nonlinear registration software ANTS [16] to register the image to the LPBA40 atlas [53] and warp the probabilistic GM atlas, which assigns to each voxel a probability of belonging to the GM, and anatomical labels to the image space. With the help of nonlinear registration, we can take advantage of atlas information to improve the robustness of our tissue enhancement algorithm and guide the design of evolution speeds for surface reconstruction. Here we choose the ANTS tool for nonlinear warping because of its efficiency in obtaining high quality MR image registration [54] . Typically we can obtain very accurate warped labels and GM atlas in around 30 min with the ANTS software. Let denote the warped GM atlas in the image space. As an illustration, the GM atlas is shown in Fig. 2(c) , and the warped anatomical labels are shown in Fig. 2(d) . Using the anatomical labels, we denote as the set of voxels belonging to the sub-cortical structures putamen, caudate, and ventricles. Using the tissue enhancement feature and atlas labels, we can filter out outliers and detect CSF valleys and WM ridges. Let be the set of candidate voxels on the CSF valley, where is a threshold we typically choose as 2. Because the CSF between touching gyri will occupy tiny fractions of voxels, we apply a thinning algorithm as listed in Table I to using as the ridge/valley detection feature. Starting from the boundary voxel of with the least feature value , this thinning algorithm iteratively removes voxels if its feature is above the threshold and is a simple point [24] , [55] , i.e., peeling it off will not result in a topological change. As a result, we obtain a thin set of voxels with the maximal tissue enhancing feature.\nFor partial WM voxels, we detect voxels on the top of ridges to follow the geometry of partial volume models. Let be the set of candidate voxels on the ridge, where is a threshold for ridge detection that we typically choose as . Applying the thinning algorithm to the set with as the ridge/ valley detection feature, we obtain a thin set of voxels with partial WM.\nUsing these results, we can define an enhanced tissue map as if if else."}, {"section_title": "(4)", "text": "For the MR image shown in Fig. 2(a) , the enhanced tissue map is shown in Fig. 2(f) . Compared with the original tissue map in Fig. 2(e) , we can see that it successfully opens up deep sulci in buried gyral regions, and enhances thin WM regions such as the top of the superior frontal gyrus.\nUsing the enhanced tissue map, we can design evolution speeds for surface generation based on the fast evolution algorithm [31] , [56] , [57] . By dividing the image into left hemisphere (LH) and right hemisphere (RH) using the warped anatomical labels as shown in Fig. 2(d) , we reconstruct the surfaces of each hemisphere separately. In each hemisphere, the evolution speed defined over the grid for the WM boundary is if or otherwise (5) and the GM boundary is if or otherwise.\nThe thresholds in (5) and (6) are chosen for the robustness to remaining inhomogeneities and minimization of mesh distortion in reconstructed surfaces. While the correction of inhomogeneity is applied before tissue classification, some remaining inhomogeneities can still exist in various regions of the brain. For example, in regions with hyper-intensities, large blocks of CSF voxels could be included to the interior of the GM boundary if the threshold is selected toward one in (6) . On the other hand, in regions with relatively low intensities, large areas of GM voxels could be left out if the threshold is chosen toward two in (6) . To achieve a balance in both situations, we choose the thresholds in (5) and (6) such that only voxels containing at least 50% of the WM or GM tissue are included in the WM or GM speed. As illustrated in Fig. 2(g ) and (h), the final reconstructed boundaries are optimally determined with the adaptive interpolation method in Section V, which shifts the position of voxel boundaries with locally estimated tissue properties. By putting voxels with more than 50% of the WM or GM tissue to the interior of the boundary and voxels with less than 50% of the WM or GM tissue to the exterior of the boundary, we restrict the movement of all boundary points to be around half of the voxel resolution. This avoids large distortion of triangles and leads to improved mesh quality in reconstructed WM and GM surfaces.\nIn the next two sections, we will develop the unified approach for the removal of both geometric and topological outliers in the evolution speeds. After that, sub-voxel accuracy will be achieved with the adaptive interpolation scheme in Section V to generate the final cortical surfaces."}, {"section_title": "III. INTRINSIC REEB GRAPHS ON TISSUE BOUNDARIES", "text": "In this section, we develop numerical algorithms for the construction of intrinsic Reeb graphs on tissue boundaries that correspond to the interface of different tissue types. We first build a mesh representation of tissue boundaries using the evolution speeds computed in Section II. With the LB eigenfunction as the Morse function, a novel numerical algorithm is then developed to construct Reeb graphs that intrinsically capture the geometric and topological structure of the tissue boundary."}, {"section_title": "A. Mesh Representation", "text": "Starting from an initial mask, we run a fast boundary evolution algorithm, which we developed in our previous work [31] , [56] , [57] , following the evolution speed in (5) or (6) . The boundary evolution process separates the lattice of voxels into two regions: the object region and the background region . To extract the continuous representation of the boundary between regions, we consider each grid point as the center point of a rectangular cuboid where , , and are the spatial sampling resolutions in the and direction of the MR image. Under this cuboid representation, each voxel has six rectangular faces.\nBecause the well-composedness condition [30] is satisfied in our reconstruction [31] , the boundary between and is a manifold and composed of a set of rectangular faces . Each face is the intersection of the cuboids of two voxels:\nand . This establishes a map from boundary faces to voxels in the object region with and the background region with . By dividing each rectangular face into two triangular faces and , we have a triangular mesh representation of the boundary , where and are the set of vertices and triangles. For each face , we know it is on the boundary face with , where denotes the greatest integer less than or equal to . We can define the maps from each triangular face to voxels in and as: and . These maps allow us to move freely between the surface representation and voxel representation of the tissue boundary under consideration."}, {"section_title": "B. Laplace-Beltrami Eigen-System", "text": "With the triangular mesh representation of the boundary , we can compute its LB eigen-system by solving a matrix eigenvalue problem [31] - [33] ( 7) where is the eigenvalue, is the eigenfunction, and the two matrices and are formed using the finite element method [58] . More specifically, the matrices are defined as\nwhere is the set of vertices in the one-ring neighborhood of , is the set of triangles sharing the edge , is the angle in the triangle opposite to the edge , and is the area of the th triangle . The LB eigen-system is discrete and the eigenvalues can be ordered as . Correspondingly, the eigen-functions are . The LB eigen-system is intrinsically defined on manifolds and has the nice property of being isometric invariant. It has been applied successfully for various shape analysis tasks in computer vision and medical imaging [32] - [43] . In particular, we will use the first nonconstant LB eigenfunction here as the Morse function for Reeb graph construction [59] , which is the solution of the minimization problem (8) and can be viewed as the smoothest map from the manifold to the real line . As an illustration, the LB eigenfunction on a WM boundary surface is plotted in Fig. 5 (a). Similar to our previous work in hippocampal modeling with LB eigenfunctions [39] , we can see the LB eigenfunction intrinsically models the front-to-posterior trend of the cortical surface."}, {"section_title": "C. Reeb Graph", "text": "Given a Morse function on the mesh , its Reeb graph is defined as follows [44] .\nDefinition 1: Let . The Reeb graph of is the quotient space with its topology defined through the equivalent relation if for . Following this abstract definition, the Reeb graph is intuitively a graph of level contours of on . For the construction of Reeb graphs on surfaces with general topology, previous methods typically need to scan through the whole mesh to detect topological changes of level contours [46] - [48] . Because level contours change topology only at critical points of , Reeb graph is essentially a graph of critical points. By using level contours at saddle points, an efficient Reeb graph construction algorithm was proposed in [49] , but it uses triangle-based region growing and cannot handle densely distributed saddle points. The partition generated by the method in [49] produces nonmanifold regions which are not suitable for further analysis with intrinsic geometry. To overcome these drawbacks, we develop a novel method for Reeb graph construction on high genus meshes. The key idea here is that we augment the mesh with level contours crossing the upper and lower neighborhood of saddle points to process close saddle points. In our method, the surface partition generated by the Reeb graph ensures each surface patch is a manifold, so that further analysis of geometry and topology, such as the computation of geodesics, can be performed.\nThe critical points of can be classified into maximum, minimum, and saddle points. For a vertex , and its one-ring neighborhood . Let and denote the lower and upper neighbors in the 1-ring neighborhood of a vertex . Let denote the number of connected components in a set. Using the number of connected components in and , we can classify the vertices as follows:\notherwise.\nLet be the set of critical points of on the surface . We assume all critical values are different and sort the critical points according to the critical values such that . For anatomical shapes without perfect symmetry, we find this assumption always holds in our experience. For synthetic shapes with perfect symmetry, we can perturb the metric [37] , [43] and make sure this assumption is valid. To accurately represent the partition of the surface by neighboring saddle points on the Reeb graph, which could have very subtle differences in the function values, we will augment the original mesh by splitting its triangles along the level contours during the Reeb graph construction process. We denote this augmented mesh as , where and are the augmented set of triangles and vertices of . The Reeb graph is represented as , where is the set of critical points and act as nodes of the graph, and is the set of arcs. Each arc in is represented as , where are the start and end node, is the set of triangles belonging to this arc in , and are the level contours on the boundary of the arc. The set of triangles represent the subset of enclosed by and and form a manifold with boundaries.\nTo construct the Reeb graph, we need to find the arcs connecting these critical points. Let denote the current arc label that is initialized as . The augmented set of triangles and vertices are initialized as the original triangle set and vertex set , respectively. We also assign a label function and initialize it to be for all vertices in . We scan through these critical points sequentially as follows to build the Reeb graph.\nIf is a minimum, we increase the current arc label by one and create a new arc . We set the start node of as , and its start level contour as . We also set . Note that this arc is incomplete and we need to find the end node , the end level contour , and the triangles . If is a saddle point, we first define the isovalues of level contours for arcs entering and leaving this node. For the incoming arcs, the isovalue is defined as (10) For outgoing arcs, the isovalue is defined as (11) The definition ensures that there is no interference from other critical points and that every arc in the Reeb graph would have a manifold structure. This enables us to use existing algorithms for surface analysis such as finding geodesics [60] .\nFor each component in the lower neighborhood of the saddle point , we trace a level contour at the value on the mesh . From the definition of , we know that this level contour crosses all edges between and vertices in this component. This level contour is represented as a polyline composed of points intersecting edges of at the level . We augment the mesh with this set of new vertices by adding edges. Let and be two consecutive points that intersect the two edges of a triangle in . As shown in Fig. 3 , we either keep this triangle intact or split it into two or three triangles and add them to . Repeating this process for all line segment in this level contour, we add all points to as new vertices in the mesh. Starting with these new vertices in , we then grow backward using the algorithm in Table II and complete an arc  in the  Reeb graph . We set , , and , which are the set of triangles in in the augmented mesh that belong to this arc of the Reeb graph. We repeat this process until all arcs connecting and is crossed by a level contour.\nFor each component in the upper neighborhood of the saddle point , we trace a level contour at the value that cross all edges connecting and vertices in this component. Similarly, this level contour is represented as and all intersecting points in this level contour are added to the augmented vertex set of the mesh . A new, but incomplete, arc in the Reeb graph is created and we increase the current arc label by one. We set , , and set for all newly added vertices . This process is repeated until all edges connecting is crossed. "}, {"section_title": "TABLE II REEB GRAPH ARC GROWING", "text": "If is a maximum, we grow backward with it as the starting point using the algorithm in Table II to complete an  arc . We set , , and the triangle set . By repeating the above process for all critical points, we complete the construction of the Reeb graph . While this Reeb graph is defined on the augmented mesh , which has non-uniform triangles generated from the triangle-splitting process, we can build a map to relate the properties derived from to the original mesh that has regular triangles. For each triangle , the map denotes the triangle in such that is a subset. This is a many-to-one map since the triangles in is obtained by splitting triangles in . By establishing a map between the triangles of and , we build a bridge between the Reeb graph on the augmented surface and the evolution speed defined in the voxel space, which we want to modify with intrinsic Reeb analysis. Once the outliers detected by Reeb analysis are corrected, we can generate the final WM and GM surfaces with the regular mesh structure of to produce high quality mesh representations.\nAs an example, we show in Fig. 4 the construction of the Reeb graph on a double torus. The Morse function, which is the first nonconstant LB eigen-function of the double torus, is plotted in Fig. 4(a) , where the level contours at a saddle point is illustrated. One level contour is generated that crosses edges connecting the lower neighborhood and this saddle point. Two level contours are generated crossing the edges connecting the upper neighborhood and . The arc construction process is illustrated in Fig. 4(b) , where all arcs are plotted in different colors. For each arc, we also plot its two nodes as black dots. In the first step, an arc between a saddle point and a minimum is constructed. In the second, third, and fourth step, arcs between saddle points are added sequentially to the Reeb graph. In the final step, an arc between a maximum and a saddle point is constructed. The final Reeb graph is visualized in Fig. 4(c) by plotting triangles on each arc of with corresponding colors used in Fig. 4(b) , where the graph structure is evident from the neighboring relation of the arcs."}, {"section_title": "IV. UNIFIED ANALYSIS OF GEOMETRIC AND TOPOLOGICAL OUTLIERS", "text": "Similar to previous works [5] - [7] , our system first reconstructs a clean WM surface with the correct topology and then deform it to obtain the GM boundary. In this section, we develop the unified approach for the removal of geometric and topological outliers on the WM boundary. With topology-preserving evolution, the cleaned WM boundary with genus-zero topology is deformed to generate the GM boundary. While we develop this unified approach in the context of WM surface reconstruction, the method is general and applicable to the analysis of surfaces of arbitrary topology. In particular, we apply it to the GM boundary with spherical topology to remove geometric outliers.\nTo remove outliers on the WM boundary, we iteratively modify the WM evolution speed with intrinsic Reeb analysis. Using the WM evolution speed, we first compute paired estimates of the WM boundary with and without topology constraints. By comparing the paired boundary estimates, we derive filling voxels for topological artifacts, which provide the basis for cut or fill decisions in topological analysis if the operation is consistent with underlying tissue properties. By analyzing the intrinsically defined Reeb graph on the WM boundary, we detect geometric and topological outliers and design modifications to the WM evolution speed for their removal. With the modified evolution speed, the above steps are repeated until no change is necessary. Next we describe the details of each step. "}, {"section_title": "A. Paired Boundary Estimates", "text": "Given the WM evolution speed , we use the fast evolution algorithm described in [31] to compute a pair of estimates of the WM boundary for topological analysis. Starting from a genus-zero mask, we evolve the mask toward the boundary under the topology-preserving constraint, which is ensured by only updating points satisfying the simple and well-composedness condition. This generates a genus-zero estimate of the object boundary. The region enclosed by the boundary is denoted as and the background region is denoted as . The triangular mesh representation of the boundary is . For topological analysis, we turn off the topology-preserving constraint and continue the boundary evolution process under the same speed to obtain the second boundary estimate, which can have arbitrary topology. The object and background region determined by this boundary are denoted as and , and the boundary mesh is denoted as . By comparing the paired boundary estimates and , we can locate paired patches on that together fill a handle or tunnel in . For all faces on with their interior voxel in the background region of , i.e., , where the map was defined in Section III-A, we perform a connected component labeling and denote the set of connected components as . For faces in the th component , we define a connected component (CC) label . To find paired patches on that jointly fill a tunnel or handle, we want to find the set of filling voxels that connect different components in and fill topological handles or tunnels. For every voxel in , which is the set of all interior voxels of faces in , we define a set as the paired labels of connected components it bridges. For each face , we first assign its CC label to . Note that there can be at most two components sharing an interior voxel, so there cannot be more than two labels in the paired label set for any voxel . Because a subset of the voxels were included in to satisfy the well-composedness constraint, they do not directly touch two opposing patches in . For each with , we search its six-neighborhood . If there is a voxel that satisfies , which means they together form a bridge to connect two patches, we set and as the union of these two sets. For each face , we assign it the paired label of its interior voxel if\n. Using paired labels, we group triangles with the same paired labels into paired components and denote as the set of filling voxels for topological artifacts. As an illustration, we show in Fig. 7(b) and (d) , the filling voxels for a handle and tunnel, respectively. By analyzing the underlying tissue properties on filling voxels, cut or fill decisions could be made in topological analysis with the inclusion of information from tissue classification.\nFor the unified analysis of geometric and topological outliers on the WM boundary , we compute its LB eigenfunctions and construct the Reeb graph. Let be the first LB eigenfunction of , as illustrated for a WM boundary in Fig. 5(a) , and the Reeb graph of on , where denotes the set of critical points, and the set of arcs. The augmented mesh from the Reeb graph construction is denoted as . The map from the triangles on to is denoted as . Each arc of the Reeb graph , where are the start and end node, and is the set of triangles on this arc in , and are the level contours at the start and end node. The degree of a node in the Reeb graph is the number of arcs that it is either the start or the end node. A node is called a leaf node if its degree is one, and an internal node if its degree is greater than one. The arc connected to a leaf node is called a leaf arc."}, {"section_title": "B. Geometric Outlier Correction", "text": "We detect geometric outliers from the set of leaf arcs in the Reeb graph. Left be a leaf arc with and as the start and end level contour. Using the level contour and , we define an arc feature as follows: (12) where is the outward normal on the surface , and are the mean coordinates of points on and . If , it means is an outward leaf pointing toward the exterior of the cortex; otherwise, it is an inward leaf that points toward the interior of the cortex.\nWe consider this leaf arc as an outlier if it satisfies two conditions (13) where is the sum of area of all triangles in , the parameters and are thresholds selected to identify sharp and small outliers. To further localize geometric outliers, we project the original mesh onto a subset of its LB eigenfunctions and calculate the area distortion of triangles. For each triangle in , its area distortion factor (ADF) is defined as (14) where and are the area of the triangle in the original mesh and the projected mesh . For an outlier leaf arc, we define the set of outlier triangles as , where is the set of triangles obtained by mapping the triangles in to the original mesh , and the parameter is a threshold used for further localization of geometric outliers to triangles that exhibit large area distortions during the projection onto the subspace of LB eigenfunctions [31] . To localize outliers on sub-cortical surfaces, the method in [31] relies exclusively on eigen-projection and needs to use hundreds of eigen-functions to form the subspace. For the much more complicated cortical surfaces, we observe in our experiments that a much larger number of eigen-functions are needed to achieve similar localization of outliers. This is computationally very expensive and clearly infeasible for efficient processing because the number of vertices on a cortical surface is typically two orders of magnitude larger than many sub-cortical structures. If we use the same subspace of the first four eigen-functions, the eigen-projection method in [31] would produce a large number of false positives, especially on the frontal lobe, as shown in Fig. 5(b) . In contrast, we show in Fig. 5(c) and (d) that we can achieve much better performance with the Reeb analysis approach proposed here using the same number of eigen-functions. A zoomed view of detected geometric outliers is plotted in Fig. 5(c) , which shows that the proposed method achieves accurate outlier localization with very few eigen-functions.\nTo remove the outlier, we modify the evolution speed as follows. If is an outward leaf, we set for all so that its interior will be removed. If is an inward leaf, we set for all such that its exterior will be filled and the outlier can be removed. In contrast to previous methods that rely on global smoothness regularization to avoid geometric outliers, our method only modifies the evolution speed locally while leaving other parts of the boundary intact. This greatly decreases shrinkage effect and help improve the accuracy in surface reconstruction."}, {"section_title": "C. Topological Outlier Correction", "text": "For topological analysis, we first remove duplicated arcs in . For any two arcs with the same start and end node, we remove the one with smaller size from and add it as a topological outlier to a set we denote as . After that, we can represent the Reeb graph as a matrix and apply standard graph search algorithms to locate the remaining topological outliers. For any arc , we set , where and are the indexes of the start and end critical points, respectively, and is the area of this arc. We detect topological outliers from redundant paths between saddle points in the Reeb graph. Using the matrix representation of the Reeb graph, we analyze paths starting at each node to locate topological outliers. For a node in the directed graph , if there are more than one out-going arcs, we use breadth-first-search (BFS) to test if an outlier exists. Let denote the set of neighboring nodes which satisfies . For every outgoing arc, we set and perform BFS with as the starting node. This generates a spanning tree of nodes reachable from after the removal of the arc . The spanning tree is recorded as an array . For each node , is the parent node in this spanning tree if it is reached by from . By repeating this step for all outgoing arcs at , we generate a set of BFS trees . The intersection node of these trees is defined as the node with the smallest index such that for all . Starting from the intersection node , we trace backward to the current node on each BFS tree and record the path as . The cost of this is the total area of all arcs on this path. Among all paths we pick the one with the smallest cost and add all arcs on this path to the outlier set as topological outliers. As an illustration, the topological outliers detected with Reeb analysis on the surface in Fig. 5(a) are plotted in red in Fig. 5(c) and (d) . A zoomed view of a topological outlier is plotted in Fig. 5(d) . To provide further localization of topological operations, we compute cutting paths on the handles and tunnels detected by Reeb analysis. For each arc in the outlier set , we first decide if this is a handle or tunnel on the boundary and then apply different analysis strategies to calculate a cutting path. For better illustration, we show in Fig. 6 the two possible cases that a topological outlier can be represented in the Reeb graph. In Fig. 6(a) , the arc of the Reeb graph, which is composed of the triangles plotted in red, captures this outlier attached to a box as a handle. On the other hand, this outlier could also be captured by an arc that forms a tunnel as plotted in Fig. 6(b) . To differentiate these two cases, we compute the arc feature as defined in (12) for each arc . If , which means the centroids of the start and end level contours are enclosed by the surface as in the case plotted in Fig. 6(a) , we classify as a handle. If , which means the centroids of the start and end level contours fall outside the surface as shown in Fig. 6(b) , we classify as a tunnel. For a handle or tunnel, we use a different method to find a cutting path with minimal length if a cut operation is needed. If is a handle, we uniformly sample a set of level contours of the eigenfunction between the start contour and end contour , and pick the contour with the least length as the cutting path. For example, a handle on a WM boundary is plotted in red in Fig. 7(a) and the cutting path as the shortest level contour is plotted in Fig. 7(b) . For a tunnel, we combine two geodesic paths to form a cutting path. The first geodesic goes from the start to the end node within the triangles . The second geodesic goes from the start to the end node without passing through the triangles in . For a tunnel on a WM boundary as shown in Fig. 7(c) , the cutting path that is composed of two geodesics is plotted in Fig. 7(d) .\nWe use information from tissue classification and geometric regularity to make cut/fill decisions about topological outliers. Based on tissue maps, we enforce the anatomical knowledge that gyri on WM surfaces should not enclose CSF. Using the area distortion during eigen-projection, we apply the assumption that the WM surfaces should have similar geometric regularity as a folded sheet. From the analysis of the paired boundary estimates and , we have paired patches on the genus-zero boundary estimate . These patches fill the handles and tunnels on . For each paired patches, its interior voxels are and they are filled inside to satisfy the genus-zero constraint, which are illustrated in Fig. 7 for a handle and tunnel. At a paired patch , a cut decision should be made if either of the following two conditions is met.\n\u2022 If the number of voxels with is greater than .\n\u2022 If the number of triangles with is greater than . Both parameters and are thresholds we choose empirically to identify topological outliers that are not consistent with the underlying image intensity distributions and geometric regularity of cortical surfaces. The first condition checks if filling a handle or tunnel needs more than voxels classified as CSF in the enhanced tissue map. The second condition measures the geometric regularity of the filling patches by calculating if there are more than triangles with its ADF, which is defined in (14) , greater than the threshold used for geometric outlier detection.\nTo implement the cut/fill decision from the analysis of paired patches, we use the handles and tunnels detected by the Reeb analysis process. To cut open a paired component in , we pick a cutting path on a handle or tunnel that is connected to this paired component. For the cutting path of an arc in , we denote as the set of triangles it passes on . We consider a paired component connected to a cutting path if the set is not empty, which means the exterior voxels of faces on the cutting path intersects with the interior voxels of the paired patches. Among all cutting paths intersecting the paired component, we choose the one with the shortest length and denote it as . To cut it open, we modify the evolution speed as (15) Similar to the modification for the removal of geometric outliers, this change to the evolution speed is local and peels off a layer of voxels along the cutting path.\nTo completely cut open a large outlier, this process might be applied to the same outlier during each iteration of our unified outlier correction algorithm. The number of iterations it takes for the topology correction algorithm to converge depends on the complexity of the topological outliers in the mask boundary. In our experience from experiments on various MR datasets, this process typically takes less than five iterations to converge."}, {"section_title": "D. WM and GM Boundary Estimate", "text": "With the modified speed obtained from the geometric and topological analysis process in Sections IV-B and IV-C, we can repeat the above steps in Sections IV-A, IV-B and IV-C until no changes are made to the WM speed. The genus zero estimate then gives a clean estimate of the WM boundary. For the example in Fig. 2(a) , the cleaned WM boundary after the removal of outliers shown in Fig. 5 is plotted in Fig. 8(a) .\nIn order to reconstruct the GM boundary, we evolve the cleaned WM boundary outward using the GM speed defined in (6) under the topology-preserving constraint. To remove geometric outliers on the GM boundary estimate, the Reeb analysis is applied to this genus zero surface and the geometric outlier correction process described in Section IV-B is applied iteratively. By removing the spurious outliers, we obtain a clean estimate of the GM boundary. As an illustration, the cleaned GM boundary corresponding to the example in Fig. 2 is plotted in Fig. 8(c) ."}, {"section_title": "V. SUB-VOXEL ACCURACY WITH ADAPTIVE INTERPOLATION", "text": "After removing geometric and topological outliers, we obtain a clean reconstruction of the boundary between two tissue types. For the WM surface, it is the boundary between WM and GM. For the GM surface, it is the boundary between GM and CSF. To achieve sub-voxel accuracy in the final surface reconstruction, we develop an adaptive interpolation method in this section.\nFor a tissue boundary between a high intensity tissue and low intensity tissue , we denote as the set of rectangular faces and the triangular mesh representation of the boundary surface as defined in Section III-A. The pair could be (3, 2) for the WM boundary or (2, 1) for the GM boundary. For a face , its interior voxel neighbor is and exterior voxel neighbor is . We denote and as the set of interior and exterior neighboring voxels of all rectangular faces on the boundary, respectively.\nFor each voxel , its cuboid has two faces in each of the , , and direction. To calculate the shift of faces for partial volume modeling, we count the number of faces that the intersection of and , i.e., , have in the , , direction and denote them as , and , respectively. We also estimate locally the image intensity for the high intensity tissue as the mean intensity of voxels classified as in the neighborhood centered at . Similarly, the image intensity of the low intensity tissue is estimated locally as the mean intensity of voxels classified as in the same neighborhood. (17) where the shift in each direction is multiplied by the corresponding spatial resolution, and divided by the number of faces that has in that direction. Given the shift of all faces in , we calculate the shift for a vertex as the average shift of its neighboring faces (18) where denote the set of rectangular faces in the neighborhood of the vertex , and is the number of rectangular faces in this set.\nLet denote the vector of coordinates of all vertices, and the shift of all vertices. We compute the final vertex coordinates with sub-voxel accuracy by minimizing the following energy function: (19) where is the optimized vertex coordinate, is the discrete Laplacian matrix of the mesh, and is a regularization parameter. Note that we have chosen the Laplacian instead of the gradient operator in the regularization term to avoid large shrinkage effects from the gradient operator. The solution of this quadratic problem gives us the coordinates of vertices on the smoothed surface (20) By applying the sub-voxel calculation to both the WM and GM surfaces, we obtain our final solution for cortical surface reconstruction. As an illustration, we have plotted the surfaces before and after sub-voxel interpolation in Fig. 8 . Clearly we can see the improved quality in the reconstructed surfaces after the application of the adaptive interpolation scheme."}, {"section_title": "VI. EXPERIMENTAL RESULTS", "text": "In this section, we present experimental results on 40 simulated MR images and T1-weighted real MR images of 200 subjects to demonstrate that our method can reconstruct high quality cortical surfaces on large scale data sets. We also compare our results with surfaces reconstructed with FreeSurfer [5] , [52] , a widely used software for cortical surface reconstruction and analysis in brain imaging research, to demonstrate that our method can obtain better results with significantly less computational cost.\nThe simulated dataset includes a set of 20 simulated MR images from a publicly available dataset [61] , and a set of 20 images we simulated with known gray matter atrophy. The real T1-weighted MR images used in our experiments are from two publicly available databases. The first dataset has 100 baseline MR images, from 50 normal controls (NC) and 50 Alzheimer's disease (AD) patients, from the Alzheimer's Disease Neuroimaging Initiative (ADNI) database [62] 1 . The second dataset includes MR images of 100 subjects from the International Consortium of Brain Mapping (ICBM) [63] . The 100 subjects have a wide age range from 19 to 80.\nAll MR images were first automatically skull-stripped with a meta algorithm [64] in the LONI pipeline [65] . Using the skull- 1 Part of the data used in the preparation of this article were obtained from the Alzheimer's Disease Neuroimaging Initiative (ADNI) database (adni.loni.ucla. edu). ADNI was launched in 2003 by the National Institute on Aging (NIA), the National Institute of Biomedical Imaging and Bioengineering (NIBIB), the Food and Drug Administration (FDA), private pharmaceutical companies and nonprofit organizations, as a $60 million, five year public-private partnership. The primary goal of ADNI has been to test whether serial magnetic resonance imaging (MRI), positron emission tomography (PET), other biological markers, and clinical and neuropsychological assessment can be combined to measure the progression of mild cognitive impairment (MCI) and early Alzheimer's disease (AD). Determination of sensitive and specific markers of very early AD progression is intended to aid researchers and clinicians to develop new treatments and monitor their effectiveness, as well as lessen the time and cost of clinical trials. stripped images, our system and FreeSurfer automatically reconstructed the WM and GM surfaces on the left and right hemispheres in all subjects. For our method, the same set of parameters are used: , , , , ,\n. For FreeSurfer, the default settings were used. All computations are carried out on the grid of the LONI pipeline. In general, our system takes around 2-4 h to reconstruct surfaces from each subject. For FreeSurfer, the surface reconstruction process typically takes around 10-20 h, and the whole workflow, including surface labeling, can take 20-30 h."}, {"section_title": "A. Qualitative Comparisons", "text": "As an illustration, we first present in this experiment a detailed comparison between our method and FreeSurfer using the same MR scan plotted in Fig. 2 . This is an MR image of an AD patient from the ADNI dataset. Representative examples from both the ADNI and ICBM datasets will then be presented to demonstrate that our method can reconstruct surfaces that better preserve the integrity of cortical anatomy.\nFor the MR image of an AD patient, we applied our method and FreeSurfer to reconstruct the WM and GM surfaces on both hemispheres. Computationally our method took around 3 h and is much more efficient than FreeSurfer, which took over 10 h. Both our method and FreeSurfer successfully reconstructed cortical surfaces with genus-zero topology. The unified outlier removal process of our method took around 20 min for each hemisphere. The topological correction process in FreeSurfer took more than one and half hour for each hemisphere. As a more detailed illustration of the Reeb analysis process for outlier removal, we plotted in Fig. 9 the number of nodes in the Reeb graph, the number of geometric outliers, and the number of total handles and tunnels at each iteration of our algorithm. With the increase of iteration, we can see the complexity of the Reeb graph decreases with the number of outliers in the boundary. For this image, it took three iterations for the unified outlier correction algorithm to converge when all geometric outliers were removed and no more cuts to be made. After that, a topology-preserving evolution was applied to reconstruct a genus-zero boundary. The adaptive interpolation scheme developed in Section V was finally applied to reconstruct a smooth and accurate representation of the cortical surface. As an illustration, we plotted the intersection of the image slice shown in Fig. 2(a) with the WM and GM surfaces reconstructed by our method in Fig. 2(g) and (h) . From the results we can see that our method is able to robustly reconstruct the WM and GM boundaries even in the presence of tissue degeneration such as the white matter degeneration on the right hemisphere of this AD patient.\nTo compare the results from our method and FreeSurfer, the left hemispherical WM surfaces reconstructed by both methods are plotted in Fig. 10 . The two WM surfaces have similar number of vertices because they are both derived from the WM mask boundary. The FreeSurfer WM surface has 137 309 vertices, and our WM surface has 138 130 vertices. In regions highlighted in the dashed circles in Fig. 10 , we can see that our method produces more complete reconstruction of the boundary, which is better illustrated with the intersections of surfaces and two axial slices shown in Fig. 10(c) and (f) . The left hemispherical GM surfaces reconstructed with our method and FreeSurfer are plotted in Fig. 11 . Because the FreeSurfer GM surface is obtained by deforming the WM mesh to the GM boundary, it has the same number of vertices as its WM surface and typically has irregular triangles. On the contrary, our method follows the boundary between GM and CSF to generate a more uniform mesh representation of the GM surface. The GM surface reconstructed with our method here has 145 136 vertices, which has slightly more vertices than the WM surface. This is natural in order for the GM surface to have the same level of vertex density and accuracy as the WM surface because it has a larger area than the WM surface. From the highlighted mesh structures of four ROIs in Fig. 11 , we can see that FreeSurfer produced broken gyri in these regions while our method is able to generate more complete reconstruction at these gyri. The intersections of the GM surfaces reconstructed by our method and FreeSurfer with three sagittal slices are shown in Fig. 12 , which illustrate that our surface can better capture deep sulcal regions. This shows that the localized outlier detection and filtering approach in our Fig. 12 . Intersection of image slices with GM surfaces reconstructed with our method (red contours) and FreeSurfer (blue contours). Green arrows point to locations where our surface can better capture deep sulcal regions. Fig. 13 . Comparison of cortical reconstruction results on four ADNI and four ICBM cases. For each case, the result from our method is plotted on the top, and the result from FreeSurfer is plotted on the bottom. Different views are selected for different subjects to better illustrate differences in regions highlighted with dashed circles.\nmethod is able to avoid shrinkage and produce a more accurate surface representation in these regions.\nTo further demonstrate that surfaces generated by our method are able to better represent the integral anatomy of the cortex, we have plotted in Fig. 13 more representative reconstruction results from ADNI and ICBM data. For each subject, the left hemispherical GM surfaces reconstructed by our method and FreeSurfer are plotted with differences highlighted in dashed circles. Compared with results from our method, we can see that FreeSurfer results failed to reconstruct a complete gyrus in the regions enclosed in the dashed circles. This shows that our method is able to produce a more complete representation of cortical anatomy."}, {"section_title": "B. Atrophy Detection on Simulated MR Images", "text": "In this experiment, we will compare our method and FreeSurfer on the detection of simulated atrophy in MR images where the ground truth of WM, GM, and CSF tissue maps are known. By matching reconstructed cortical surfaces with the underlying tissue boundaries, we can analyze the performance of different topology correction strategies in our method and FreeSurfer. Using the reconstructed WM and GM surfaces, we can calculate cortical thickness and compare quantitatively the ability of these two methods in detecting sub-voxel tissue atrophy.\nTo simulate longitudinal brain atrophy, we first downloaded from BrainWeb [66] a set of 20 simulated MR images of normal subjects with known WM, GM, and CSF tissue maps [61] and used them as the baseline images. All images have an isotropic spatial resolution of 1 mm. Using these tissue maps, we simulated a 0.1 mm GM atrophy everywhere on the cortex by modifying intensities in the MR images. For each voxel with more than 10% GM tissue and on the boundary of GM and CSF, we introduced a sub-voxel atrophy by subtracting its intensity by 10% of the difference between the average GM intensity and CSF intensity in the image because we assumed the lost GM tissue in this voxel will be replaced by CSF. By applying this procedure to all baseline images, we obtained a set of 20 images with simulated GM atrophy, which we denoted as follow-up scans of these 20 subjects. Both our method and FreeSurfer were applied to the 40 simulated images to reconstruct the WM and GM cortical surfaces.\nFrom the examples shown in Figs. 10 and 13 , we see various cases that our method is able to generate a more integral reconstruction of the superior temporal cortex than FreeSurfer. With simulated images, we have the opportunity to demonstrate this on images with known tissue boundaries. In Fig. 14(a) and (d) , we plotted the left WM surfaces reconstructed from one of the baseline images with our method and FreeSurfer, where we can clearly see that our result has a more integral representation of the superior temporal cortex. For both methods, we extracted the WM boundary before topology correction to investigate the cause of this difference. In Fig. 14(b) and (d), we plotted the corresponding WM boundary without topology correction in the region highlighted by the dashed ellipses in Fig. 14(a) and (d) , respectively. In both cases, we can see a hole is clearly present on the superior temporal gyrus. Different correction strategies were adopted by these two methods: our method chose to fill the hole, while FreeSurfer decided to cut it open. As a result, different surface reconstruction results were obtained as shown in Fig. 14(c) and (f) . The intersection of the reconstructed surfaces with two sagittal slices of the underlying true WM tissue map were plotted in Fig. 14(g ) and (h), where our result was plotted in red and the FreeSurfer result was plotted in blue. As highlighted by the green arrows in these two pictures, we can see that our result provides a more faithful representation of the underlying tissue boundary at the superior temporal cortex.\nTo compare the performance of our method and FreeSurfer in the detection of simulated longitudinal atrophy, we parcellated all cortical surfaces into gyral regions and tested for GM thickness changes in each region. In this work, we used the gyral labels on GM surfaces generated by FreeSurfer for a localized comparison. In order to project the FreeSurfer label onto our surface, we aligned both surfaces in the image space. For each vertex on our surface, we found the nearest vertex on the FreeSurfer surface such that the normal directions of both vertices have positive inner products and pulled back the label on this vertex. As an illustration, we plotted in Fig. 15 the labels on the GM surfaces generated by FreeSurfer and our method as shown in Fig. 11 . We can see that we have successfully mapped the gyral labels onto the GM surface generated by our method. At each point of a GM surface, we used its distance to the closest point on the WM surface as the measure of thickness [7] , [67] . Numerically, we first computed the signed distance function of the WM surface with the fast marching method [68] , and then calculated the thickness at each vertex of the GM surface with sub-millimeter accuracy by interpolating the value of the signed distance function. For surfaces generated by both our method and FreeSurfer, the same approach of thickness calculation was applied for consistency. On results generated by both our method and FreeSurfer, we calculated the change of mean thickness on each gyrus between the follow-up and baseline scan of each subject. On each gyrus, a two-tailed t-test was applied to the thickness changes of the 20 subjects and tested if we could reject the null-hypothesis that there is no significant change of thickness between the baseline and follow-up scan. For cortical surfaces generated by our method and FreeSurfer, the -values obtained from the t-tests at each gyrus were mapped onto the corresponding gyrus of a subject and plotted in Fig. 16 , where -values larger than 0.01 were considered insignificant and plotted in light gray. From the results, it is clear that our method was able to detect significant atrophy in more regions and generate more significant -values than FreeSurfer. More specifically, on the left hemisphere, our results produced more significant -values on 20 of the 34 gyral regions. On the right hemisphere, our results produced more significant -values on 25 of the 34 gyral regions. Next we will demonstrate that our method can achieve more statistically significant results than FreeSurfer on the real data from ADNI and ICBM."}, {"section_title": "C. Quantitative Comparisons on ADNI Data", "text": "In the third experiment, we applied both our method and FreeSurfer to the 100 MR images from ADNI. To compare the performance of our method and FreeSurfer in detecting group differences, we parcellated cortical surfaces into gyral regions and use the mean thickness of each gyrus as the variable for statistical tests. As described in the previous experiment, we used the gyral labels on GM surfaces generated by FreeSurfer to parcellate our surfaces via nearest neighbor projection.\nFor surfaces generated by both methods, the thickness of each vertex on the GM surface was computed as its distance to the corresponding WM surface. For each gyrus, we computed the average gray matter thickness and tested group differences between NC and AD using two tailed t-tests. As an illustration of the thickness differences across groups, we plotted in Fig. 17 the mean thickness of gyral regions from the NC and AD group. By comparing the thickness of corresponding gyrus from the two groups, we can clearly see that the AD group have thinner cortex throughout the brain. For the results produced by our method and FreeSurfer, the -values from t-tests were mapped onto the corresponding gyrus of the left hemisphere (LH) and right hemisphere (RH), and plotted in Fig. 18 . Note that -values larger than 0.01 were considered insignificant and plotted in light gray.\nWe can see that both methods are very effective in detecting differences between the NC and AD groups on both hemispheres, whereas the degrees of difference vary on different gyri. For the left hemisphere, results from our method produces more significant -values on 33 of the 34 regions. For the right hemisphere, our results generate more significant -values on 30 of the 34 regions.\nFor the two-tailed t-test on the mean thickness of each gyrus, we also performed power analysis [69] to compare the power of thickness features generated by our method and FreeSurfer in detecting group differences. The power of the t-test is the probability that the null hypothesis will be rejected if it is false. The type I error, i.e., the -value, was set to 0.01. For each method, the effective size at a gyrus was computed as [69] , where and were the mean thickness of the NC and AD group, respectively, and was the pooled standard deviation. The power was computed with the software tool PS [70] . For both our method and FreeSurfer, we counted the number of gyri in each hemisphere with power greater than four thresholds 0.99, 0.95, 0.90, 0.85. The results are listed in Table III . We can see from the power analysis that our method is able to generate more sensitive thickness features on both hemispheres for all thresholds. From a study design point of view, this shows the thickness features derived from our method has the potential of reducing sample sizes in experiments for AD research."}, {"section_title": "D. Quantitative Comparisons on ICBM Data", "text": "In the fourth experiment, we tested on MR images of 100 subjects from the ICBM database. We split the 100 subjects into young and elderly groups using an age threshold of 48 years such that each group had 50 subjects. For each subject, we downloaded two scans for our experiments. For the first scan of each subject, we applied our method and FreeSurfer for comparison. The repeat scan of each subject will be used to demonstrate the reproducibility of our method.\nUsing surfaces generated by both methods on the first scan of each subject, we tested for group differences between the young and elderly groups and compared the statistical power of our method and FreeSurfer. Using the same method described in Section VI-B, we projected FreeSurfer labels onto the surfaces generated by our method and applied two-tailed t-tests to the mean thickness of each gyrus from the young and elderly groups. The mean thickness of gyral regions obtained from our method were plotted in Fig. 19 , where we can see that the elderly group have lower thickness throughout the cortex. The -value maps generated by our method and FreeSurfer were plotted in Fig. 20 , where the same colormap as in Fig. 18 was used and -values over 0.01 were plotted in light gray. For each hemisphere, t-tests with thickness measures generated by our method have more significant -values than FreeSurfer on 33 of the 34 gyri.\nSimilar to the experiment on ADNI data, we also performed power analysis for the mean thickness measure generated by our method and FreeSurfer at each gyrus. For both methods, the -value was set to 0.01, and the effective size was computed as , where and were the mean thickness of the young and elderly groups, and was the pooled standard deviation. For each method, we counted the number of gyrus on each hemisphere with power exceeding the thresholds. The results were listed in Table IV . On this data set, we can see our method is able to generate a much larger number of sensitive thickness features than FreeSurfer. This demonstrates that our method achieves better performance on both the ADNI and ICBM datasets with very different demographic distributions.\nTo test the reproducibility of our method, we also applied our method to the repeat scan from each of the 100 subjects in the ICBM dataset. To parcellate each GM surface reconstructed from a repeat scan into gyral regions, we rigidly aligned it with the corresponding GM surface from the first scan and used the nearest neighbor projection as described in Section VI-B to generate the gyral labels. For the results obtained from the repeat scans, the same power analysis was applied to the mean thickness of each gyrus from the young and elderly group. The results were listed in Table V . Compared with the results from the first scans, we can see that our method is able to successfully generate very similar and large numbers of sensitive thickness features in the repeat scans, which demonstrates the reproducibility of our method. In this paper we have developed a novel system for automated cortical reconstruction from T1-weighted MR images. We have demonstrated that our system is able to generate high quality surfaces with much reduced computational cost when compared with FreeSurfer. The unified approach presented in this work for the analysis of geometric and topological structures, while developed in the context of cortical reconstruction, is general and applicable for other medical image analysis problems.\nIn this work, we focused on the reconstruction of the WM and GM surfaces. There are also considerable interests in obtaining a central cortical surface from MR images as a balanced representation of the WM and GM surfaces [7] . There are two different approaches we can follow to achieve this goal. Using the reconstructed WM and GM surfaces, a surface evolution algorithm can be developed as in [7] to evolve the WM surface to the middle of the GM tissue. We can also take a shape analysis approach to find the central cortical surface. In our recent work, we developed an intrinsic surface mapping method that can evolve the WM and GM surface toward each other in a high dimensional embedding space by optimizing their conformal metrics [43] . By establishing one-to-one correspondences between the WM and GM surface with this intrinsic mapping algorithm, we can compute the central cortical surface as the mean shape of the WM and GM surface. Using the one-to-one map between the WM and GM surfaces, we can also develop a more robust method to compute cortical thickness than using the distance transform of the WM surface, which can result in possible underestimation of thickness in the extreme case of neighboring sulcal banks with highly uneven thickness.\nIn future work, we will also perform more extensive validations on data from a wide range of neuroimaging studies, and extend the system to the consistent reconstruction of surfaces on data from longitudinal studies [11] , [71] ."}, {"section_title": "ACKNOWLEDGMENT", "text": "Part of the data used in preparation of this paper were obtained from the Alzheimer's Disease Neuroimaging Initiative (ADNI) database (adni.loni.ucla.edu). As such, the investigators within the ADNI contributed to the design and implementation of ADNI and/or provided data but did not participate in analysis or writing of this report. A complete listing of ADNI investigators can be found at: http://adni.loni.ucla.edu/wp-content/uploads/how_to_apply/ADNI_Acknowledgement_List.pdf."}]