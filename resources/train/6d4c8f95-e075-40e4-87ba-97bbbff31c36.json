[{"section_title": "Abstract", "text": "Abstract. Over the past decades, state-of-the-art medical image segmentation has heavily rested on signal processing paradigms, most notably registration-based label propagation and pair-wise patch comparison, which are generally slow despite a high segmentation accuracy. In recent years, deep learning has revolutionalized computer vision with many practices outperforming prior art, in particular the convolutional neural network (CNN) studies on image classification. Deep CNN has also started being applied to medical image segmentation lately, but generally involves long training and demanding memory requirements, achieving limited success. We propose a patch-based deep learning framework based on a revisit to the classic neural network model with substantial modernization, including the use of Rectified Linear Unit (ReLU) activation, dropout layers, 2.5D tri-planar patch multi-pathway settings. In a test application to hippocampus segmentation using 100 brain MR images from the ADNI database, our approach significantly outperformed prior art in terms of both segmentation accuracy and speed: scoring a median Dice score up to 90.98% on a near real-time performance (< 1s)."}, {"section_title": "Introduction", "text": "Modern medical practices often involve the use of imaging technology (e.g. MRI) to examine pathology in vivo. Image segmentation is often a pre-requisite to further interventions. Due to the complexity and visual similarity of anatomical structures under medical imaging, state-of-the-art approaches often leverage a set of labeled training data, called atlases. Typically, the atlases are non-rigidly registered with a target image, and labels are propagated to perform segmentation by multi-atlas label propagation (MALP) [1] . However, MALP generally requires a non-rigid registration between every atlas-target pair, which is timeconsuming with a large atlas set. Other researchers have proposed a patch-based segmentation (PBS) framework [2, 3] , in which the voxel-to-voxel correspondence for label propagation is relaxed to retrieve only matching patches from linearly aligned atlases for weighted label fusion. Patch similarity is typically measured using the sum of squared differences (SSD) in the form of pair-wise comparison. Since no non-rigid registration is required, it thus avoids the risk of registration failure and the need for pair-wise transformation, etc. Nevertheless, segmentation efficiency remains low, mostly due to the pair-wise patch comparison at run-time, although final speed may vary with different patch search methods. Furthermore, due to significant inter-subject variability, usually only a subset of atlases most similar to target image are used to improve performance in both frameworks, which raises the issue of atlas selection.\nIn recent years, deep learning has revolutionalized computer vision with many practices outperforming prior state-of-the-art, most notably the convolutional neural network (CNN) studies on image classification [4] . In fact, early artificial neural network (ANN) research dates back to 1950s, yet has since achieved limited success, until modern GPU programming meets its massive computational requirement for network training. A neural network consists of a number of layers, each is composed by a set of independent neurons, and each neuron stores a feature function that takes an input vector and outputs a scalar value. With a deep structure (i.e. many layers), the aggregate feature function can be highly sophisticated and enables excellent classification capabilities. However, since an image may easily scale to millions of pixels, leading to millions of learning weights for a neuron and thousands of such neurons in a network, this architecture will quickly end up over-fitting. As a variant model, a CNN layer filters an input image with a sliding convolution kernel and outputs a multi-channel feature image (each channel corresponds to a neuron). The initial input is filtered layer-bylayer until an output layer that takes the aggregate features for classification. Deep CNN can also achieve sophisticated feature extraction while using far fewer learning weights, making it more robust and more popular than classic ANN for image classification. Although at a limited scale, deep CNN has started being applied to medical image segmentation lately [5, 6, 7] . Typically, segmentation is broken down to voxel-wise labeling on a patch-based setting, where a patch is treated as a mini-image for classification of its center voxel.\nHowever, voxel-wise label classification using deep CNNs generally involves thousands of neuron-wise convolution on each single run, leading to long training and demanding memory requirements (e.g. 5-6 days on two GPUs in [4] ). Moreover, existing CNN segmentation work is often based on a nesting structure that integrates with other models such as superpixels [5] or conditional random fields [6] , further complicating computation. By contrast in this paper we propose a patch-based deep neural network (patchDNN) based on a revisit to the classic ANN with substantial modern adaptations, in particular: a) the use of Rectified Linear Unit (ReLU) activation which speeds up training multiple times in other studies [4] , b) deployment of dropout layers to address over-fitting [8] , c) employment of 2.5D tri-planar patch multi-pathway setting [7] that secures a high accuracy at much lower computational cost and memory consumption than the conventional 3D setting. Although our approach is general, we conducted experimentation on hippocampus segmentation, and achieved a median Dice score up to 90.98% at a near real-time speed (<1s). To the best of our knowledge, this is the fastest algorithm with highest segmentation accuracy ever reported. "}, {"section_title": "Validation Database", "text": "A validation study has been conducted on the brain MRI data drawn from the Alzheimer's Disease Neuroimaging Initiative database (http://adni.loni. usc.edu). As a pilot study, 100 brain images were randomly picked: 34 healthy subjects, 33 with mild cognitive impairment (MCI) and 33 AD patients, with a demographic profile presenting no statistically significant difference on age and MMSE score from the whole database (p \u2212 value > 0.1). All images were bias-corrected and linearly aligned in the widely-used MNI152 template space. Each image also includes a reference manual segmentation of the hippocampus. A sample image superimposed with its label map is shown in Fig. 1 ."}, {"section_title": "Approach Overview", "text": "Our approach carries out voxel-wise label classification using patch-based contextual information of each target voxel. In contrast to the time-consuming pair-wise patch comparison using low-level features (e.g. SSD) for label fusion in the prior art, we train a patch-based deep neural network (PatchDNN) that serves as both a sophisticated feature extraction mechanism and a classifier. The PatchDNN takes patch data as input and projects it to a high-level feature space through a set of deeply learned non-linear functions, followed by softmax classification. In this case, segmentation at run-time can become extremely fast and highly accurate. Furthermore, the 2.5D tri-planar patch setting [7] is borrowed, which takes three 2D patches respectively from the axial, coronal and sagittal planes as the input. It achieves comparable segmentation accuracy (sometimes better [7] ) as the conventional 3D patch setting at a much smaller computational cost. In an abstract sense, the PatchDNN model can be formulated as:\nwhere\nare the tri-planar patches for target voxel v, F is a feature vector generated by the feature extraction function h(\u00b7, \u00b7, \u00b7), L is a vector of label values obtained by the softmax classifier, and l is the output label, which is assigned to the label class c carrying the highest label value L c . "}, {"section_title": "Network Architecture", "text": "The network contains 6 feature extraction layers and 2 dropout layers before a final softmax layer to output label values for classification, as shown in Fig. 2 . All layers preceding the softmax layer collectively model the h(\u00b7, \u00b7, \u00b7) in Eq. (1). Each neuron in a feature extraction layer, pairing with a subsequent ReLU unit, independently generates a feature response by the following compound function:\nwhere w\nand b (k) are learnable weights for the ith entry of (interim) input x at kth neuron. The ReLU activation introduces non-saturating non-linearity, which was found able to speed up gradient descent training process multiple times than the traditional Sigmoid and Tanh activation functions [4] . Furthermore, the first two feature extraction layers contain three pathways, respectively for each of the tri-planar patches. Starting the third layer, all three pathways merge into one, which becomes a standard fully connected layer. Such design significantly reduces the number of weights to train compared to a scheme with full connectivity from the beginning, and meanwhile secures a sophisticated level of feature representation. In addition, Layer 5 and 7 are dropout layers. A dropout layer randomly disconnects each neuron from the network at probability , which is typically set to 0.5 during training and 0 (i.e. no dropout) at test time [8] . The purpose of dropout is to simulate the network as a combination of several networks trained separately, which can empirically reduce over-fitting."}, {"section_title": "Network Training", "text": "Our framework performs a supervised learning scheme, where the patch tuple < P 1 (v), P 2 (v), P 3 (v) > collectively represents a single training data entry d and the center voxel label in the reference segmentation indicates its supervisory output l * . In terms of cost function, we resort to the widely-used cross entropy:\nwhere\nn ] represent the training data and ground truth, while \u03a6 (j) (X) denotes PatchDNN output at training step j. Moreover, a number of leading-edge training techniques are employed in this work:\nPruning training pool with ROI mask: due to the structural similarity of human brains, hippocampi in different images locate spatially close (after linear alignment). We therefore apply a mask over the region of interest (ROI), created by taking the union of all labels in all atlases, followed with minor dilation. The mask was manually checked to ensure it fully covers each hippocampus and immediate neighborhood in each image. This can reduce training pool to a small fraction, dramatically lowering computational volume and memory consumption. Mini-batch stochastic gradient descent: moreover, the modern mini-batch gradient descent optimization scheme is employed. It takes a small batch (denote size \u03b4) of training data X and Y , randomly sampled from the training pool, to perform an optimization step each time, instead of extending to the entire pool. Foreground/background separate sampling: background labels often significantly outnumber foreground labels, even within an ROI mask. In our case, the ratio was over 10:1. Such label imbalance could lead to a trained PatchDNN over-fitting the background label class. To address the issue, for each mini-batch we draw half the samples from foreground and half from background. This enables each foreground data entry to be trained multiple times of a background counterpart, and was proven able to effectively improve segmentation accuracy."}, {"section_title": "Results", "text": ""}, {"section_title": "Experimental setting and evaluation method", "text": "Experimentation was carried out using cross-validation. The 100 images in the test database were divided into ten equally-sized folds via random distribution. A leave-one-out strategy was applied in each experiment, with nine folds to train a network and the remaining fold for testing. In total, there were ten instances of network training and 100 instances of segmentation for each experimental setting, which is considered adequate for our proof-of-concept purpose. Segmentation accuracy was measured using the Dice score (a.k.a. the kappa or similarity index), which is a prevailing metric standard computed by Dice(A, B) = 2|A\u2229B| |A|+|B| , i.e. the number of matching labels between segmentation A and ground truth B, divided by the total number of labels in both label maps."}, {"section_title": "Training parameters", "text": "In this study, there were around 70, 000 patch tuples extracted from each atlas, which amounted to 63 million data entries (90 atlases), collectively used to train a network with O(10 5 ) weights in each test. At training stage, the only major parameters to tune were: 1) patch size p \u00d7 p, 2) learning rate \u03b7, 3) mini-batch size \u03b4. For simplicity, \u03b4 was fixed at 200 entries for each training step. In terms of patch size, we tested four settings, respectively 9\u00d79, 11\u00d711, 13\u00d713 and 15\u00d715. The performance metrics are shown in Fig. 3(left) . The highest median dice score achieved (13 \u00d7 13 setting) was 90.98%, which to the best of our knowledge, is by far the highest accuracy level ever reported on hippocampus segmentation. The 9 \u00d7 9 setting scored slightly lower than the others at 87.75% level, yet still outperformed prior state-of-the-art (to be detailed in Section 3.4). The learning rate is the tricky bit, and can dramatically affect training outcome. Figure 3 (right) illustrates the impact of three rates: \u03b7 = 10 \u22124 , \u03b7 = 10 \u22125 and \u03b7 = 10 \u22126 , on the accuracy of a PatchDNN using 13 \u00d7 13 patches: \u03b7 = 10 \u22124 was too high and \u03b7 = 10 \u22126 too low, whereas \u03b7 = 10 \u22125 was considered the best rate in this case, which was also the rate used in our final setting. A sample segmentation outcome using a 13 \u00d7 13 PatchDNN trained 5 million times at \u03b7 = 10 \u22125 is illustrated in Fig. 4 (middle) , in comparison to the reference segmentation (left)."}, {"section_title": "Training and testing time", "text": "The experimental environment was deployed on a standard PC with an NVIDIA GTX Titan X graphics card. During training, each gradient descent step took around 0.01s. Since it generally takes millions of steps to secure good performance, the total training time may take up to 10+ hours. In stark contrast, image segmentation at test time achieved a near real-time speed, taking < 1s for each target image. To the best of our knowledge, this is by far the fastest hippocampus segmentation system, with only the PatchMatch method [9] having reported a comparable speed."}, {"section_title": "Comparison with prior state-of-the-art: PBS framework", "text": "To further demonstrate the superiority of our framework, we also tested the PBS method [2] for direct comparison. The implementation was based on the built-in PBS framework in the open source IRTK repository (https://github. com/BioMedIA/IRTK). To ensure fairness, we rigorously applied the same preprocessing described in [2] , including nonlocal means denoising [10] , N3 bias correction and tissue-standardizing normalization [11] . For each target image, we then selected 10 atlases with lowest overall SSD within the masked ROI to perform segmentation. Two patch settings were tested: 5 \u00d7 5 \u00d7 5 (PBS-1) and 7 \u00d7 7 \u00d7 7 (PBS-2), over a search window 11 \u00d7 11 \u00d7 11, which were arguably two best performing settings in [2] . The metrics are also shown in Fig. 3 (left) for easy comparison. The best median Dice score obtained was 86.65%, a level somewhat below the 88.4% in the authors' own work, which might be caused by the use of different experimental datasets. However, by any means the performance was notably lower than our PatchDNN approach. A comparative segmentation outcome is illustrated in Fig. 4 . Moreover, efficiency boost was even more evident, with PBS-1 and PBS-2 respectively taking an average 197s and 645s (excluding pre-processing) to segment a target image, compared to our near real-time level."}, {"section_title": "Discussion and Conclusion", "text": "Over the past decades, image segmentation in the biomedical domain in general has heavily rested on signal processing paradigms, with non-rigid registration (for MALP) and pair-wise patch comparison (for PBS) being the cornerstones of prior state-of-the-art. Although at a much limited scale, machine learning has been increasingly practiced in recent years. Machine learning approaches tend to be much faster than signal processing counterparts, however the level of sophistication for feature representation has been a limiting factor to secure a comparable accuracy using conventional frameworks such as random forests. Deep learning in contrast, by projecting contextual information over a series of nonlinear neuron-layers, is able to achieve highly sophisticated feature extraction and train a high performance classifier in terms of both accuracy and efficiency.\nDeep CNN is the model behind many groundbreaking image classification studies that overtook prior art in computer vision over recent years. Its major advantage for image classification over classic ANN is a comparatively small number of learning weights (although many systems still scale to millions, e.g. [4] ), whereas a fully connected ANN applied to a large image would end up with an overwhelming number of learning weights that easily lead to over-fitting. In the case of (medical) image segmentation however, we argue such concern in the patch-based (mini-image) setting is not as significant as at full image scale, and can be further relieved by the employment of modern techniques such as dropout layers and tri-planar patch multi-pathway setting. For that reason, we abandon the popular CNN model and propose PatchDNN, which can be considered a modernized classic ANN model. Without large-scale neuron-wise convolution on each single run, a PatchDNN trains much faster than a deep CNN while consuming far less memory. Moreover, advanced training techniques have also been utilized, in particular GPU programming, stochastic gradient descent and ReLU activation, which collectively reduce training time dramatically and make such an approach very practical. In a test application to hippocampus segmentation using 100 brain MR images from the ADNI database, our framework was able to significantly outperform the prior state-of-the-art PBS approach, in terms of both segmentation accuracy and speed: scoring a median Dice score up to 90.98% with a near real-time performance (< 1s) on a modern GPU."}]