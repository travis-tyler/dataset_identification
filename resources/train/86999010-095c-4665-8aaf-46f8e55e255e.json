[{"section_title": "Abstract", "text": "Persistent cycles, especially the minimal ones, are useful geometric features functioning as augmentations for the intervals in the purely topological persistence diagrams (also termed as barcodes). In our earlier work, we showed that computing minimal 1-dimensional persistent cycles (persistent 1-cycles) for finite intervals is NP-hard while the same for infinite intervals is polynomially tractable. In this paper, we address this problem for general dimensions with Z 2 coefficients. In addition to proving that it is NP-hard to compute minimal persistent dcycles (d > 1) for both types of intervals given arbitrary simplicial complexes, we identify two interesting cases which are polynomially tractable. These two cases assume the complex to be a certain generalization of manifolds which we term as weak pseudomanifolds. For finite intervals from the d th persistence diagram of a weak (d + 1)-pseudomanifold, we utilize the fact that persistent cycles of such intervals are null-homologous and reduce the problem to a minimal cut problem. Since the same problem for infinite intervals is NP-hard, we further assume the weak (d + 1)-pseudomanifold to be embedded in R d+1 so that the complex has a natural dual graph structure and the problem reduces to a minimal cut problem. Experiments with both algorithms on scientific data indicate that the minimal persistent cycles capture various significant features of the data."}, {"section_title": "Introduction", "text": "Persistent homology [15] , which captures essential topological features of data, has proven to be a useful stable descriptor since Edelsbrunner et al. [16] first proposed the algorithm for its computation. The understanding of topological persistence was later expanded by several works [5, 9, 11, 29] in terms of both theory and computation. To make use of persistent homology, one typically computes a persistence diagram (also called barcode) which is a set of intervals with birth and death points. Besides just utilizing the set of intervals, some applications [13, 28] need persistence diagrams augmented with representative cycles for the intervals for gaining more insight into the data. These representative cycles, termed as persistent cycles [13] , have been studied by Wu et al. [28] , Obayashi [23] , and Dey et al. [13] recently from the view-point of optimality.\nAlthough the original persistence algorithm of Edelsbrunner et al. [16] implicitly computes persistent cycles, it does not necessarily provide minimal ones. In an earlier work [13] , we showed that it is NP-hard to compute minimal persistent 1-cycles (cycles for 1-dimensional homology groups) when the given interval is finite. Interestingly, the same for infinite intervals turned out to be computable in polynomial time [13] . This naturally leads to the following questions: Are there other interesting cases beyond 1-dimension for which minimal persistent cycles can be computed in polynomial time? Also, what are the cases that are NP-hard? In this paper, we settle the complexity question for computing minimal persistent cycles with Z 2 coefficients in general dimensions. We first show that when d \u2265 2, computing minimal persistent d-cycles for both finite and infinite intervals is NP-hard in general. We then identify a special but important class of simplicial complexes, which we term as weak Specifically, we find that if the given complex is a weak (d + 1)-pseudomanifold, the problem of computing minimal persistent d-cycles for finite intervals can be cast into a minimal cut problem (see Section 3) due to the fact that persistent cycles of such kind are null-homologous in the complex. However, when d \u2265 2 and intervals are infinite, the computation of the same becomes NP-hard (see Section 5) . Nonetheless, for infinite intervals, if we assume that the weak (d + 1)-pseudomanifold is embedded in R d+1 , the minimal persistent cycle problem reduces to a minimal cut problem (see Section 4) and hence belongs to P. Note that a simplicial complex embedded in R d+1 is automatically a weak (d + 1)-pseudomanifold. Also note that while there is an algorithm [8] in the non-persistence setting which computes minimal d-cycles by minimal cuts, the non-persistence algorithm assumes the (d + 1)-complex to be embedded in R d+1 . Our algorithm for finite intervals, to the contrary, does not need the embedding assumption.\nIn order to make our statements about the hardness results precise, we let PCYC-FIN d denote the problem of computing minimal persistent d-cycles for finite intervals when the given simplicial complex is arbitrary, and let PCYC-INF d denote the same problem for infinite intervals (see definitions of Problem 1 and 2). We also let WPCYC-FIN d denote a subproblem \u2020 of PCYC-FIN d and let WPCYC-INF d , WEPCYC-INF d denote two subproblems of PCYC-INF d , with the subproblems requiring additional constraints on the given simplicial complex. Table 1 lists the hardness results for all problems of interest, where the column \"Restriction on K\" specifies the additional constraints subproblems require on the given simplicial complex K. Note that WPCYC-INF d being NP-hard trivially implies that PCYC-INF d is NP-hard. Table 1 : Hardness results for minimal persistent cycle problems with bold results denoting new findings in this paper."}, {"section_title": "Related works", "text": "In the context of computing optimal cycles, most works have been done in the non-persistence setting. These works compute minimal cycles for homology groups of a given simplicial complex. Only very few works address the problem while taking into account the persistence. We review some of the relevant works below.\nMinimal cycles for homology groups. In terms of computing minimal cycles for homology groups, two problems are of most interest: the localization problem and the minimal basis problem. The localization problem asks for computing a minimal cycle in a homology class and the minimal basis problem asks for computing a set of generating cycles for a homology group whose sum of weights is minimal. With Z 2 coefficients, these two problems are in general hard. Specifically, Chambers et al. [4] proved that the localization problem over dimension one is NP-hard when the given simplicial complex is a 2-manifold. Chen and Freedman [8] proved that the localization problem is NP-hard to approximate with fixed ratio over arbitrary dimension. They also showed that the minimal basis problem is NP-hard to approximate with fixed ratio over dimension greater than one. For one-dimensional homology, Dey et al. [14] proposed a polynomial time algorithm for the minimal basis problem. Several other works [7, 12, 18] address variants of the two problems while considering special input classes, alternative cycle measures, or coefficients for homology other than Z 2 .\nIn this work, we use graph cuts and their duality extensively. The duality of cuts on a planar graph and separating cycles on the dual graph has long been utilized to efficiently compute maximal flows and minimal cuts on planar graphs, a topic for which Chambers et al. [4] provide a comprehensive review. In their paper [4] , Chambers et al. discover the duality between minimal cuts of a surfaceembedded graph and minimal homologous cycles in a dual complex, and then devise O(n log n) algorithms for both problems assuming the genus of the surface to be fixed. Chen and Freedman [8] proposed an algorithm which computes a minimal non-bounding d-cycle given a (d + 1)-complex embedded in R d+1 , utilizing a natural duality of d-cycles in the complex and cuts in the dual graph. The minimal non-bounding cycle algorithm can be further extended to solve the localization problem and the minimal basis problem over dimension d given a (d + 1)-complex embedded in R d+1 .\nPersistent cycle. As pointed out earlier, our main focus is the optimality of representative cycles in the persistence framework. Some early works [17, 19] address the representative cycle problem for persistence by computing minimal cycles at the birth points of intervals without considering what actually die at the death points. Wu et al. [28] proposed an algorithm computing minimal persistent 1-cycles for finite intervals using an annotation technique and heuristic search. However, the time complexity of the algorithm is exponential in the worst-case. Obayashi [23] casts the minimal persistent cycle problem for finite intervals into an integer program, but the rounded result of the relaxed linear program is not guaranteed to be optimal. Dey et al. [13] formalizes the definition of persistent cycles for both finite and infinite intervals. They also proved the NP-hardness of computing minimal persistent 1-cycles for finite intervals and proposed a polynomial time algorithm for computing non-optimal ones which are still good in practice."}, {"section_title": "Preliminaries", "text": "In this section we present some concepts necessary for presenting the results in this paper.\nSimplicial complex and filtration. A simplicial complex K is a collection of simplices which are abstractly defined as subsets of a ground set called the vertex set of K. If a simplex \u03c3 is in K, then all its subsets called its faces are also in K. The simplex \u03c3 is also referred to as a q-simplex if the cardinality of the vertex set of \u03c3 is q + 1. A q-face of \u03c3 is a q-simplex being face of \u03c3 and a q-coface of \u03c3 is a q-simplex having \u03c3 as a face. A simplicial set is a set of simplices. The closure of a simplicial set \u03a3 is the simplicial complex consisting of all the faces of the simplices in \u03a3. A simplicial complex is finite if it contains finitely many simplices. In this paper, we only consider finite simplicial complexes.\nIf each vertex of a simplicial complex K is a point in a Euclidean space, then each simplex of K can be interpreted as the convex hull of its vertices. The simplicial complex K is said to be embedded in the Euclidean space if the interiors of all its simplices are disjoint. The underlying space of K, denoted by |K|, is the point-wise union of all the simplices of K.\nA filtration F of a simplicial complex K is a filtered sequence of subcomplexes of K,\nWe let i be the index of \u03c3 F i in F and denote it as ind(\u03c3 F i ) = i. A subcomplex K i in the filtered sequence of F is also referred to as a partial complex.\nHomology. In this paper, two coefficients Z 2 and Z are used for simplicial homology. When not explicitly stated, the coefficients are assumed to be in Z 2 . For a simplicial complex K, C q (K) denotes the q th chain group, Z q (K) denotes the q th cycle group, B q (K) denotes the q th boundary group, and H q (K) denotes the q th homology group. The boundary operator for simplicial chains is denoted by \u2202. With Z 2 coefficients, a q-cycle is a set of q-simplices so that every (q \u2212 1)-face of these simplices adjoins an even number of q-simplices. We recommend the book by Hatcher [21] for more details on homology groups and algebraic topology in general.\nDefinition 2 (q-weighted). A simplicial complex K is q-weighted if each q-simplex \u03c3 of K has a nonnegative finite weight w(\u03c3). The weight of a q-chain A of K is then defined as w(A) = \u03c3\u2208A w(\u03c3).\nDefinition 3 (q-connected). Let K be a simplicial complex, for q \u2265 1, two q-simplices \u03c3 and \u03c3 of K are q-connected in K if there is a sequence of q-simplices of K, (\u03c3 0 , . . . , \u03c3 l ), such that \u03c3 0 = \u03c3, \u03c3 l = \u03c3 , and for all 0 \u2264 i < l, \u03c3 i and \u03c3 i+1 share a (q \u2212 1)-face. The property of q-connectedness defines an equivalence relation on q-simplices of K. Each set in the partition induced by the equivalence relation constitutes a q-connected component of K. We say K is q-connected if any two q-simplices of K are q-connected in K.\nRemark 1. See Figure 2a for an example of 1-connected components and 2-connected components.\nDefinition 4 (q-connected cycle). A q-cycle \u03b6 (with Z 2 coefficients) is q-connected if the complex derived by taking the closure of the simplicial set \u03b6 is q-connected.\nPersistent homology. We will provide a brief description of persistent homology. We recommend the book by Edelsbrunner and Harer [15] for a detailed explanation of this topic and the book by Chazal et al. [6] for its underlying Mathematical structure, persistence module. Note that persistent homology in this paper is always assumed to be with Z 2 coefficients. The persistence algorithm starts with a filtration F : We can now formally define the persistent cycle problems:\n, this problem asks for computing a d-cycle with the minimal weight which is born in K \u03b2 and becomes a boundary in K \u03b4 .\n, this problem asks for computing a d-cycle with the minimal weight which is born in K \u03b2 .\nRemark 2. The definitions of the above two problems are derived directly from the definition of persistent d-cycles [13] .\nUndirected flow network. An undirected flow network (G, s 1 , s 2 ) consists of an undirected graph G with vertex set V (G) and edge set E(G), a capacity function c : E(G) \u2192 [0, +\u221e], and two non-empty disjoint subsets s 1 and s 2 of V (G). Vertices in s 1 are referred to as sources and vertices in s 2 are referred to as sinks. A cut (S, T ) of (G, s 1 , s 2 ) consists of two disjoint subsets S and T of V (G) such that S \u222a T = V (G), s 1 \u2286 S, and s 2 \u2286 T . We define the set of edges across the cut (S, T ) as \u03be(S, T ) = {e \u2208 E(G) | e connects a vertex in S and a vertex in T } The capacity of a cut (S, T ) is defined as c(S, T ) = e\u2208\u03be(S,T ) c(e). A minimal cut of (G, s 1 , s 2 ) is a cut with the minimal capacity. Note that we allow parallel edges in G (see Figure 2a) to ease the presentation. These parallel edges can be merged into one edge during computation. One dummy vertex termed as infinite vertex which does not correspond to any (d + 1)-simplices is added to G for graph edges dual to those boundary d-simplices. We then build an undirected flow network on top of G where the source is the vertex dual to \u03c3 F \u03b4 and the sink is the infinite vertex along with the set of vertices dual to those (d + 1)-simplices which are added to F after \u03c3 F \u03b4 . If a d-simplex is \u03c3 F \u03b2 or added to F before \u03c3 F \u03b2 , we let the capacity of its dual graph edge be its weight; otherwise, we let the capacity of its dual graph edge be +\u221e. Finally, we calculate a minimal cut of this flow network and return the d-chain dual to the edges across the minimal cut as a minimal persistent cycle of the interval.\nThe intuition of the above algorithm is best explained by an example in Figure 1 , where d = 1. The key to the algorithm is the duality between persistent cycles of the input interval and cuts of the dual flow network having finite capacity. To see this duality, first consider a persistent d-cycle \u03b6 of the input interval [\u03b2, \u03b4). There exists a (d + 1)-chain A in K \u03b4 created by \u03c3 F \u03b4 whose boundary equals \u03b6, making \u03b6 killed. We can let S be the set of graph vertices dual to the simplices in A and let T be the set of the remaining graph vertices, then (S, T ) is a cut. Furthermore, (S, T ) must have finite capacity as the edges across it are exactly dual to the d-simplices in \u03b6 and the d-simplices in \u03b6 have indices in F less than or equal \u03b2. On the other hand, let (S, T ) be a cut with finite capacity, then the (d + 1)-chain whose simplices are dual to the vertices in S is created by \u03c3 F \u03b4 . Taking the boundary of this (d + 1)-chain, we get a d-cycle \u03b6. Because d-simplices of \u03b6 are exactly dual to the edges across (S, T ) and each edge across (S, T ) has finite capacity, \u03b6 must reside in K \u03b2 . We only need to ensure that \u03b6 contains \u03c3 F \u03b2 in order to show that \u03b6 is a persistent cycle of [\u03b2, \u03b4). In Section 3.2, we argue that \u03b6 actually contains \u03c3 F \u03b2 , so \u03b6 is indeed a persistent cycle. Note that while the above explanation introduces the general idea, the rigorous statement and proof of the duality are articulated by Proposition 2 and 3.\nIn the dual graph, an edge is created for each d-simplex. If a d-simplex has two (d + 1)-cofaces, we simply let its dual graph edge connect the two vertices dual to its two (d + 1)-cofaces; otherwise, its dual graph edge has to connect to the infinite vertex on one end. A problem about this construction is that some weak (d + 1)-pseudomanifolds may have d-simplices being face of no (d + 1)-simplices and these d-simplices may create self loops around the infinite vertex. To avoid self loops, we simply ignore these d-simplices by constructing the dual graph only from the (d + 1)-connected component of \u03c3 F \u03b4 . The reason why we can ignore these d-simplices is that they cannot be on the boundary of a (d + 1)-chain and hence cannot be on a persistent cycle of minimal weight. Note that taking the (d + 1)-connected component may also reduce the size of the dual graph.\nWe list the pseudo-code in Algorithm 1 and it works as follows: Line 2 and 3 set up a complex K that the algorithm mainly works on, where K is taken as the closure of the (d + 1)-connected component of K containing \u03c3 F \u03b4 . Line 4 constructs the dual graph G from K and line 5\u221213 builds the flow network on top of G. Note that we denote the infinite vertex by \u03c6. Line 14 computes a minimal cut for the flow network and line 15 returns the d-chain dual to the edges across the minimal cut. In the pseudo-codes of this paper, to make presentation of algorithms and some proofs easier, we treat a Mathematical function as a computer program object. For example, the function \u03b8 returned by DualGraphFin in Algorithm 1 denotes the correspondence between the simplices of K and their dual vertices or edges (see Section 3.1 for details). In practice, these constructs can be easily implemented in any computer programming language.\nComplexity. The time complexity of Algorithm 1 depends on the encoding scheme of the input and the data structure used for representing a simplicial complex. For encodings of the input, we assume K and F to be represented by a sequence of all the simplices of K ordered by their indices in F, where each simplex is denoted by its set of vertices. We also assume a simple yet reasonable simplicial complex data structure as follows: In each dimension, simplices are mapped to integral identifiers ranging from 0 to the number of simplices in that dimension minus 1; each q-simplex has an array (or linked list) storing all the id's of its (q + 1)-cofaces; a hash map for each dimension is maintained for the query of the integral id of each simplex in that dimension based on the spanning vertices of the simplex. We further assume d to be constant. By the above assumptions, let n be the size (number of bits) of the encoded input, then there are no more than n elementary O(1) operations in line 2 and 3 so the time complexity of line 2 and 3 is O(n). It is not hard to verify that the flow network construction also takes O(n) time so the time complexity of Algorithm 1 is determined by the minimal cut algorithm. Using the max-flow algorithm by Orlin [24] , the time complexity of Algorithm 1 becomes O(n 2 )."}, {"section_title": "Algorithm 1 Computing minimal persistent d-cycles of finite intervals for weak (d + 1)-pseudomanifolds", "text": ""}, {"section_title": "Input:", "text": "K\n2:\nK \u2190 closure of the simplicial set C d+1 4:\nfor each e \u2208 E(G) do assign capacity to G 6:\nc(e) \u2190 w(\u03b8 \u22121 (e))\n8:\nc(e) \u2190 +\u221e 10:\nif \u03c6 \u2208 V (G) then 13:\n(S * , T * ) \u2190 min-cut of (G, s 1 , s 2 )\n15:\nIn the rest of this section, we first describe the subroutine DualGraphFin, then close the section by proving the correctness of the algorithm."}, {"section_title": "Dual graph construction", "text": "In this subsection, we describe the DualGraphFin subroutine of Algorithm 1, which returns a dual graph G and a \u03b8 denoting two bijections which we will explain later. Given the input ( K, d), DualGraphFin constructs an undirected connected graph G as follows:\nIf there is any d-simplex of K which has less than two (d + 1)-cofaces in K, we add an infinite vertex \u03c6 to V (G). Simultaneously, we define a bijection\nby letting \u03b8(\u03c3 d+1 ) = v. Note that in the above range notation of \u03b8, {\u03c6} may not be a subset of V (G).\n\u2022 Let each edge e of E(G)\nin K, then let e connect \u03b8(\u03c3 d+1 0 ) and \u03c6. We define another bijection \u03b8 : {d-simplices of K} \u2192 E(G) using the same notation as the bijection for V (G), by letting \u03b8(\u03c3 d ) = e.\nNote that we can take the image of a subset of the domain under a function. Therefore, if (S, T ) is a cut for a flow network built on G, then \u03b8 \u22121 (\u03be(S, T )) denotes the set of d-simplices dual to the edges across the cut. Also note that since simplicial chains with Z 2 coefficients can be interpreted as sets, \u03b8 \u22121 (\u03be(S, T )) is also a d-chain."}, {"section_title": "Algorithm correctness", "text": "In this subsection, we prove the correctness of Algorithm 1. Some of the symbols we use refer to Algorithm 1. Proposition 1. In Algorithm 1, s 2 is not an empty set.\nProof. For contradiction, suppose s 2 is an empty set, then \u03c6 \u2208 V (G) and \u03c3 F \u03b4 is the (d + 1)-simplex of K with the greatest index in F.\n\u03b4 must be a positive simplex in F, which is a contradiction.\nThe following two propositions specify the duality mentioned at the beginning of this section:\nProof. Let A = \u03b8 \u22121 (S), we first want to prove \u03b6 = \u2202(A), so that \u03b6 is a cycle. Let\nWe then show that \u03b6 is created by \u03c3 F \u03b2 . Suppose \u03b6 is created by a d-simplex \u03c3 d = \u03c3 F \u03b2 . Because c(S, T ) is finite, we have that ind(\u03c3 d ) < \u03b2. We can let \u03b6 be a persistent cycle of [\u03b2, \u03b4) and \u03b6 = \u2202(A ) where A is a (d + 1)-chain of K \u03b4 . Then we have \u03b6 + \u03b6 = \u2202(A + A ). Since A and A are both created by \u03c3 F \u03b4 , then A + A is created by a (d + 1)-simplex with an index less than \u03b4 in F. So \u03b6 + \u03b6 is a d-cycle created by \u03c3 F \u03b2 which becomes a boundary before \u03c3 F \u03b4 is added. This means that \u03c3 F \u03b2 is already paired when \u03c3 F \u03b4 is added, contradicting the fact that \u03c3 F \u03b2 is paired with \u03c3 F \u03b4 . Similarly, we can prove that \u03b6 is not a boundary until \u03c3 F \u03b4 is added, so \u03b6 is a persistent cycle of [\u03b2, \u03b4). Since (S, T ) has finite capacity, we must have\nNote that A is created by \u03c3 F \u03b4 and \u03b6 is the set of d-simplices which are face of exactly one (d + 1)-simplex of A. Let \u03b6 = \u03b6 \u2229 K and A = A \u2229 K, we claim that \u03b6 = \u2202(A ). To prove this, first let \nThe proof of the equality is similar to the one in the proof of Proposition 2. It follows that \u03be(S, T ) = \u03b8(\u03b6 ). We then have that\nbecause each d-simplex of \u03b6 has an index less than or equal to \u03b2 in F. Finally, because \u03b6 is a subchain of \u03b6, we must have c(S, T ) = w(\u03b6 ) \u2264 w(\u03b6).\nCombining the above facts, we can conclude: Proof. First, the flow network (G, s 1 , s 2 ) constructed by Algorithm 1 must be valid by Proposition 1. Next, because the interval [\u03b2, \u03b4) must have a persistent cycle, by Proposition 3, the flow network (G, s 1 , s 2 ) has a cut with finite capacity. This means that c(S * , T * ) is finite. By Proposition 2, the chain \u03b6 * = \u03b8 \u22121 (\u03be(S * , T * )) is a persistent cycle of [\u03b2, \u03b4). Suppose \u03b6 * is not a minimal persistent cycle of [\u03b2, \u03b4) and instead let \u03b6 be a minimal persistent cycle of [\u03b2, \u03b4). Then there exists a cut (S , T ) such that c(S , T ) \u2264 w(\u03b6 ) < w(\u03b6 * ) = c(S * , T * ) by Proposition 2 and 3, contradicting the fact that (S * , T * ) is a minimal cut.\nTo prove the correctness of Algorithm 2, we need two conclusions about cycles with Z 2 coefficients. Specifically, Proposition 6 says that an embedded (q \u2212 1)-cycle in R q separates the space and hence the two oriented simplices of a (q \u2212 1)-simplex in the cycle bound different voids. Proposition 7 says that a q-simplex in a q-cycle belongs to a q-connected sub-cycle of the q-cycle.\nProposition 6. Let q \u2265 2, \u03b6 be a (q \u2212 1)-cycle (with Z 2 coefficients) of a simplicial complex embedded in R q , and Z be the closure of the simplicial set \u03b6. Then for any (q \u2212 1)-simplex \u03c3 of \u03b6, the two oriented simplices of \u03c3 must bound different voids of R q |Z|.\nProof. Consider a closed topological q-ball B such that \u03c3 \u2286 B and B \u2229 |Z \u03c3| equals the boundary of \u03c3. Let B 1 and B 2 be the two open half balls of B separated by \u03c3. Then it is true that the two oriented simplices of \u03c3 bound different voids of R q |Z| if and only if B 1 and B 2 are not connected in R q |Z|. So we only need to show that B 1 and B 2 are not connected in R q |Z|. Consider a filtration of Z where \u03c3 is the last simplex added. Because \u03c3 is a positive simplex in the filtration, by adding \u03c3, the dimension of H q\u22121 must increase by 1. By Alexander duality, the dimension of H 0 of the complement space also increases by 1. Then B 1 and B 2 cannot be connected in R q |Z|.\nProposition 7. Let \u03b6 be a q-cycle (with Z 2 coefficients) of a simplicial complex where q > 0, then for any q-simplex \u03c3 of \u03b6, there must be a q-cycle \u03b6 (with Z 2 coefficients) containing \u03c3 such that \u03b6 \u2286 \u03b6 and \u03b6 is q-connected.\nProof. We can construct an undirected graph L for \u03b6, with vertices of L corresponding to the q-simplices in \u03b6. For each (q \u2212 1)-simplex \u03c3 q\u22121 which is face of a q-simplex of \u03b6, let N be the set of q-simplices in \u03b6 having \u03c3 q\u22121 as a face, then |N | must be even. We can pair q-simplices of N arbitrarily, and make each pair of q-simplices form an edge in L. Let C be the connected component of L containing the corresponding vertex of \u03c3 and \u03b6 be the q-chain corresponding to C, then \u03b6 must be a cycle. This is because we can pair the (q \u2212 1)-faces of all q-simplices in \u03b6 according to the edges in L, so \u2202(\u03b6 ) = 0. Furthermore, \u03b6 contains \u03c3, \u03b6 \u2286 \u03b6, and \u03b6 is q-connected.\nThroughout the rest of this subsection, some of the symbols we use refer to Algorithm 2. We endow the ambient space R d+1 with a \"cellular complex\" structure by treating voids of R d+1 | K| as (d + 1)-dimensional \"cells\". This cellular complex of R d+1 is denoted as R d+1 and "}, {"section_title": "Minimal persistent d-cycles of infinite intervals for weak", "text": "We already mentioned that computing minimal persistent d-cycles (d \u2265 2) for infinite intervals is NP-hard even if we restrict to weak (d + 1)-pseudomanifolds (see Section 5.3 for a proof). However, when the complex is embedded in R d+1 , the problem becomes polynomially tractable. In this section, we present an algorithm for this problem given a weak (d + 1)-pseudomanifold embedded in R d+1 , when d \u2265 1 \u2021 . The algorithm uses a similar duality described in Section 3. However, a direct use of the approach in Section 3 does not work. For example, in Figure 2a , 1-simplices that do not have any 2-cofaces cannot reside in any 2-connected component of the given complex. Hence, no cut in the flow network may correspond to a persistent cycle of the infinite interval created by such a 1-simplex. Furthermore, unlike the finite interval case, we do not have a negative simplex whose dual can act as a source in the flow network. \n. By the definition of the problem, the task boils down to computing a minimal d-cycle containing \u03c3 F \u03b2 in K \u03b2 . Note that K \u03b2 is also a weak (d + 1)-pseudomanifold embedded in R d+1 . Generically, assume K is an arbitrary weak (d + 1)-pseudomanifold embedded in R d+1 and we want to compute a minimal d-cycle containing a d-simplex \u03c3 for K. By the embedding assumption, the connected components of R d+1 | K| are well defined and we call them the voids of K. The complex K has a natural (undirected) dual graph structure as exemplified by Figure 2a The efficiency of the above algorithm is in part determined by the efficiency of the dual graph construction. This step requires identifying the voids that the boundary d-simplices are incident on. A straightforward approach would be to first group the boundary d-simplices into d-cycles by local geometry, and then build the nesting structure of these d-cycles to correctly reconstruct the boundaries of the voids. This approach has a quadratic worst-case complexity. To make the void boundary reconstruction faster, we assume that the simplicial complex being worked on is d-connected so that building the nesting structure is not needed. Our reconstruction then runs in almost linear time. To satisfy the d-connected assumption, we begin our algorithm by taking K as a d-connected subcomplex of K \u03b2 containing \u03c3 F \u03b2 and continue only with this K. The computed output is still correct because the minimal cycle in K is again a minimal cycle in K \u03b2 as shown in Section 4.2.\nWe list the pseudo-code in Algorithm 2 and it works as follows: Line 2\u22125 set up the complex K that the algorithm works on. Line 2 prunes K \u03b2 to produce a complex K \u03b2 . Given (K \u03b2 Figure 3b , we could treat the entire complex as K \u03b2 , all 1-simplices as C \u03b2 , and all 2-simplices as \u03a3 d+1 . If we do not add \u03a3 d+1 to the closure of C \u03b2 , there will be seven more voids corresponding to the boundaries of the seven 2-simplices. Line 6 reconstructs the void boundaries for K. Each returned \u03b6 j denotes a set of d-simplices forming the boundary of a void. As indicated in Section 4.1, the d-simplices in a void boundary are oriented. Line 7 constructs the dual graph G based on the reconstructed void boundaries. Similar to Algorithm 1, the function \u03b8 returned by DualGraphInf denotes the bijection from d-simplices of K to E(G). Line 8\u221212 build the flow network on top of G. The capacity of each edge is equal to the weight of its dual d-simplex and the source and sink are selected as previously described. Line 13 computes a minimal cut for the flow network and line 14 returns the d-chain dual to the edges across the minimal cut.\nComplexity. We make the same assumptions as in the complexity analysis for Algorithm 1. Since the void boundary reconstruction needs to sort the d-cofaces of certain (d \u2212 1)-simplices, its worstcase time complexity is O(n log n). Then, all operations other than the minimal cut computation take O(n log n) time. Therefore, similar to Algorithm 1, Algorithm 2 achieves a complexity of O(n 2 ) by using Orlin's max-flow algorithm [24] .\nIn the rest of this section, we first describe the subroutine VoidBoundary invoked by Algorithm 2 and then prove the correctness of the algorithm."}, {"section_title": "Void boundary reconstruction", "text": "As previously stated, the object of the reconstruction is to identify which voids a boundary d-simplex of K is incident on. The task becomes complicated because a void may have disconnected boundaries and a d-simplex may bound more than one void. This is exemplified in Figure 3a . To address this issue, we orient the boundary d-simplices and determine the orientations consistently from the voids they bound. This is possible because an orientation of a d-simplex in R d+1 associates exactly one of its two sides to the d-simplex. To describe the boundary reconstruction procedure, we define a boundary d-simplex of K as a d-simplex with less than two (d + 1)-cofaces in K. We also denote the set of boundary d-simplices of K as bd( K). To reconstruct the boundaries, we first inspect the neighborhood of each (d \u2212 1)-simplex being face of a boundary d-simplex and pair the oriented boundary d-simplices in the neighborhood which locally bound the same void. Figure 2b gives an example of the oriented boundary d-simplices pairing for d = 1. In Figure 2b , there are three local Input:\nK \u2190 (closure of the simplicial set C \u03b2 ) \u222a \u03a3 d+1 6:\nfor each e \u2208 E(G) do assign capacity to G"}, {"section_title": "9:", "text": "c(e) \u2190 w(\u03b8 \u22121 (e))\n10:\n:\ns 2 \u2190 {v 2 } set the sink"}, {"section_title": "13:", "text": "(S * , T * ) \u2190 min-cut of (G, s 1 , s 2 )"}, {"section_title": "14:", "text": "return \u03b8 \u22121 (\u03be(S * , T * )) voids each colored differently. The oriented 1-simplices with the same color bound the same void and are paired. After pairing the oriented boundary d-simplices, we group them by putting paired ones into the same group. Each group then forms a d-cycle (with Z coefficients). This is exemplified by Figure 3 for d = 1. Note that in general, the above grouping does not fully reconstruct the void boundaries. This can be seen from Figure 3a where the complex has four voids but the grouping produces six 1-cycles. In order to fully reconstruct the boundaries, one has to retrieve the nesting structure of these d-cycles, which may take \u2126(n 2 ) time in the worst-case. However, as we work on a complex K that is d-connected, we cannot have voids with disconnected boundaries. Therefore, the grouping of oriented d-simplices can fully recover the void boundaries. Figure 3b gives an example for this when d = 1, where we add two 1-simplices to make the complex 1-connected. The four 1-cycles produced by the grouping are exactly the boundaries of the four voids.\nIn the rest of this subsection, we formalize the above ideas for reconstructing void boundaries and provide a proof for the correctness. Throughout this subsection, K and d are as defined in Algorithm 2. We first recall the definition of oriented simplices:\nDefinition 5 (Oriented simplex [22] ). An oriented q-simplex is a q-simplex with an ordering of its vertices. For each q-simplex \u03c3 (q > 0), there are exactly two equivalent classes of vertex orderings, resulting in two oriented q-simplices of \u03c3. We refer them as the oppositely oriented q-simplices. We then introduce the definition of the natural orientation of a q-simplex in R q . We use its induced orientation to canonically orient the boundary simplices.\nDefinition 6 (Natural orientation [22] ). Let q > 1 and \u03c3 = {v 0 , . . . , v q } be a q-simplex in R q , an oriented simplex \u03c3 = [v 0 , . . . , v q ] of \u03c3 is naturally oriented if det(v 1 \u2212 v 0 , . . . , v q \u2212 v 0 ) > 0. For each face \u03c3 of \u03c3, the natural orientation of \u03c3 induces an orientation of \u03c3 which we term as the induced orientation.\nWe now formally define the boundary of a void as follows:\nDefinition 7 (Boundary of void). Let K be a simplicial complex embedded in R q where q \u2265 2, we define each connected component of R q |K| to be a void. An oriented (q \u2212 1)-simplex \u03c3 q\u22121 = [v 0 , . . . , v q\u22121 ] of K is said to bound a void V of R q |K| if the following conditions are satisfied:\n\u2022 The simplex \u03c3 q\u22121 = {v 0 , . . . , v q\u22121 } is contained in the closure of V.\n\u2022 Let u be an interior point of \u03c3 q\u22121 = {v 0 , . . . , v q\u22121 }, v be a point in V such that the line segment uv is contained in V and uv is orthogonal to the hyperplane spanned by \u03c3 q\u22121 . Furthermore, let \u03c3 q be the naturally oriented simplex of {v, v 0 , . . . , v q\u22121 }. Then, \u03c3 q\u22121 has the induced orientation from \u03c3 q .\nThe boundary of a void V is then defined as the set of oriented (q \u2212 1)-simplices of K bounding V.\nRemark 4. We can also interpret the boundary of a void as a sum of oriented (q \u2212 1)-simplices, then the boundary defines a (q \u2212 1)-cycle (with Z coefficients).\nWe now describe the pairing algorithm of the oriented boundary d-simplices for K. Let \u03c3 d\u22121 be a (d \u2212 1)-simplex which is a face of a d-simplex in bd( K), we first take a 2D plane \u2206 which contains an interior point of \u03c3 d\u22121 and is orthogonal to the hyperplane spanned by \u03c3 d\u22121 . We then take the intersection of the plane \u2206 with each boundary d-simplex in the neighborhood of \u03c3 d\u22121 to get a set of line segments that we order circularly starting from an arbitrary one. For each two consecutive line segments in this order which enclose a void, we pick a point p on the plane \u2206 which resides in the void. Suppose one of the two line segments is derived from a boundary d-simplex For (a, b) , we can pick p as an interior point in the blue region and the two oriented d-simplices corresponding to a and b can be induced and paired.\nWe summarize the steps of the VoidBoundary subroutine in the following: 2. After gathering all the pairing, group the oriented boundary d-simplices by putting all paired ones into a group.\n3. Return ( \u03b6 1 , . . . , \u03b6 k ), each of which is a group of the oriented boundary d-simplices.\nThe following theorem concludes the correctness of the reconstruction:\nTheorem 5. Any \u03b6 j returned by VoidBoundary is the boundary of a void of R d+1 | K|.\nProof. See Appendix A."}, {"section_title": "Proposition 8. For any cut", "text": "(S, T ) of (G, s 1 , s 2 ), the d-chain \u03b6 = \u03b8 \u22121 (\u03be(S, T )) is a persistent d-cycle of [\u03b2,"}, {"section_title": "+\u221e) and w(\u03b6) = c(S, T ).", "text": "Proof. We have three things to show: (i) \u03b6 contains \u03c3 F \u03b2 ; (ii) w(\u03b6) = c(S, T ); (iii) \u03b6 is a cycle. Claim (i) and (ii) are not hard to verify and we prove claim (iii) by showing that \u03b6 = \u03b1\u2208\u03b8 \u22121 (S) \u2202(\u03b1), so that as a sum of cycles, \u03b6 is a cycle. The detail for the equality of the two chains is omitted as it is similar to the one in the proof of Proposition 2. Proof. Because of the nature of the pruning, \u03b6 must reside in K \u03b2 . By Proposition 7, there must be a d-cycle \u03b6 \u2286 \u03b6 such that \u03b6 is d-connected and contains \u03c3 F \u03b2 . Hence, \u03b6 resides in K. Let Z be the closure of the simplicial set \u03b6 , we can run the void boundary reconstruction algorithm of Section 4.1 on Z and take a void boundary \u03b6 containing an oriented simplex \u03c3 F \u03b2 of \u03c3 F \u03b2 . We can map each oriented simplex of \u03b6 to its unoriented simplex and let \u03b6 0 be the sum of these unoriented simplices, then \u03b6 0 is a d-cycle (with Z 2 coefficients) and \u03b6 0 \u2286 \u03b6 . By Proposition 6, the oppositely oriented simplex of \u03c3 F \u03b2 must not be in \u03b6, so \u03b6 0 contains \u03c3 Proof. First, the flow network (G, s 1 , s 2 ) constructed by Algorithm 2 is valid. The reason is that, by Proposition 6, it cannot happen that the two oriented simplices of \u03c3 F \u03b2 bound the same void of R d+1 | K|. So \u03c3 F \u03b2 must correspond to an edge of G. Then by Proposition 8 and 9, we can reach the conclusion.\n5 Hardness for general complexes"}, {"section_title": "Suspension operator", "text": "The NP-hardness proof in this section relies on the definition of the suspension operator. While Hatcher [21] defines this operator for general topological spaces, we introduce a definition of the operator for simplicial complexes:\nDefinition 8 (Suspension [20] ). For any simplicial complex K, the suspension SK is a simplicial complex such that\nwhere \u03c9 1 and \u03c9 2 are two extra vertices.\nRemark 5. In the above definition, we denote a simplex by its set of vertices.\nWe then make some regulations and present some properties for the suspension operator. Throughout the rest of this subsection, K is always an arbitrary simplicial complex.\nWe call any simplex of the form \u03c3 \u222a {\u03c9 i } in SK a suspended simplex. We let S also denote a linear map S : C q (K) \u2192 C q+1 (SK), where S\u03c3 = \u03c3 \u222a {\u03c9 1 } + \u03c3 \u222a {\u03c9 2 } for any q-simplex \u03c3 of K. Note that since S is injective, S defines an isomorphism from C q (K) to S(C q (K)). For any chain A \u2208 S(C q (K)), we abuse the notation slightly by letting S \u22121 A denote the chain in C q (K) mapped to A under S.\nProposition 11. For any q \u2265 1, the following diagram commutes:\nProof. For any q-simplex \u03c3 = {v 0 , . . . , v q } of K, we have\nIn the above equations, the notation v i means that v i is deleted from the simplex.\nProposition 12. For q \u2265 1 and any q-cycle \u03b6 of SK containing only suspended simplices, one has \u03b6 \u2208 S(C q\u22121 (K)).\nProof. For any suspended q-simplex \u03c3 \u222a {\u03c9 i } of \u03b6, if \u03c9 i = \u03c9 1 , then \u03c3 \u222a {\u03c9 2 } must also belong to \u03b6 because no other suspended q-simplices of SK have \u03c3 in the boundary. If \u03c9 i = \u03c9 2 , the same argument follows.\nProposition 13. If q is the top dimension of K and q \u2265 1, then for any A \u2208 C q+1 (SK) such that \u2202(A) contains only suspended simplices, one has A \u2208 S(C q (K)).\nProof. Because q is the top dimension of K, A contains only suspended simplices. For any \u03c3 \u222a {\u03c9 i } \u2208 A, we have \u03c3 \u2208 \u2202 \u03c3 \u222a {\u03c9 i } . If \u03c9 i = \u03c9 1 , to make \u03c3 cancelled in \u2202(A), \u03c3 \u222a {\u03c9 2 } must also belong to A because no other (q + 1)-simplices in SK have \u03c3 in the boundary. If \u03c9 i = \u03c9 2 , the same argument follows."}, {"section_title": "Hardness for finite intervals", "text": "The following proposition helps to prove our conclusion of the hardness:\n, where the i th complex of F is denoted as K i , we can assume the top dimension of K to be d. The reason is that if it were not, we can restrict F to the d-skeleton of K without affecting D d\u22121 (F) and the persistent (d \u2212 1)-cycles. Then, we let SK be the simplicial complex for the instance of PCYC-FIN d we are going to construct. For any suspended d-simplex \u03c3 \u222a {\u03c9 i } of SK, we let the weight of \u03c3 \u222a {\u03c9 i } be half of the weight of \u03c3 in K. Furthermore, we let the weight of any non-suspended d-simplex of SK be the sum of all the weights of (d \u2212 1)-simplices in K plus 1. We endow SK with a filtration\nwhere n is the number of simplices of K. Denoting the i th simplex added in F as \u03c3 i and the i th simplex added in SF as \u03c3 i , we let \u03c3 1 = {\u03c9 1 }, \u03c3 2 = {\u03c9 2 }, and for any 1\nWe observe the following facts:\n(i) For any i, \u03c3 3i is positive and pairs with \u03c3 3i+1 in SF.\n(ii) For any i and j, if there is a (d \u2212 1)-cycle created by \u03c3 i which is a boundary in K j , then there is a d-cycle created by \u03c3 3i+2 which is a boundary in K 3j+2 .\n(iii) For any i and j, if there is a d-cycle created by \u03c3 3i+2 which is a boundary in K 3j+2 , then there is a (d \u2212 1)-cycle created by \u03c3 i which is a boundary in K j .\nThe correctness of (i) is not hard to verify. To verify (ii), we can suspend the (d \u2212 1)-cycle and use Proposition 11 to reach the claim. The argument for (iii) is as follows: Consider a d-cycle \u03b6 0 created by \u03c3 3i+2 which is a boundary in K 3j+2 . For any non-suspended d-simplex \u03c3 of \u03b6 0 , we add \u2202 \u03c3 \u222a {\u03c9 1 } to \u03b6 0 to cancel \u03c3 with only suspended simplices added. Note that the adding process only adds d-simplices in K 3i+2 and never cancels \u03c3 3i+2 . After all non-suspended simplices of \u03b6 0 are canceled, we derive a d-cycle \u03b6 which is created by \u03c3 3i+2 and contains only suspended simplices. By Proposition 12, S \u22121 \u03b6 is well defined. Since \u03b6 is homologous to \u03b6 0 in K 3i+2 , \u03b6 is also a boundary in K 3j+2 . We can let \u03b6 be the boundary of a (\nFrom the above facts, it is immediate that \u03c3 3\u03b2+2 is a positive simplex in SF and pairs with \u03c3 3\u03b4+2 so that [3\u03b2 + 2, 3\u03b4 + 2) is an interval in D d (SF). It is also true that there is a bijection from the persistent (d \u2212 1)-cycles of [\u03b2, \u03b4) to the persistent d-cycles of [3\u03b2 + 2, 3\u03b4 + 2) containing only suspended simplices. Furthermore, the bijection preserves the weights of the cycles. From the weight assigning policy, the minimal persistent d-cycle of [3\u03b2 + 2, 3\u03b4 + 2) must contain only suspended simplices, so this minimal persistent d-cycle of [3\u03b2 +2, 3\u03b4 +2) induces a minimal persistent (d \u2212 1)-cycle of [\u03b2, \u03b4). Now we have reduced PCYC -FIN d\u22121 to PCYC-FIN d . Furthermore, the reduction is in polynomial time and the size of (SK, SF, [3\u03b2 + 2, 3\u03b4 + 2)) is a polynomial function of the size of (K, F, [\u03b2, \u03b4) ).\nWe have the following result from [13] :\nCombining Proposition 14 and 15, we obtain the following theorem:"}, {"section_title": "Hardness for infinite intervals", "text": "In this subsection, we prove that it is NP-hard to approximate WPCYC-INF d with any fixed ratio. In order to make the approximation ratio well-defined, we define WPCYC-INF + d as a subproblem of WPCYC-INF d where all d-simplices are positively weighted. Also, for any optimization problem PROB and r \u2265 1, we let PROB[r] denote the problem which asks for an approximate solution with ratio r given an instance of PROB. For a definition of approximation ratio, we recommend the book [10] .\nIn order to prove the hardness result, we recall the definition of the nearest codeword problem, which is NP-hard to approximate with any fixed ratio [8] :\nProblem 3 (NR-CODE). Given an l \u00d7 k full-rank matrix A over Z 2 for k < l and a vector y 0 \u2208 (Z 2 ) l Img (A), find a vector in y 0 + Img (A) with the minimal Hamming weight. , we then build a \"tube complex\" T 1 with (l \u2212 k) 1-cells each of which is a 1-sphere and l 2-cells each of which is a 2-sphere with holes. The 2-cells of T 1 are attached to the 1-cells along the holes such that the boundary matrix \u2202 2 of this tube complex equals A \u22a5 . The \"q-chains\" and \"q-cycles\" for a tube complex are analogously defined as for a simplicial complex. We also assign a weight of 1 to each 2-cell of T 1 . By this construction, there is a straightforward bijection \u03c6 : (Z 2 ) l \u2192 C 2 (T 1 ), such that the Hamming weight of a vector equals the weight of the corresponding 2-chain. Note that Z 2 (T 1 ) = Ker (\u2202 2 ) = \u03c6(Ker (A \u22a5 )) = \u03c6(Img (A)). Let y 0 = \u03c6(y 0 ), we then add a 2-cell t whose boundary equals \u2202 2 ( y 0 ) to T 1 and get a new tube complex T 2 . We call the 2-cycles in T 2 which are not in T 1 as the new 2-cycles in T 2 . Then t + y 0 is a new 2-cycle in T 2 and the set of new 2-cycles in T 2 is t + y 0 + Z 2 (T 1 ). We let the weight of t also be 1. Note that there is a bijection \u03c8 : y 0 + Img (A) \u2192 t + y 0 + Z 2 (T 1 ), where \u03c8(y 0 + z) = t + y 0 + \u03c6(z) for any z \u2208 Img (A), such that w(\u03c8(y 0 + z)) = y 0 + z H + w( t).\nWe then construct an instance of WPCYC-INF\n[r] by first triangulating T 2 to get a simplicial complex K. We make K 2-weighted such that the sum of the weights of all triangles in any 2-cell of T 2 equals the weight of the 2-cell. It is not hard to make the size of K a polynomial function of the number of cells of T 2 . We can let \u03c3 be a 2-simplex in the triangulation of the 2-cell t and build a filtration F of K with \u03c3 being the last simplex added. Suppose the index of \u03c3 in F is \u03b2, then [\u03b2, +\u221e) is an infinite interval of D 2 (F). Note that there is a bijection between the new 2-cycles in T 2 and the persistent 2-cycles of [\u03b2, +\u221e), where the weights of the cycles are preserved. Therefore, from the solution of WPCYC-INF + 2 [r] with the input (K, F, [\u03b2, +\u221e) ), we can derive a new 2-cycle t + y 0 + \u03b6 of T 2 , where \u03b6 \u2208 Z 2 (T 1 ) and t + y 0 + \u03b6 is an r-approximation of the minimal new 2-cycle. Let t + y 0 + \u03b6 * be a minimal new 2-cycle of T 2 , we have\nWe also have 1 is the (d \u2212 1)-skeleton of K \u03b2 . We make K d-weighted such that any d-simplex \u03c3 \u222a{\u03c9 i } of K has half of the weight of \u03c3 in K. The complex K is endowed with a filtration F such that \u03c3 F \u03b2 \u222a {\u03c9 2 } is the last simplex added to F . Let \u03b2 be the index of\nIt is true that S restricts to a bijection from Z d\u22121 (K \u03b2 ) to Z d (K ) preserving the weights of the cycles. Furthermore, for any \u03b6\n, \u03b6 is an r-approximation of the minimal solution, then S \u22121 \u03b6 is an r-approximation for the instance (K, F, [\u03b2, +\u221e)) of WPCYC-INF\n. Therefore, the reduction is done."}, {"section_title": "Experimental results", "text": "We experiment with our algorithms for WPCYC-FIN 2 and WEPCYC-INF 2 on several volume datasets. Volume data often have a natural cubical complex structure. Therefore, we adapt our implementation slightly in order to work on cubical complexes. The cubical complex for volume data consists of cells in dimensions from 0 to 3 with the underlying space homeomorphic to a 3-dimensional ball. Note that a filtration built from a volume dataset does not produce any infinite intervals. Hence, in order to test our algorithm for WEPCYC-INF 2 on volume data, we take a finite interval and compute the minimal 2-cycle born at the birth time, which is exactly what WEPCYC-INF 2 computes. We use the Gudhi [27] library to build the filtrations and compute the persistence intervals. In the cubical complex data structure of Gudhi, the scalar values are given on 3-dimensional cubes and extended to lower-dimensional cells (see [27] for details). From the experiments, we can see that the minimal persistent 2-cycles computed by our algorithms capture various features of the volume data which originate from different fields such as cosmology, meteorology, scientific data visualisation, medical imaging, and material science. Note that the combustion, hurricane, and medical datasets are time-varying and we chose a single time frame to compute the persistent intervals and cycles.\nCosmology. The simulation data shown in Figure 4a from computational cosmology [3] consist of dark matter represented as particles. The thread-like structures in deep purple shown in Figure 4a correspond to sites of large scale structure formation. Galaxy clusters/superclusters are contained in such large scale structures. Figure 4b shows the minimal persistent 2-cycles of the top five longest intervals computed by our algorithms and these cycles precisely represent the top five galaxy clusters/superclusters in volume.\nCombustion. The data shown in Figure 4c correspond to the physical variable \u00b6 \u03c7 from a model of a turbulent combustion process. The variable \u03c7 represents scalar dissipation rate and provides a measure of the maximum possible chemical reaction rate. The minimal persistent 2-cycles shown in Figure 4d represent areas with high value of \u03c7.\nHurricane. This dataset with 11 physical variables corresponds to the devastating hurricane named Isabel. We down-sampled the data into a resolution of 250 \u00d7 250 \u00d7 50 and worked with two physical variables. The minimal persistent 2-cycle colored blue in Figure 5a is computed on the cloud-volume variable and extracts the eye of the hurricane. The minimal persistent 2-cycle colored green in Figure 5b is computed on the pressure variable and captures the jagged shape of the pressure variation around the hurricane. \u00b6 A physical variable defines a scalar value of a certain kind on each point. The Hurricane Isabel data is produced by the Weather Research and Forecast (WRF) model, courtesy of NCAR, and the U.S. National Science Foundation (NSF). Medical imaging. This dataset from the ADNI [25] project contains the MRI scan of a healthy human skull. The minimal persistent 2-cycles corresponding to the larger intervals as shown in Figure 5c are computed from two time frames. They extract significant features such as eyes, cartilages, nerves, and muscles.\nMaterial science. We consider the atomic configuration of BaT iO 3 , which is a ferroelectric material used for making capacitors, transducers, and microphones. Figure 6a shows the atomic configuration of the molecule, where the red, grey, and green balls denote the Oxygen, Titanium, and Barium atoms separately and the radii of the balls equal the radii of the corresponding atoms. Volume data are built by uniformly sampling a 3 \u00d7 3 \u00d7 3 lattice structure similar to the one shown in Figure 6a , with the step width equal to one angstrom (note that Figure 6a only shows a 2 \u00d7 2 \u00d7 2 lattice structure). Scalar value on a point of the volume is determined as follows: For each atom, let the distance from the point to the atom's center be d, then the scalar value of the point contributed by the atom is max{w(r \u2212d)/r, 0}, where r is the radius of the atom and w is the atomic weight. The scalar value on the point is then equal to the sum of the above values contributed by all atoms. For the purpose of this experiment, we computed minimal persistent 2-cycles on both the original scalar function and its negated one. Figure 6b shows a portion of the minimal persistent 2-cycles computed on the original function, where the purple, red, and green cycles correspond to atoms of Barium, Titanium, and Oxygen respectively. In our experiment, every atom corresponds to such a minimal persistent 2-cycle of a long interval. Figure 6c shows a portion of the minimal persistent 2-cycles computed on the negated function, where the cycles complement the Barium atoms. Figure 6d shows the output on the negated function derived from a tetragonal lattice structure, where the atomic bonds are not straight (see Figure 6d inlay). The stretch on the lattice structure leads to minimal persistent 2-cycles with non-trivial genus. "}, {"section_title": "A Proof of Theorem 5", "text": "We first define some symbols used throughout this section. The interior of a set U is denoted by Int(U ). The boundary of a topological ball B is denoted by bd(B). The set of q-cofaces of a simplex \u03c3 in a \u2206-complex [21] K is denoted by cof K q (\u03c3). The proof of Theorem 5 is based on the well-known Theorem 19 extended by Alexander [2] . The statement of the theorem depends on the following definition: Definition 9 (Pseudomanifold). A simplicial complex K is a q-pseudomanifold if K is a pure q-complex and each (q \u2212 1)-simplex is face of exactly two q-simplices in K.\nRemark 7. Note that definitions for q-pseudomanifolds, such as in [26] , typically assume the complex to be q-connected.\nTheorem 19 (Extended Jordan-Brouwer Separation Theorem [2] ). Let q > 1 and M be a finite (q \u2212 1)-connected (q \u2212 1)-pseudomanifold embedded in R q , then R q |M| has exactly 2 connected components."}, {"section_title": "Now we can finish our proof:", "text": "Proof of Theorem 5. The general idea of the proof is as follows: Using a trick which we call the \"decontracting\", we first create a \u2206-complex K where each oriented simplex of \u03b6 j uniquely corresponds to an unoriented simplex. Then, using a trick which we call the \"de-pinching\", we show that \u03b6 j is the boundary of a region A. Finally, from the above fact, we use proof by contradiction to reach the conclusion. Figure 7b gives an example of the \"de-contracting\" and \"de-pinching\".\nFirst, let \u03a3 be the set of d-simplices of K whose both oriented simplices are in \u03b6 j . For a d-simplex \u03c3 d of \u03a3 , we can let B be a topological (d + 1)-ball residing in R d+1 such that bd(B ) equals two d-simplices with boundaries glued together. We then homeomorphically map points of R d+1 \u03c3 d to R d+1 B . By taking care of the mapping near the boundary of B , we can get a new ambient R d+1 and a new \u2206-complex where all simplices of K are untouched except that \u03c3 d now corresponds to the two d-simplices bounding B . We can also think of the above process as \"de-contracting\" the topological d-ball \u03c3 d into the topological (d + 1)-ball B so that \u03c3 d turns into two seperate d-simplices with identical (d \u2212 1)-faces (see Figure 7a for an example). After doing the \"de-contraction\" for all d-simplices in \u03a3 , we get a \u2206-complex K . It is true that an oriented boundary d-simplex in K can be naturally identified as an oriented boundary d-simplex in K . It is also true that the groups of oriented boundary d-simplices in K are still groups of oriented boundary d-simplices in K under the natural identification. So we can let \u03b6 j denote the same group of oriented d-simplices in K . The construction guarantees that if \u03b6 j is the boundary of a void of R d+1 | K |, then \u03b6 j is also the boundary of a void of R d+1 | K|. So we only need to show that \u03b6 j is the boundary of a void of R d+1 | K | (see Figure 7b for an example). From now on, we always treat \u03b6 j as a set of oriented d-simplices as well as a d-cycle (with Z coefficients) in K .\nSince different oriented simplices of \u03b6 j correspond to different unoriented simplices in K , we define a bijection \u03c8 : \u03b6 j \u2192 \u03b6. The bijection \u03c8 maps each oriented simplex of \u03b6 j to its corresponding unoriented simplex and \u03b6 is the image of this mapping. We then let M be the closure of the simplicial set \u03b6. Note that \u03b6 is a d-cycle (with Z 2 coefficients) of K and M is a subcomplex of K . Therefore, each (d \u2212 1)-simplex is face of an even number of d-simplices in M. We first pick a Since we can subdivide M h to make it a simplicial complex, by Theorem 19, |M h | must separate R d+1 into two connected components. Note that for each i, we can treat R d+1 |M i | as a subset of R d+1 |M i+1 | because to deform M i+1 back to M i , we only need to contract some points in R d+1 |M i+1 | to points in |M i+1 |. Then the connected components of R d+1 |M| are still connected in R d+1 |M h |. Since all oriented d-simplices of \u03b6 j bound the same void of R d+1 | K |, we can let this void be V. The void V is still connected in R d+1 |M| because R d+1 | K | \u2286 R d+1 |M|. Therefore, V is still connected in R d+1 |M h |. We can let A be the connected component of R d+1 |M h | containing V and let B be the other connected component. The d-simplices in M and M h can be identified because going from each M i to M i+1 the interior of each d-simplex is never touched. Therefore, \u03b6 is still a d-cycle (with Z 2 coefficients) in M h . We then have that the two d-cycles (with Z coefficients) in M h , which are derived from the two consistent orientations of simplices of \u03b6, bound A and B. Then, as one of the two d-cycles (with Z coefficients) derived from \u03b6, \u03b6 j must be the boundary of A or B in M h . We have that \u03b6 j bounds A because B does not contain points from V. A fact about our construction is that to deform each M i back into M i\u22121 , we only need to contract points in B. This implies that A is still a void of R d+1 |M| with boundary \u03b6 j (see Figure 7b for an example).\nTo prove that \u03b6 j is the boundary of a void of R d+1 | K |, we only need to show that there are no oriented d-simplices which are in the boundary of V but do not belong to \u03b6 j . For contradiction, suppose there is such an oriented d-simplex \u03c3 d . Then \u03c3 d must not be oppositely oriented to any oriented simplex of \u03b6 j because otherwise \u03c3 d would bound another connected component of"}]